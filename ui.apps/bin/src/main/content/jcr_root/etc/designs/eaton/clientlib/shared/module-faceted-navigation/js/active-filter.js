/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  var unescapeAttr = window.App.global.utils.unescapeAttr;

  var App = window.App || {};
  App.ActiveFilter = function () {
    _createClass(ActiveFilter, [{
      key: 'init',

      /**
       * Initialize the ActiveFilter class
       * @function init
       * @param {object} container - A reference to the ActiveFilter container's DOM element so data attributes may be referenced
      */
      value: function init(container) {
        this.container = container;
        this.name = unescapeAttr(this.container.dataset.name);
        this.value = unescapeAttr(this.container.dataset.value);
        this.title = unescapeAttr(this.container.dataset.title);

        this.render();
      }

      /**
       * @function markup
       * The current html representation of the component based upon the current properties.
       */

    }, {
      key: 'markup',
      value: function markup() {
        return '\n        <button class="faceted-navigation-header__filter-link"\n          aria-label="Remove ' + this.title + ' filter"\n          data-filter-name="' + this.name + '"\n          data-filter-value="' + this.value + '">\n          <span class="faceted-navigation-header__filter-label"><bdi>' + this.title + '</bdi></span>\n          <i class="icon icon-close" aria-hidden="true"></i>\n        </button>\n      ';
      }

      /**
       * @function
       * Renders the component based upon the current properties.
       */

    }, {
      key: 'render',
      value: function render() {
        this.container.innerHTML = this.markup();
        this.filterLink = this.container.querySelector('.faceted-navigation-header__filter-link');

        this.addEventListeners();
      }

      /**
       * @function addEventListeners - Adds event listeners for the internal implementation
       * of this component.
       */

    }, {
      key: 'addEventListeners',
      value: function addEventListeners() {
        var _this = this;

        this.filterLink.addEventListener('click', function () {
          return _this.container.dispatchEvent(new CustomEvent('removed', { detail: { name: _this.name, value: _this.value } }));
        });
      }

      /**
       * The active filter chip
       * @constructor
       * @param {object} container - A reference to the ActiveFilter container's DOM element
      */

    }]);

    function ActiveFilter(container) {
      _classCallCheck(this, ActiveFilter);

      // The constructor should only contain the boiler plate code for finding or creating the reference.
      if (typeof container.dataset.ref === 'undefined') {
        this.ref = Math.random();
        App.ActiveFilter.refs[this.ref] = this;
        container.dataset.ref = this.ref;
        this.init(container);
      } else {
        // If this element has already been instantiated, use the existing reference.
        return App.ActiveFilter.refs[container.dataset.ref];
      }
    }

    /**
     * @function addEventListener - A method to allow clients to add event listeners
     *  to this component. Calls the addEventListener method of this components containing element.
     */


    _createClass(ActiveFilter, [{
      key: 'addEventListener',
      value: function addEventListener() {
        return this.container.addEventListener.apply(this.container, arguments);
      }

      /**
       * @function removeEventListener - A method to allow clients to remove event listeners
       *  from this component. Calls the removeEventListener method of this components containing element.
       */

    }, {
      key: 'removeEventListener',
      value: function removeEventListener() {
        return this.container.removeEventListener.apply(this.container, arguments);
      }
    }]);

    return ActiveFilter;
  }();

  App.ActiveFilter.refs = {};
})();