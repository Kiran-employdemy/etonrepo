/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

(function (App) {
  App.XRef = App.XRef || {};
  App.XRef.currentPage = 0;

  var container = document.querySelector('#cross-reference');
  if (container) {

    var $resultAccordion = $(container);
    var toggleLink = container.querySelector('.cross-reference__accordion-toggle__link');
    var mobileFiltersCount = container.querySelector('.cross-reference__mobile-filters-count');
    var expandText = toggleLink.dataset.activeText;
    var collapseText = toggleLink.dataset.inactiveText;
    var isExpandAll = false;

    App.XRef.sortBy = document.getElementById('default--option').dataset.defaultSortingTitle;
    App.XRef.sortByText = document.getElementById('default--option').dataset.defaultSortingTitleText;
    var eatonText = container.dataset.eatonText;
    var filtersComponent = new App.Filters(document.getElementById('cross-reference__filters'));
    var activeFiltersComponent = new App.ActiveFilters(document.getElementById('cross-reference__active-filters'));

    App.XRef.createResult = function (result, baseSkuPath) {
      var resultElement = document.getElementById('cross-reference-template').cloneNode(true);
      resultElement.classList.remove('hidden');
      resultElement.removeAttribute('id');

      var crossedBrand = result.crossedPartSubBrand && result.crossedPartSubBrand !== 'None' ? result.crossedPartSubBrand : result.crossedPartBrand;
      var brand = result.subBrand && result.subBrand !== 'None' ? result.subBrand : eatonText;

      resultElement.querySelector('.cross-reference__compare--competitor__brand').innerText = crossedBrand;
      resultElement.querySelector('.cross-reference__compare--competitor__number').innerText = result.crossedPartNumber;
      resultElement.querySelector('.cross-reference__type').innerText = result.partType;
      resultElement.querySelector('.cross-reference__compare--eaton__brand').innerText = brand;
      resultElement.querySelector('.cross-reference__compare--eaton__number').innerText = result.partNumber;
      resultElement.querySelector('.cross-reference__compare--eaton__link').href = baseSkuPath + '.' + result.encodedPartNumber + '.html';

      // Accordion data population
      resultElement.querySelector('.cross-reference__card__text__sku--number').innerText = result.partNumber;
      resultElement.querySelector('.cross-reference__card__text__sku--link').href = baseSkuPath + '.' + result.encodedPartNumber + '.html';
      resultElement.querySelector('.cross-reference__card__image__img').src = result.image;
      resultElement.querySelector('.cross-reference__card__text__description').innerText = result.description;

      if (result.status && result.status === 'Discontinued') {
        resultElement.querySelector('.cross-reference__compare--competitor__discontinued').classList.remove('hidden');
      } else {
        resultElement.querySelector('.cross-reference__compare--competitor__discontinued').classList.add('hidden');
      }

      if (result.comments) {
        resultElement.querySelector('.cross-reference__card__text__comment__copy').innerText = result.comments;
        resultElement.querySelector('.cross-reference__card__text__comment').classList.remove('hidden');
      } else {
        resultElement.querySelector('.cross-reference__card__text__comment').classList.add('hidden');
      }

      if (result.upsellSkus && result.upsellSkus.length > 0 || result.replPartNumbers && result.replPartNumbers.length > 0) {
        resultElement.querySelector('.cross-reference__card__text__alternative a').href = baseSkuPath + '.' + result.encodedPartNumber + '.html#upsell-products';
        resultElement.querySelector('.cross-reference__card__text__alternative').classList.remove('hidden');
      } else {
        resultElement.querySelector('.cross-reference__card__text__alternative').classList.add('hidden');
      }

      resultElement.querySelector('.accordion').id = 'accordionEx' + result.resultID;
      resultElement.querySelector('.card-header').id = 'heading' + result.resultID;

      var icon = resultElement.querySelector('.cross-reference__collapse-icon');
      if (!isExpandAll) {
        icon.classList.add('collapsed');
      }
      icon.attributes.getNamedItem('data-parent').nodeValue = '#accordion' + result.resultID;
      icon.attributes.getNamedItem('href').nodeValue = '#collapse' + result.resultID;
      icon.attributes.getNamedItem('aria-controls').nodeValue = '#collapse' + result.resultID;

      var body = resultElement.querySelector('.collapse');
      body.attributes.getNamedItem('aria-labelledby').nodeValue = 'heading' + result.resultID;
      body.attributes.getNamedItem('data-parent').nodeValue = '#accordion' + result.resultID;
      body.id = 'collapse' + result.resultID;
      body.classList.add('card-collapse');
      if (isExpandAll) {
        body.classList.add('in');
      }
      App.XRef.setExpandCollapseText();
      return resultElement;
    };

    App.XRef.updateUrl = function (search, activeFilters, sortBy) {
      var segments = window.location.pathname.split('.');
      var path = segments[0];
      path += '.searchTerm$' + App.global.utils.encodeSelector(search);
      if (activeFilters && activeFilters.length > 0) {
        path += '.facets$' + activeFilters.join('$');
      }
      if (sortBy) {
        path += '.sort$' + sortBy;
      }
      path += '.html' + window.location.search;

      window.history.pushState({}, '', path);
    };

    App.XRef.updateResults = function (page, activeFilters) {
      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref$preventHistory = _ref.preventHistory,
          preventHistory = _ref$preventHistory === undefined ? false : _ref$preventHistory,
          _ref$clearResults = _ref.clearResults,
          clearResults = _ref$clearResults === undefined ? true : _ref$clearResults;

      page = page || 0;
      var sortBy = App.XRef.sortBy || document.getElementById('default--option').dataset.defaultSortingTitle;
      var crossReferenceContainer = document.getElementById('cross-reference');
      var bestResultsList = document.querySelector('.cross-reference__results--best');
      var partialResultsList = document.querySelector('.cross-reference__results--partial');
      var search = document.getElementById('xref-search-box').value.trim();
      var xrefForm = document.getElementById('xref-search-form')[0];

      if (!search && xrefForm) {
        xrefForm.reportValidity();
      } else {
        if (!preventHistory) {
          App.XRef.updateUrl(search, activeFilters, sortBy);
        }

        var params = {
          search: search,
          page: page,
          sortBy: sortBy
        };

        if (activeFilters) {
          params.facets = activeFilters.join(',');
        }

        if (activeFilters && activeFilters.length > 0) {
          mobileFiltersCount.innerText = '(' + activeFilters.length + ')';
        } else {
          mobileFiltersCount.innerText = '';
        }

        fetch(crossReferenceContainer.dataset.servletUrl + '?' + Object.keys(params).map(function (key) {
          return key + '=' + params[key];
        }).join('&')).then(function (response) {
          return response.json();
        }).then(function (json) {
          if (json.error) {
            console.error(json.error);
            return;
          }

          if (clearResults) {
            bestResultsList.innerHTML = '';
            partialResultsList.innerHTML = '';
          }

          if (json.bestMatchResults.length > 0) {
            document.getElementById('best_matchHeader').classList.remove('hidden');
            document.querySelector('.cross-reference__results--best').classList.remove('hidden');
            document.getElementById('best_matchSearch').innerHTML = search;
          } else {
            document.getElementById('best_matchHeader').classList.add('hidden');
            document.querySelector('.cross-reference__results--best').classList.add('hidden');
          }

          if (json.partialMatchResults.length > 0) {
            document.getElementById('partial_matchHeader').classList.remove('hidden');
            document.querySelector('.cross-reference__results--partial').classList.remove('hidden');
            document.getElementById('partial_matchSearch').innerHTML = search;
          } else {
            document.getElementById('partial_matchHeader').classList.add('hidden');
            document.querySelector('.cross-reference__results--partial').classList.add('hidden');
          }
          var baseSkuPath = crossReferenceContainer.dataset.baseSkuPath;
          if (!baseSkuPath) {
            baseSkuPath = json.baseSKUPath;
          }

          json.partialMatchResults.forEach(function (result) {
            return partialResultsList.appendChild(App.XRef.createResult(result, baseSkuPath));
          });
          json.bestMatchResults.forEach(function (result) {
            return bestResultsList.appendChild(App.XRef.createResult(result, baseSkuPath));
          });

          filtersComponent.filterList = json.facets;

          var clearFiltersText = document.querySelector('.xref__clear-all-filters');

          if (filtersComponent.activeFilterList.length > 0) {
            clearFiltersText.style.display = 'block';
          } else {
            clearFiltersText.style.display = 'none';
          }

          activeFiltersComponent.activeFilterCount = filtersComponent.activeFilterList.length;
          activeFiltersComponent.activeFilters = filtersComponent.activeFilterList;

          var resultCountElement = document.querySelector('.faceted-navigation-header__results-count');
          if (Number(json.totalCount) > 0) {
            resultCountElement.innerText = json.totalCount + ' ' + resultCountElement.dataset.resultsText;
            filtersComponent.resultCount = parseInt(json.totalCount);
          } else {
            resultCountElement.innerText = '0 ' + resultCountElement.dataset.resultsText;
            filtersComponent.resultCount = 0;
          }

          document.querySelector('.cross-reference__landing-message').classList.add('hidden');
          if (json.totalCount > 0) {
            container.classList.remove('hidden');
            document.querySelector('.cross-reference__no-results-message').classList.add('hidden');
          } else {
            container.classList.add('hidden');
            document.querySelector('.cross-reference__no-results-message').classList.remove('hidden');
          }

          if (parseInt(json.totalCount) > bestResultsList.childElementCount + partialResultsList.childElementCount) {
            document.querySelector('.cross-reference-load-more').classList.remove('hidden');
          } else {
            document.querySelector('.cross-reference-load-more').classList.add('hidden');
          }

          App.XRef.attachBackToSearchListeners();

          $resultAccordion.find('.card-collapse').on('hidden.bs.collapse', function () {
            return App.XRef.setExpandCollapseText();
          });
          $resultAccordion.find('.card-collapse').on('shown.bs.collapse', function () {
            return App.XRef.setExpandCollapseText();
          });
        });
      }
    };

    App.XRef.clearFilters = function () {
      filtersComponent.clearFilters();
    };

    App.XRef.resetResults = function (filters, preventHistory) {
      isExpandAll = false;
      App.XRef.currentPage = 0;
      App.XRef.updateResults(App.XRef.currentPage, filters, { preventHistory: preventHistory });
    };

    App.XRef.attachBackToSearchListeners = function () {
      [].concat(_toConsumableArray(document.querySelectorAll('.cross-reference__compare--eaton__link')), _toConsumableArray(document.querySelectorAll('.cross-reference__card__text__sku--link')), _toConsumableArray(document.querySelectorAll('.cross-reference__card__text__alternative a'))).forEach(function (resultLink) {
        return resultLink.addEventListener('click', function () {
          sessionStorage.setItem('backToSearch_show', 'true');
          sessionStorage.setItem('backToSearch_url', document.URL);
          sessionStorage.setItem('backToSearched_url', resultLink.href);
        });
      });
    };

    document.addEventListener('DOMContentLoaded', function () {
      var loadMore = document.querySelector('.cross-reference-load-more');
      var clearAllFilters = document.querySelector('.xref__clear-all-filters');
      var openFacets = document.querySelector('.open-facets-cross-reference-mobile');

      $resultAccordion.find('.card-collapse').on('hidden.bs.collapse', function () {
        return App.XRef.setExpandCollapseText();
      });
      $resultAccordion.find('.card-collapse').on('shown.bs.collapse', function () {
        return App.XRef.setExpandCollapseText();
      });

      App.XRef.attachBackToSearchListeners();

      container.querySelector('.cross-reference__accordion-toggle__link').addEventListener('click', function (e) {
        e.stopImmediatePropagation();
        toggleResults();
      });

      function allClosed() {
        return container.querySelectorAll('.card-collapse.in').length === 0;
      }

      App.XRef.setExpandCollapseText = function () {
        toggleLink.innerText = allClosed() ? expandText : collapseText;
        if (allClosed()) {
          isExpandAll = false;
        }
      };

      function toggleResults() {
        toggleLink.classList.toggle('active');
        App.XRef.setExpandCollapseText();

        allClosed() ? openAllResults() : closeAllResults();
      }

      function openAllResults() {
        isExpandAll = true;
        container.querySelectorAll('.cross-reference__collapse-icon').forEach(function (icon) {
          return icon.classList.remove('collapsed');
        });
        $resultAccordion.find('.card-collapse:not(".in")').collapse('show');
      }

      function closeAllResults() {
        isExpandAll = false;
        container.querySelectorAll('.cross-reference__collapse-icon').forEach(function (icon) {
          return icon.classList.add('collapsed');
        });
        $resultAccordion.find('.card-collapse').collapse('hide');
      }

      document.querySelector('.xref-search').addEventListener('click', function (event) {
        App.XRef.clearFilters();
        App.XRef.resetResults();
        event.preventDefault();
      });

      document.querySelector('#xref-search-box').addEventListener('keydown', function (event) {

        if (event.key === 'Enter') {
          App.XRef.clearFilters();
          App.XRef.resetResults();
          event.preventDefault();
        }
      });

      filtersComponent.addEventListener('filterSelected', function (e) {
        isExpandAll = false;
        App.XRef.currentPage = 0;
        App.XRef.updateResults(App.XRef.currentPage, filtersComponent.activeFilterList.map(function (filter) {
          return filter.id;
        }));
        App.XRef.scrollToSearchBoxOffset();
      });

      filtersComponent.addEventListener('filterRemoved', function (e) {
        App.XRef.resetResults(filtersComponent.activeFilterList.map(function (filter) {
          return filter.id;
        }));
        App.XRef.scrollToSearchBoxOffset();
      });

      filtersComponent.addEventListener('clearAllFilters', function () {
        App.XRef.clearFilters();
        App.XRef.resetResults();
      });

      activeFiltersComponent.addEventListener('clearAllFilters', function () {
        App.XRef.clearFilters();
        App.XRef.resetResults();
      });

      filtersComponent.addEventListener('clearSelection', function (e) {
        if (e.detail) {
          isExpandAll = false;
          var filter = e.detail.component;
          var removeFilterIds = filter.activeFilterValues.map(function (filterValue) {
            return filterValue.id;
          });
          var newActiveFilters = filtersComponent.selectedFilters;
          // remove all active filter values from the given filter and updated selectedFilter list
          Object.keys(filtersComponent.selectedFilters).map(function (key) {
            return removeFilterIds.indexOf(newActiveFilters[key].id) > -1 && delete newActiveFilters[key];
          });
          filtersComponent.selectedFilters = newActiveFilters;
          App.XRef.updateResults(App.XRef.currentPage, filtersComponent.activeFilterList.map(function (filter) {
            return filter.id;
          }));
          App.XRef.scrollToSearchBoxOffset();
        }
      });

      activeFiltersComponent.addEventListener('filterRemoved', function (e) {
        if (e.detail) {
          isExpandAll = false;
          App.XRef.currentPage = 0;
          var name = e.detail.name;
          var newActiveFilters = filtersComponent.selectedFilters;
          Object.keys(filtersComponent.selectedFilters).map(function (key) {
            return newActiveFilters[name] && delete newActiveFilters[name];
          });
          App.XRef.updateResults(App.XRef.currentPage, filtersComponent.activeFilterList.map(function (filter) {
            return filter.id;
          }));
        }
      });

      [].concat(_toConsumableArray(document.getElementsByClassName('sortByItems'))).forEach(function (item) {
        item.addEventListener('click', function () {
          App.XRef.currentPage = 0;
          App.XRef.sortBy = item.dataset.sortbyoption;
          App.XRef.sortByText = item.dataset.sortbyoptiontext;
          App.XRef.updateResults(App.XRef.currentPage, filtersComponent.activeFilterList.map(function (filter) {
            return filter.id;
          }));

          [].concat(_toConsumableArray(document.getElementsByClassName('sortByItems'))).forEach(function (deselectItem) {
            return deselectItem.classList.remove('faceted-navigation-header__sort-options--selected');
          });
          item.classList.add('faceted-navigation-header__sort-options--selected');
          document.getElementById('default--option').innerText = App.XRef.sortByText;
        });
      });

      clearAllFilters.addEventListener('click', function (e) {
        e.preventDefault();
        App.XRef.clearFilters();
        App.XRef.resetResults();
      });

      loadMore.addEventListener('click', function () {
        App.XRef.currentPage += 1;
        App.XRef.updateResults(App.XRef.currentPage, filtersComponent.activeFilterList.map(function (filter) {
          return filter.id;
        }), { clearResults: false });
      });

      openFacets.addEventListener('click', function (e) {
        e.preventDefault();
        filtersComponent.open();
      });

      window.addEventListener('popstate', function (event) {
        if (container) {
          var searchSelector = window.location.pathname.split('.').find(function (str) {
            return str.indexOf('searchTerm') === 0;
          });
          var searchTerm = void 0;

          if (searchSelector) {
            searchTerm = App.global.utils.decodeSelector(searchSelector.split('$')[1]);
          }

          var sortBySelector = window.location.pathname.split('.').find(function (str) {
            return str.indexOf('sort') === 0;
          });
          if (sortBySelector) {
            App.XRef.sortBy = sortBySelector.split('$')[1];

            [].concat(_toConsumableArray(document.getElementsByClassName('sortByItems'))).forEach(function (option) {
              option.classList.remove('faceted-navigation-header__sort-options--selected');

              if (option.dataset.sortbyoption === App.XRef.sortBy) {
                option.classList.add('faceted-navigation-header__sort-options--selected');
                App.XRef.sortByText = option.dataset.sortbyoptiontext;
              }
            });
          }

          var facetSelector = window.location.pathname.split('.').find(function (str) {
            return str.indexOf('facets') === 0;
          });
          var facets = [];

          if (facetSelector) {
            facets = facetSelector.split('$');
            facets.shift();
          }

          if (searchTerm) {
            var newActiveFilters = filtersComponent.selectedFilters;
            Object.keys(filtersComponent.selectedFilters).forEach(function (key) {
              return facets.indexOf(key) === -1 && delete newActiveFilters[key];
            });
            filtersComponent.selectedFilters = newActiveFilters;

            App.XRef.resetResults(facets, true);
          }
        }
      });
    });
  }
})(window.App);