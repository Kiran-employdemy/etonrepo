/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  var BODY_ELEMENT = document.getElementsByTagName('body')[0];
  var COMPONENT_CLASS = 'submittal-builder';
  var HIDDEN_CLASS = 'hidden';
  var RESULTS_CLASS = COMPONENT_CLASS + '__results';
  var ADD_ALL_BUTTON_CLASS = RESULTS_CLASS + '__add-all-button';
  var ADD_ALL_BUTTON_SELECTOR = '.' + ADD_ALL_BUTTON_CLASS;
  var REMOVE_ALL_BUTTON_CLASS = RESULTS_CLASS + '__remove-all-button';
  var REMOVE_ALL_BUTTON_SELECTOR = '.' + REMOVE_ALL_BUTTON_CLASS;
  var CELL_HEADING_BUTTON_CLASS = RESULTS_CLASS + '__cellheading__button';
  var CELL_HEADING_BUTTON_SELECTOR = '.' + CELL_HEADING_BUTTON_CLASS;
  var SORTABLE_RESULTS_CLASS = RESULTS_CLASS + '__wrapper';
  var SORTABLE_RESULTS_SELECTOR = '.' + SORTABLE_RESULTS_CLASS;
  var HIDE_SCROLLER_RIGHT_GRADIENT_CLASS = SORTABLE_RESULTS_CLASS + '--no-right-border';
  var MOBILE_SORT_SELECT_CLASS = RESULTS_CLASS + '__native-select';
  var MOBILE_SORT_SELECT_SELECTOR = '.' + MOBILE_SORT_SELECT_CLASS;
  var RESULT_CONTAINER_CLASS = COMPONENT_CLASS + '__result';
  var RESULT_CONTAINER_SELECTOR = '.' + RESULT_CONTAINER_CLASS;
  var PACKAGE_ONLY_DISPLAYED_CLASS = RESULTS_CLASS + '--package-only';
  var PACKAGE_ONLY_EDIT_MODE_CLASS = PACKAGE_ONLY_DISPLAYED_CLASS + '--edit-mode';
  var DEFAULT_ZIP_FILE_SIZE = 100000000;
  var LOAD_MORE_BUTTON_SELECTOR = '#submittalLoadMore';
  var DESKTOP_HEADER_ROW_CLASS = RESULTS_CLASS + '__row--head';
  var DESKTOP_HEADER_ROW_SELECTOR = '.' + DESKTOP_HEADER_ROW_CLASS;
  var MODAL_OPEN_CLASS = COMPONENT_CLASS + '__modal--open';
  var MODAL_CLASS = COMPONENT_CLASS + '__modal';
  var RESULTS_MODAL_CLASS = RESULTS_CLASS + '__modal';
  var RESULTS_MODAL_SELECTOR = '.' + RESULTS_MODAL_CLASS;
  var CLOSE_MODAL_CLASS = MODAL_CLASS + '__close';
  var INNER_CONTENT_MODAL_CLASS = MODAL_CLASS + '__inner-content';
  var CLOSE_MODAL_SELECTOR = '.' + CLOSE_MODAL_CLASS;
  var CONFIRM_REMOVE_ALL_ITEMS_FROM_PACKAGE_BUTTON_CLASS = RESULTS_CLASS + '__confirm-remove-all-items-from-package';
  var CONFIRM_REMOVE_ALL_ITEMS_FROM_PACKAGE_BUTTON_SELECTOR = '.' + CONFIRM_REMOVE_ALL_ITEMS_FROM_PACKAGE_BUTTON_CLASS;
  var DECLINE_REMOVE_ALL_ITEMS_FROM_PACKAGE_BUTTON_CLASS = RESULTS_CLASS + '__decline-remove-all-items-from-package';
  var DECLINE_REMOVE_ALL_ITEMS_FROM_PACKAGE_BUTTON_SELECTOR = '.' + DECLINE_REMOVE_ALL_ITEMS_FROM_PACKAGE_BUTTON_CLASS;
  var STICKY_CLASS = RESULTS_CLASS + '-cellheading--sticky';
  var STICKY_CLASS_SELECTOR = '.' + STICKY_CLASS;
  var UNSTICKY_CLASS = RESULTS_CLASS + '-cellheading--unsticky';
  var SECONDARY_HEADER_CLASS = RESULTS_CLASS + '__secondary-header';
  var SECONDARY_HEADER_SELECTOR = '.' + SECONDARY_HEADER_CLASS;
  var SCROLLING_CONTAINER_CLASS = RESULTS_CLASS + '__scroller';
  var SCROLLING_CONTAINER_SELECTOR = '.' + SCROLLING_CONTAINER_CLASS;
  var PAGINATION_CLASS = RESULTS_CLASS + '__pagination';
  var PAGINATION_CONTAINER_CLASS = PAGINATION_CLASS + '__container';
  var PAGINATION_CONTAINER_SELECTOR = '.' + PAGINATION_CONTAINER_CLASS;
  var PAGINATION_BUTTON_CLASS = PAGINATION_CLASS + '__button';
  var PAGINATION_NEXT_CLASS = PAGINATION_BUTTON_CLASS + '--next';
  var PAGINATION_NEXT_SELECTOR = '.' + PAGINATION_NEXT_CLASS;
  var PAGINATION_PREVIOUS_CLASS = PAGINATION_BUTTON_CLASS + '--previous';
  var PAGINATION_PREVIOUS_SELECTOR = '.' + PAGINATION_PREVIOUS_CLASS;
  var PAGINATION_COLUMNS_TO_SCROLL = 3;
  var escapeAttr = window.App.global.utils.escapeAttr;
  var TYPE = 'Type';
  var MATERIAL = 'Material';
  var SERIES = 'Series';
  var NEMA_LOAD = 'NEMA load';
  var SIDE_RAIL = 'Side-rail height';
  var DESCRIPTION = 'Description';

  var App = window.App || {};
  App.SubmittalResults = function () {
    _createClass(SubmittalResults, null, [{
      key: 'markup',
      value: function markup(_ref) {
        var files = _ref.files,
            showingOnlyPackage = _ref.showingOnlyPackage,
            displayedResults = _ref.displayedResults,
            sortByText = _ref.sortByText,
            addAllText = _ref.addAllText,
            removeAllText = _ref.removeAllText,
            previewText = _ref.previewText,
            fileSizeText = _ref.fileSizeText,
            propertyList = _ref.propertyList,
            isFileSizeLimitReached = _ref.isFileSizeLimitReached,
            estimatedZipSize = _ref.estimatedZipSize,
            zipSizeLimit = _ref.zipSizeLimit,
            closeText = _ref.closeText,
            cannotAddMoreFilesMessage = _ref.cannotAddMoreFilesMessage,
            showingEditPackageMode = _ref.showingEditPackageMode,
            loadMoreLabel = _ref.loadMoreLabel,
            pageSize = _ref.pageSize,
            resultCount = _ref.resultCount,
            showLoadMore = _ref.showLoadMore,
            resultsText = _ref.resultsText,
            documentsTextValue = _ref.documentsTextValue,
            itemHasBeenRemovedText = _ref.itemHasBeenRemovedText,
            allItemsRemovedText = _ref.allItemsRemovedText,
            fileDeletionConfirmationTitleText = _ref.fileDeletionConfirmationTitleText,
            fileDeletionConfirmationText = _ref.fileDeletionConfirmationText,
            yesButtonText = _ref.yesButtonText,
            noButtonText = _ref.noButtonText,
            nextButtonText = _ref.nextButtonText,
            previousButtonText = _ref.previousButtonText,
            hideResultsList = _ref.hideResultsList,
            canScrollBackward = _ref.canScrollBackward,
            canScrollForward = _ref.canScrollForward;

        var resultElements = [];
        var mobileSortElements = [];
        var headerElements = [];

        var fileDeletionModal = '\n        <div class="submittal-builder__modal overlay ' + RESULTS_MODAL_CLASS + ' ' + HIDDEN_CLASS + '">\n          <div class="' + INNER_CONTENT_MODAL_CLASS + '">\n            <h3 class="' + MODAL_CLASS + '__header">' + fileDeletionConfirmationTitleText + '</h3>\n            <button aria-label="' + closeText + '"\n              class="button--reset ' + CLOSE_MODAL_CLASS + '">\n              <span class="sr-only">[close text] ' + fileDeletionConfirmationText + '</span>\n              <i class="icon icon-close" aria-hidden="true"></i>\n            </button>\n            <div>\n              <p class="' + RESULTS_MODAL_CLASS + '__confirmation-text">' + fileDeletionConfirmationText + '</p>\n              <div class="' + RESULTS_MODAL_CLASS + '__button-group" role="group">\n                <button\n                  data-analytics-name="submittal-builder-decline-remove-all-items-from-package"\n                  class="b-button b-button__primary b-button__primary--light ' + DECLINE_REMOVE_ALL_ITEMS_FROM_PACKAGE_BUTTON_CLASS + '">\n                    ' + noButtonText + '\n                </button>\n                <button\n                  data-analytics-name="submittal-builder-confirm-remove-all-items-from-package"\n                  class="b-button b-button__primary b-button__primary--light ' + CONFIRM_REMOVE_ALL_ITEMS_FROM_PACKAGE_BUTTON_CLASS + '">\n                    ' + yesButtonText + '\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      ';

        function getFlagforFieldes(responseObject, valueKey) {
          var flag = true;
          for (var index = 0; index < responseObject.length; index++) {
            if (responseObject[index][valueKey]) {
              flag = false;
              break;
            }
          }
          return flag;
        }

        App.SubmittalResultsFlag = {};
        App.SubmittalResultsFlag.type = getFlagforFieldes(displayedResults, 'b-line-submittal-builder_type');
        App.SubmittalResultsFlag.material = getFlagforFieldes(displayedResults, 'b-line-submittal-builder_material');
        App.SubmittalResultsFlag.series = getFlagforFieldes(displayedResults, 'b-line-submittal-builder_series');
        App.SubmittalResultsFlag.nemaLoad = getFlagforFieldes(displayedResults, 'b-line-submittal-builder_nema-load');
        App.SubmittalResultsFlag.sideRail = getFlagforFieldes(displayedResults, 'b-line-submittal-builder_side-rail-height');
        App.SubmittalResultsFlag.description = getFlagforFieldes(displayedResults, 'b-line-submittal-builder_description');

        if (typeof displayedResults !== 'undefined') {
          resultElements = displayedResults.map(function (result) {
            return '\n            <div class="' + RESULT_CONTAINER_CLASS + '"\n                 data-result="' + escapeAttr(result) + '"\n                 data-property-list="' + escapeAttr(propertyList) + '"\n                 data-preview-text="' + previewText + '"\n                 data-close-text="' + closeText + '"\n                 data-package-size="' + estimatedZipSize + '"\n                 data-size-limit="' + zipSizeLimit + '"\n                 data-cannot-add-more-files-message="' + cannotAddMoreFilesMessage + '"\n                 data-selected="' + (files.map(function (file) {
              return file.url;
            }).indexOf(result.url) >= 0) + '"\n                 data-showing-edit-package-mode="' + showingEditPackageMode + '"\n                 data-item-has-been-removed-text="' + itemHasBeenRemovedText + '">\n            </div>\n          ';
          });
        }

        if (propertyList.length > 0) {
          if (showingOnlyPackage) {
            headerElements.push('<div class="' + RESULTS_CLASS + '-cellheading ' + RESULTS_CLASS + '-cellheading--narrow ' + CELL_HEADING_BUTTON_CLASS + '"></div>');
          }

          propertyList.forEach(function (prop, index) {
            headerElements.push('\n            <button\n              data-analytics-event="submittal-builder-column-sort"\n              data-analytics-name="submittal-builder-column-header : ' + prop.name + '"\n              data-analytics-state=' + (prop.order === 'ASC' ? 'ASC' : 'DESC') + '\n              class="button--reset ' + RESULTS_CLASS + '-cellheading ' + CELL_HEADING_BUTTON_CLASS + ' ' + (index === 0 ? STICKY_CLASS : '') + ' ' + (index === 1 ? UNSTICKY_CLASS : '') + ' ' + (prop.title === NEMA_LOAD && App.SubmittalResultsFlag.nemaLoad ? HIDDEN_CLASS : '') + ' ' + (prop.title === SIDE_RAIL && App.SubmittalResultsFlag.sideRail ? HIDDEN_CLASS : '') + ' ' + (prop.title === TYPE && App.SubmittalResultsFlag.type ? HIDDEN_CLASS : '') + ' ' + (prop.title === MATERIAL && App.SubmittalResultsFlag.material ? HIDDEN_CLASS : '') + ' ' + (prop.title === SERIES && App.SubmittalResultsFlag.series ? HIDDEN_CLASS : '') + ' ' + (prop.title === DESCRIPTION && App.SubmittalResultsFlag.description ? HIDDEN_CLASS : '') + '"\n              data-name="' + prop.name + '"\n              ' + (index !== 0 ? 'data-waypoint="' + index + '"' : '') + '>\n              <span class="submittal-builder-column-header__text">' + prop.title + '</span>\n              <i class="icon ' + (prop.order === 'ASC' ? 'icon-chevron-up' : 'icon-chevron-down') + '" aria-hidden="true"></i>\n            </button>\n          ');

            mobileSortElements.push('\n            <option value="' + prop.name + '">' + prop.title + '</option>\n          ');
          });

          headerElements.push('\n          <div class="' + RESULTS_CLASS + '-cellheading" data-waypoint>\n            ' + previewText + ' (' + fileSizeText + ')\n          </div>\n        ');
        }

        return '\n      ' + fileDeletionModal + '\n      <div class="' + (hideResultsList ? HIDDEN_CLASS : '') + '">\n        <div class="submittal-builder__results-count__container--mobile">\n          <h3 class="faceted-navigation-header__results-count submittal-builder__results-count">\n            ' + (showingOnlyPackage || showingEditPackageMode ? files.length + ' ' + documentsTextValue + ' ' : '') + '\n\n            ' + (resultCount > 0 && !showingOnlyPackage ? resultCount + ' ' + resultsText : '') + '\n          </h3>\n\n          <hr class="' + COMPONENT_CLASS + '__hr">\n        </div>\n\n        <div class="' + RESULTS_CLASS + '__all-items-removed ' + (resultElements.length === 0 && showingEditPackageMode === true ? '' : 'hidden') + '">' + allItemsRemovedText + '</div>\n\n        <div class="' + RESULTS_CLASS + '__wrapper--outer" ' + (resultElements.length === 0 && showingEditPackageMode === true ? 'hidden' : '') + '>\n          <div class="' + RESULTS_CLASS + '__scroller">\n            <div class="' + RESULTS_CLASS + '__container">\n              <div class="' + RESULTS_CLASS + '__desktop-filter">\n                <div class="' + RESULTS_CLASS + '__row ' + RESULTS_CLASS + '__row--head">\n                  ' + headerElements.join('') + '\n                </div>\n              </div>\n\n              <div class="' + SECONDARY_HEADER_CLASS + '">\n                <button\n                  data-analytics-name="submittal-builder-add-all-results"\n                  class="btn button--reset ' + ADD_ALL_BUTTON_CLASS + ' ' + ADD_ALL_BUTTON_CLASS + '--desktop ' + (isFileSizeLimitReached ? 'disabled-btn' : '') + '  ">\n                    ' + addAllText + '\n                </button>\n                <button\n                  data-analytics-name="submittal-builder-remove-all-results"\n                  class="button--reset ' + REMOVE_ALL_BUTTON_CLASS + ' ' + REMOVE_ALL_BUTTON_CLASS + '--desktop ' + (files < 1 ? 'hidden' : '') + '">\n                    ' + removeAllText + '\n                </button>\n                <div class="' + PAGINATION_CONTAINER_CLASS + ' ' + (canScrollForward || canScrollBackward ? '' : HIDDEN_CLASS) + '">\n                  <button class="button--reset ' + PAGINATION_BUTTON_CLASS + ' ' + PAGINATION_PREVIOUS_CLASS + '"\n                    aria-label="' + previousButtonText + '"\n                    data-analytics-name="submittal-builder-pagination-previous-column"\n                    ' + (!canScrollBackward ? 'disabled' : '') + '>\n                    <span class="icon icon-chevron-left" aria-hidden="true"></span>\n                  </button>\n                  <button class="button--reset ' + PAGINATION_BUTTON_CLASS + ' ' + PAGINATION_NEXT_CLASS + '"\n                    aria-label="' + nextButtonText + '"\n                    data-analytics-name="submittal-builder-pagination-next-column"\n                    ' + (!canScrollForward ? 'disabled' : '') + '>\n                    <span class="icon icon-chevron-right" aria-hidden="true"></span>\n                  </button>\n                </div>\n              </div>\n\n            <div class="' + RESULTS_CLASS + '__mobile_filter">\n              <button class="button--reset ' + ADD_ALL_BUTTON_CLASS + ' ' + (isFileSizeLimitReached ? 'disabled-btn' : '') + ' ">' + addAllText + '</button>\n              <button class="button--reset ' + REMOVE_ALL_BUTTON_CLASS + ' ' + (files < 1 ? 'hidden' : '') + '">' + removeAllText + '</button>\n              <div class="faceted-navigation-header__sort-options ' + RESULTS_CLASS + '__sort-options">\n                <div class="dropdown">\n                  <button id="dSortFacets" class="" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                    ' + sortByText + '\n                    <i class="icon icon-chevron-down" aria-hidden="true"></i>\n                  </button>\n                  </div>\n                  <select class="native-select ' + MOBILE_SORT_SELECT_CLASS + '">\n                    ' + mobileSortElements.join('') + '\n                  </select>\n                </div>\n              </div>\n\n              <div class="' + SORTABLE_RESULTS_CLASS + '" id="accordion_div">\n                ' + resultElements.join('') + '\n              </div>\n            </div>\n          </div>\n        </div>\n        <div id="submittalLoadMore" class="text-center ' + (showLoadMore ? '' : 'hidden') + '">\n          <button  class="b-button b-button__primary b-button__primary--light" role="button" data-load-more>' + loadMoreLabel + '</button>\n        </div>\n      </div>\n      ';
      }
    }]);

    function SubmittalResults(container) {
      _classCallCheck(this, SubmittalResults);

      // The constructor should only contain the boiler plate code for finding or creating the reference.
      if (typeof container.dataset.ref === 'undefined') {
        this.ref = Math.random();
        App.SubmittalResults.refs[this.ref] = this;
        container.dataset.ref = this.ref;
        this.init(container);
      } else {
        // If this element has already been instantiated, use the existing reference.
        return App.SubmittalResults.refs[container.dataset.ref];
      }
    }

    _createClass(SubmittalResults, [{
      key: 'init',
      value: function init(container) {
        this.container = container;
        this.hideResultsList = false;
        this.pageSize = parseInt(this.container.dataset.pageSize);
        this.cannotAddMoreFilesMessage = this.container.dataset.cannotAddMoreFilesMessage;
        this.description = this.container.dataset.description;
        this.loadMoreLabel = this.container.dataset.loadMoreLabel;
        this.resultListValues = this.container.dataset.resultList;
        this.addAllText = this.container.dataset.addAllText;
        this.removeAllText = this.container.dataset.removeAllText;
        this.previewText = this.container.dataset.previewText;
        this.fileSizeText = this.container.dataset.fileSizeText;
        this.sortByText = this.container.dataset.sortByText;
        this.closeText = this.container.dataset.closeText;
        this.showingEditPackageMode = false;
        this.resultComponents = [];
        this.files = [];
        this.zipSizeLimit = this.container.dataset.zipSizeLimit;
        this.showingOnlyPackage = false;
        this.resultsText = this.container.dataset.resultsText;
        this.documentsTextValue = 0;
        this.itemHasBeenRemovedText = this.container.dataset.itemHasBeenRemovedText;
        this.allItemsRemovedText = this.container.dataset.allItemsRemovedText;
        this.fileDeletionConfirmationText = this.container.dataset.fileDeletionConfirmationText;
        this.fileDeletionConfirmationTitleText = this.container.dataset.fileDeletionConfirmationTitleText;
        this.yesButtonText = this.container.dataset.yesButtonText;
        this.noButtonText = this.container.dataset.noButtonText;
        this.nextButtonText = this.container.dataset.nextButtonText;
        this.previousButtonText = this.container.dataset.previousButtonText;
        this.activeFilterValues = [];
        this.columns = [];

        this.itemsInPackage = this.container.dataset.itemsInPackage;

        this.render();
      }
    }, {
      key: 'sort',
      value: function sort(name) {
        // Determine the order for this column based on its current order, defaulting to ascending.
        var orderIsAscending = false;
        this.sortOrder.forEach(function (property) {
          if (property.name === name) {
            orderIsAscending = property.order === 'ASC';
          }
        });
        var order = orderIsAscending ? 'DESC' : 'ASC';

        // Remove the property with the given name from the list.
        this.sortOrder = this.sortOrder.filter(function (property) {
          return property.name !== name;
        });

        this.sortOrder.unshift({ name: name, order: order });

        // trigger a sort on this.files too so it is in sync across tabs
        this.reorderFilesInPackage();

        this.container.dispatchEvent(new CustomEvent('orderChanged'));
      }
    }, {
      key: 'reorderFiles',
      value: function reorderFiles() {
        var fileOrder = [].concat(_toConsumableArray(this.container.querySelectorAll(SORTABLE_RESULTS_SELECTOR + ' .submittal-builder__results__panel'))).map(function (element) {
          return element.dataset.url;
        });

        this.files.sort(function (file1, file2) {
          return fileOrder.indexOf(file1.url) > fileOrder.indexOf(file2.url) === true ? 1 : -1;
        });
      }

      /**
      * @function reorderFilesInPackage - reorders the the list of files in the package based on the sortOrder property
      */

    }, {
      key: 'reorderFilesInPackage',
      value: function reorderFilesInPackage() {
        /** create a reference to the sortOrder */
        var sortOrder = this.sortOrder[0];

        /** sort this.files in ascending order */
        this.files.sort(function (file1, file2) {
          /** check if each parameter is defined
           * if true, convert to uppercase for a case insensitive comparison
           * if false, set to 'ZZZZZ' to ensure it is at the end of the package
           */
          var file1Value = typeof file1[sortOrder.name] !== 'undefined' ? file1[sortOrder.name].toUpperCase() : 'ZZZZZZ';
          var file2Value = typeof file2[sortOrder.name] !== 'undefined' ? file2[sortOrder.name].toUpperCase() : 'ZZZZZZ';

          return file1Value < file2Value ? -1 : file1Value > file2Value ? 1 : 0;
        });

        /** reverse the file list if sortOrder.order is descending */
        if (sortOrder.order === 'DESC') {
          this.files.reverse();
        }

        this.render();
      }
    }, {
      key: 'removeFile',
      value: function removeFile(resultComponent) {
        var _this = this;

        this.files = this.files.filter(function (file) {
          return file.url !== resultComponent.propertyValues.url;
        });

        resultComponent.deselect().then(function () {
          _this.container.dispatchEvent(new CustomEvent('resultDeselected', { detail: { resultComponent: resultComponent } }));
          _this.render();
        });
      }
    }, {
      key: 'addFile',
      value: function addFile(resultComponent) {
        var _this2 = this;

        this.files.push(resultComponent.propertyValues);

        resultComponent.select().then(function () {
          return _this2.container.dispatchEvent(new CustomEvent('resultSelected', { detail: { resultComponent: resultComponent } }));
        });
      }

      /**
       * Add all files in the resultList to package
       * @function addAllFiles
      */

    }, {
      key: 'addAllFiles',
      value: function addAllFiles() {
        var _this3 = this;

        this.resultList.slice(0, this.resultComponents.length).forEach(function (file) {
          if (_this3.fileIsEligible(file)) {
            _this3.files.push(file);
          }
        });

        this.container.dispatchEvent(new CustomEvent('allResultsSelected'));
        this.render();
      }

      /**
       * @function openRemoveAllFilesConfirmationModal - shows removeAllFilesConfirmationModal
      */

    }, {
      key: 'openFileDeletionConfirmationModal',
      value: function openFileDeletionConfirmationModal() {
        this.fileDeletionConfirmationModal.classList.remove(HIDDEN_CLASS);
        BODY_ELEMENT.classList.add(MODAL_OPEN_CLASS);
      }

      /**
       * @function closeRemoveAllFilesConfirmationModal - hides removeAllFilesConfirmationModal
      */

    }, {
      key: 'closeFileDeletionConfirmationModal',
      value: function closeFileDeletionConfirmationModal() {
        this.fileDeletionConfirmationModal.classList.add(HIDDEN_CLASS);
        BODY_ELEMENT.classList.remove(MODAL_OPEN_CLASS);
      }

      /**
       * Show a modal to confirm that all files should be removed from the package
       * @function showRemoveAllFilesConfirmationModal
      */

    }, {
      key: 'showFileDeletionConfirmationModal',
      value: function showFileDeletionConfirmationModal() {
        this.openFileDeletionConfirmationModal();
      }

      /**
       * Remove all files from the package
       * @function removeAllFiles
      */

    }, {
      key: 'removeAllFiles',
      value: function removeAllFiles() {
        this.files = [];
        this.container.dispatchEvent(new CustomEvent('allResultsDeselected'));
        this.closeFileDeletionConfirmationModal();

        this.render();
      }

      /**
       * Determines if the file is eligible by checking if it has already been added
       * and if it is small enough to be added without making the package too large.
       * @function fileIsEligible
       * @param {array} file - A file to be added.
       * @returns {array} whether the file is eligible to be added.
      */

    }, {
      key: 'fileIsEligible',
      value: function fileIsEligible(file) {
        return this.files.map(function (file) {
          return file.url;
        }).indexOf(file.url) === -1 && this.estimatedZipSize + parseInt(file.size) < parseInt(this.zipSizeLimit);
      }

      /**
       * Only display the files that have been added to the package
       * @function showOnlyPackage
      */

    }, {
      key: 'showOnlyPackage',
      value: function showOnlyPackage() {
        this.showingOnlyPackage = true;
        this.container.classList.add(PACKAGE_ONLY_DISPLAYED_CLASS);
        // The current requirements is that any time the package view is used the
        // edit mode is also turned on. However this component is flexible enough
        // to show the package with edit mode left off or show the package with edit
        // mode turned on.
        this.showEditPackageMode();

        this.render();
      }

      /**
       * Make the package contents editable
       * @function showEditPackageMode
      */

    }, {
      key: 'showEditPackageMode',
      value: function showEditPackageMode() {
        this.showingEditPackageMode = true;
        this.render();
        this.container.classList.add(PACKAGE_ONLY_EDIT_MODE_CLASS);
      }

      /**
       * Make the package contents read only
       * @function hideEditPackageMode
      */

    }, {
      key: 'hideEditPackageMode',
      value: function hideEditPackageMode() {
        this.showingEditPackageMode = false;
        this.container.classList.remove(PACKAGE_ONLY_EDIT_MODE_CLASS);

        this.render();
      }

      /**
       * Show all results
       * @function showAllResults
      */

    }, {
      key: 'showAllResults',
      value: function showAllResults() {
        this.showingOnlyPackage = false;
        this.container.classList.remove(PACKAGE_ONLY_DISPLAYED_CLASS);
        this.hideEditPackageMode();

        this.render();
      }

      /**
       * @function properties - Sets an array of property names that should be displayed in the table.
       */

    }, {
      key: 'updateFixedColumnHeaderHeight',


      /**
       * Set the height of the sticky column contents to match its siblings in the row if fixedColumnHeader exists in the DOM
       * Heights must be manually set on absolutely positioned items in order for the background color heights to match up
       * @function updateFixedColumnHeaderHeight
      */
      value: function updateFixedColumnHeaderHeight() {
        if (this.fixedColumnHeader !== null) {
          this.fixedColumnHeader.style.height = this.headerHeight;
        }
      }

      /**
       * Set the height of the secondary header to prevent its child elements from vertically overflowing
       * @function updateSecondaryHeaderHeight
      */

    }, {
      key: 'updateSecondaryHeaderHeight',
      value: function updateSecondaryHeaderHeight() {
        this.secondaryHeader.style.height = this.secondaryHeaderHeight;
      }
    }, {
      key: 'paginationNext',
      value: function paginationNext() {
        var scrolled = false;

        for (var i = 0; i < PAGINATION_COLUMNS_TO_SCROLL; i++) {
          if (this.canScrollForward) {
            scrolled = true;
            this.columns.push(this.unstickyColumnWidth);
          }
        }

        if (scrolled) {
          this.updatePagination();
        }
      }
    }, {
      key: 'paginationPrevious',
      value: function paginationPrevious() {
        var scrolled = false;

        for (var i = 0; i < PAGINATION_COLUMNS_TO_SCROLL; i++) {
          if (this.canScrollBackward) {
            scrolled = true;
            this.columns.pop();
          }
        }

        if (scrolled) {
          this.updatePagination();
        }
      }
    }, {
      key: 'updatePagination',
      value: function updatePagination() {
        var translation = 'translate(-' + this.totalTranslation + 'px)';
        this.unstickyCellHeadings.forEach(function (moveHeader) {
          return moveHeader.style.transform = translation;
        });
        this.cellsToMove.forEach(function (moveCell) {
          return moveCell.style.transform = translation;
        });

        if (!this.canScrollForward && !this.canScrollBackward) {
          this.paginationContainer.classList.add(HIDDEN_CLASS);
        } else {
          this.paginationContainer.classList.remove(HIDDEN_CLASS);
        }

        if (!this.canScrollForward) {
          this.container.querySelector(SORTABLE_RESULTS_SELECTOR).classList.add(HIDE_SCROLLER_RIGHT_GRADIENT_CLASS);
        } else {
          this.container.querySelector(SORTABLE_RESULTS_SELECTOR).classList.remove(HIDE_SCROLLER_RIGHT_GRADIENT_CLASS);
        }

        this.paginationNextButton.disabled = !this.canScrollForward;
        this.paginationPreviousButton.disabled = !this.canScrollBackward;
      }
    }, {
      key: 'open',
      value: function open() {
        this.container.classList.remove(HIDDEN_CLASS);
      }
    }, {
      key: 'close',
      value: function close() {
        this.container.classList.add(HIDDEN_CLASS);
      }
    }, {
      key: 'render',
      value: function render() {
        var _this4 = this;

        this.container.innerHTML = App.SubmittalResults.markup(this);
        this.fileDeletionConfirmationModal = this.container.querySelector(RESULTS_MODAL_SELECTOR);
        this.confirmRemoveAllItemsFromPackageButton = this.container.querySelector(CONFIRM_REMOVE_ALL_ITEMS_FROM_PACKAGE_BUTTON_SELECTOR);
        this.declineRemoveAllItemsFromPackageButton = this.container.querySelector(DECLINE_REMOVE_ALL_ITEMS_FROM_PACKAGE_BUTTON_SELECTOR);
        this.addAllButtonDesktop = this.container.querySelector(ADD_ALL_BUTTON_SELECTOR + '--desktop');
        this.addAllButtons = this.container.querySelectorAll(ADD_ALL_BUTTON_SELECTOR);
        this.removeAllButtons = this.container.querySelectorAll(REMOVE_ALL_BUTTON_SELECTOR);
        this.removeAllButtonDesktop = this.container.querySelector(REMOVE_ALL_BUTTON_SELECTOR + '--desktop');
        this.closeModalButton = this.container.querySelector(CLOSE_MODAL_SELECTOR);
        this.mobileSortSelector = this.container.querySelector(MOBILE_SORT_SELECT_SELECTOR);
        this.loadMoreButton = this.container.querySelector(LOAD_MORE_BUTTON_SELECTOR);
        this.headerRow = this.container.querySelector(DESKTOP_HEADER_ROW_SELECTOR);
        this.fixedColumnHeader = this.container.querySelector(STICKY_CLASS_SELECTOR);
        this.secondaryHeader = this.container.querySelector(SECONDARY_HEADER_SELECTOR);
        this.paginationContainer = this.container.querySelector(PAGINATION_CONTAINER_SELECTOR);
        this.paginationNextButton = this.container.querySelector(PAGINATION_NEXT_SELECTOR);
        this.paginationPreviousButton = this.container.querySelector(PAGINATION_PREVIOUS_SELECTOR);
        this.scrollingContainer = this.container.querySelector(SCROLLING_CONTAINER_SELECTOR);
        this.paginationWaypoints = this.container.querySelectorAll('[data-waypoint]');
        this.paginationNextWaypoint = null;
        this.paginationPreviousWaypoint = null;
        this.resultComponents = [];

        this.updateFixedColumnHeaderHeight();
        this.updateSecondaryHeaderHeight();

        if (this.container.querySelectorAll(RESULT_CONTAINER_SELECTOR).length > 0) {
          [].concat(_toConsumableArray(this.container.querySelectorAll(RESULT_CONTAINER_SELECTOR))).forEach(function (resultContainer) {
            _this4.resultComponents.push(new App.SubmittalResult(resultContainer));
          });

          this.updatePagination();
        }

        this.addEventListeners();
      }

      /**
       * @function addEventListener - A method to allow clients to add event listeners
       *  to this component. Calls the addEventListener method of this components containing element.
       */

    }, {
      key: 'addEventListener',
      value: function addEventListener() {
        return this.container.addEventListener.apply(this.container, arguments);
      }

      /**
       * @function removeEventListener - A method to allow clients to remove event listeners
       *  from this component. Calls the removeEventListener method of this components containing element.
       */

    }, {
      key: 'removeEventListener',
      value: function removeEventListener() {
        return this.container.removeEventListener.apply(this.container, arguments);
      }

      /**
       * @function addEventListeners - Adds event listeners for the internal implementation
       * of this component.
       */

    }, {
      key: 'addEventListeners',
      value: function addEventListeners() {
        var _this5 = this;

        this.resultComponents.forEach(function (resultComponent) {
          return resultComponent.addEventListener('added', function () {
            if (!_this5.isFileSizeLimitReached) {
              _this5.addFile(resultComponent);
            }
          });
        });

        this.resultComponents.forEach(function (resultComponent) {
          return resultComponent.addEventListener('removed', function () {
            _this5.removeFile(resultComponent);
          });
        });

        if (this.showingEditPackageMode) {
          this.sortableResults = window.Sortable.create(this.container.querySelector(SORTABLE_RESULTS_SELECTOR), {
            animation: 100,
            dragClass: '.submittal-builder__results__row',
            handle: '.sortable-handle',
            onEnd: function onEnd() {
              return _this5.reorderFiles();
            }
          });
        }

        this.container.querySelectorAll(CELL_HEADING_BUTTON_SELECTOR).forEach(function (cellHeading) {
          return cellHeading.addEventListener('click', function () {
            _this5.sort(cellHeading.dataset.name);
          });
        });

        this.addAllButtons.forEach(function (button) {
          return button.addEventListener('click', function () {
            return _this5.addAllFiles();
          });
        });
        this.removeAllButtons.forEach(function (button) {
          return button.addEventListener('click', function () {
            return _this5.showFileDeletionConfirmationModal();
          });
        });

        this.mobileSortSelector.addEventListener('change', function (e) {
          _this5.sort(e.target.value);
        });

        this.loadMoreButton.addEventListener('click', function () {
          _this5.container.dispatchEvent(new CustomEvent('loadMore', { detail: { startingRecord: _this5.resultList.length } }));
        });

        this.closeModalButton.addEventListener('click', function () {
          return _this5.closeFileDeletionConfirmationModal();
        });

        this.confirmRemoveAllItemsFromPackageButton.addEventListener('click', function () {
          return _this5.removeAllFiles();
        });
        this.declineRemoveAllItemsFromPackageButton.addEventListener('click', function () {
          return _this5.closeFileDeletionConfirmationModal();
        });

        this.paginationNextButton.addEventListener('click', function () {
          return _this5.paginationNext();
        });
        this.paginationPreviousButton.addEventListener('click', function () {
          return _this5.paginationPrevious();
        });
      }
    }, {
      key: 'showLoadMore',
      get: function get() {
        return !this.showingOnlyPackage && this.resultList.length < this.resultCount;
      }
    }, {
      key: 'sortOrder',
      get: function get() {
        return this.sortOrderValue ? this.sortOrderValue : [{ name: '', order: 'ASC' }];
      },
      set: function set(order) {
        this.sortOrderValue = order;
      }
    }, {
      key: 'resultCount',
      set: function set(count) {
        this.resultCountValue = count;
      },
      get: function get() {
        return this.resultCountValue;
      }
    }, {
      key: 'documentsText',
      set: function set(documentsTextValue) {
        this.documentsTextValue = documentsTextValue;

        this.render();
      }
    }, {
      key: 'resultList',
      get: function get() {
        return this.resultListValues ? this.resultListValues : [];
      },
      set: function set(resultListValues) {
        this.resultListValues = resultListValues;

        this.render();
      }
    }, {
      key: 'files',
      get: function get() {
        return this.filesValue ? this.filesValue : [];
      },
      set: function set(files) {
        var _this6 = this;

        this.filesValue = files;
        this.resultComponents.forEach(function (resultComponent) {
          return resultComponent.packageSize = _this6.estimatedZipSize;
        });
        this.reorderFiles();
      }
    }, {
      key: 'packageList',
      get: function get() {
        return this.files.map(function (file) {
          return file.url;
        });
      }
    }, {
      key: 'displayedResults',
      get: function get() {
        return this.showingOnlyPackage ? this.files : this.resultList;
      }
    }, {
      key: 'size',
      get: function get() {
        return this.files.length;
      }
    }, {
      key: 'isFileSizeLimitReached',
      get: function get() {
        return this.estimatedZipSize >= parseInt(this.zipSizeLimit !== '0' ? this.zipSizeLimit : DEFAULT_ZIP_FILE_SIZE);
      }
    }, {
      key: 'estimatedZipSize',
      get: function get() {
        return this.files.reduce(function (totalSize, file) {
          return Number(totalSize) + Number(file.size);
        }, 0);
      }
    }, {
      key: 'propertyList',
      set: function set(properties) {
        this.properties = properties;
      },
      get: function get() {
        var propMap = {};
        if (this.properties) {
          propMap = this.properties.reduce(function (map, prop) {
            map[prop.name] = prop;
            return map;
          }, {});

          this.sortOrder.forEach(function (orderProp) {
            if (propMap[orderProp.name]) {
              propMap[orderProp.name].order = orderProp.order;
            }
          });
        }

        return Object.keys(propMap).map(function (propName) {
          return propMap[propName];
        });
      }

      /**
       * Get the height of the header
       * @function headerHeight
       * @returns {string} header's scrollHeight in pixels
      */

    }, {
      key: 'headerHeight',
      get: function get() {
        return this.headerRow.scrollHeight + 'px';
      }

      /**
       * Get the greater height of the secondary header's child elements (add/remove all link and pagination arrows) if paginationContainer exists in the DOM
       * @function secondaryHeaderHeight
       * @returns {string} secondary header's tallest child element's scrollHeight in pixels
      */

    }, {
      key: 'secondaryHeaderHeight',
      get: function get() {
        if (this.showingOnlyPackage && this.paginationContainer !== null) {
          return this.removeAllButtonDesktop.scrollHeight > this.paginationContainer.scrollHeight ? this.removeAllButtonDesktop.scrollHeight + 'px' : this.paginationContainer.scrollHeight + 'px';
        } else if (this.paginationContainer !== null) {
          return this.addAllButtonDesktop.scrollHeight > this.paginationContainer.scrollHeight ? this.addAllButtonDesktop.scrollHeight + 'px' : this.paginationContainer.scrollHeight + 'px';
        }
      }
    }, {
      key: 'numberOfColumnsInView',
      get: function get() {
        return this.unstickyViewportWidth / this.unstickyColumnWidth;
      }
    }, {
      key: 'unstickyViewportWidth',
      get: function get() {
        // This assumes a constant width of the unsticky columns
        return this.container.querySelector('.submittal-builder__results__container') !== null ? this.container.querySelector('.submittal-builder__results__container').offsetWidth : 0;
      }
    }, {
      key: 'unstickyColumnWidth',
      get: function get() {
        return this.container.querySelector('.submittal-builder__results-cellheading--unsticky') !== null ? this.container.querySelector('.submittal-builder__results-cellheading--unsticky').offsetWidth : 0;
      }
    }, {
      key: 'unstickyCellHeadings',
      get: function get() {
        // This assumes that the only columns that are being paginated are the ones with headers that don't have the sticky or narrow classes.
        return this.container.querySelectorAll('.submittal-builder__results-cellheading:not(.submittal-builder__results-cellheading--sticky):not(.submittal-builder__results-cellheading--narrow)');
      }
    }, {
      key: 'cellsToMove',
      get: function get() {
        return this.resultComponents.map(function (resultComponent) {
          return resultComponent.unstickyCells();
        }).reduce(function (allCells, resultCells) {
          return allCells.concat(resultCells);
        }, []);
      }
    }, {
      key: 'canScrollForward',
      get: function get() {
        var maxColumns = this.unstickyCellHeadings.length;
        var currentColumns = this.columns.length + this.numberOfColumnsInView;
        return currentColumns < maxColumns;
      }
    }, {
      key: 'canScrollBackward',
      get: function get() {
        return this.columns.length > 0;
      }
    }, {
      key: 'maxTranslation',
      get: function get() {
        return this.unstickyCellHeadings.length * this.unstickyColumnWidth - this.unstickyViewportWidth;
      }
    }, {
      key: 'totalTranslation',
      get: function get() {
        var totalTranslation = this.columns.reduce(function (columnOne, columnTwo) {
          return columnOne + columnTwo;
        }, 0);

        // Make the last columns stick to the end of the horizontal space.
        totalTranslation = totalTranslation > this.maxTranslation ? this.maxTranslation : totalTranslation;

        // Accounts for the padding between the blue bar and the first column.
        totalTranslation = totalTranslation - window.getComputedStyle(this.unstickyCellHeadings[0]).paddingLeft.replace('px', '');

        // Make sure the translation never goes below 0.
        totalTranslation = totalTranslation < 0 ? 0 : totalTranslation;

        return totalTranslation;
      }
    }], [{
      key: 'renderKeywords',
      value: function renderKeywords(resultL) {
        return '' + resultL.attributes.map(function (resultDetail) {
          return '<li>' + resultDetail.name + '</li>';
        });
      }
    }]);

    return SubmittalResults;
  }();

  App.SubmittalResults.refs = {};
})();