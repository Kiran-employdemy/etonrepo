/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function () {
  $('.map-primary__download').hide();
  $('.loader--inline').hide();
  var App = window.App || {};
  App.Bullseye = App.Bullseye || {};
  var resourcePath = $('.mapContainer').attr('data-resource-path');
  var activeFilters = [];
  var totalResults = 0;
  var resultsLoaded = 0;
  var map = void 0;
  /* eslint-disable no-unused-vars, no-undef*/
  var marker = void 0;
  /* eslint-disable no-unused-vars, no-undef*/
  var infoWindow = void 0;
  var pageSize = $('.mapContainer').data('page-size');
  var labelCategory = $('.mapContainer').data('label-category');
  if (labelCategory) {
    labelCategory = labelCategory.toString();
  }

  var filterList = $('#bullseye-map__filters').attr('data-filter-list');
  var defaultRadius = $('#bullseye-map__filters').attr('data-default-radius');
  var defaultRadiusUnit = $('#bullseye-map__filters').attr('data-default-radius-unit');
  var filterListJSON = void 0;
  var intialLayout = $('.initial-layout');
  var primaryLayout = $('.primary-layout');
  var websiteText = $('.mapContainer').data('website-text');
  var emailText = $('.mapContainer').data('email-text');
  var directionText = $('.mapContainer').data('direction-text');
  var enableExpander = $('.mapContainer').data('enable-expander');
  var enableLocationType = $('.mapContainer').data('enable-locationtype');
  var hideWebsite = $('.mapContainer').data('hide-website');
  var hideDirection = $('.mapContainer').data('hide-direction');
  var hideEmail = $('.mapContainer').data('hide-email');
  var mappingVendor = $('.mapContainer').data('mapping-vendor');
  var mappingApiKey = $('.mapContainer').data('mapping-apikey');
  var prefilters = $('.mapContainer').data('prefilters');
  var categoryGroupsAccordionText = $('.mapContainer').data('product-services-text');
  var searchTypeOverride = $('.mapContainer').data('search-type');

  var defaultLatitude = void 0;
  var defaultLongitude = void 0;
  var primaryMapInitialized = false;
  document.addEventListener('DOMContentLoaded', function () {
    var _this = this;

    intialLayout.hide();
    primaryLayout.hide();

    if (filterList) {
      filterListJSON = JSON.parse(filterList);
    }
    if ($('.mapContainer').length > 0) {
      var filtersComponent = new App.Filters(document.getElementById('bullseye-map__filters'));
      var activeFiltersComponent = new App.ActiveFilters(document.getElementById('bullseye-map-active__filters'));

      filtersComponent.addEventListener('filterRemoved', function (e) {
        if (e.detail) {
          if (e.detail.value !== 'distance') {
            var distanceFlag = false;
            var distanceUnitFlag = false;
            if ($('#distance').siblings('button').hasClass('collapsed')) {
              distanceFlag = true;
            }
            if ($('#distanceUnits').siblings('button').hasClass('collapsed')) {
              distanceUnitFlag = true;
            }
            activeFilters.removeValue('name', e.detail.name);
            activeFiltersComponent.activeFilterCount = activeFilters.length;
            activeFiltersComponent.activeFilters = activeFilters;
            _this.filters = new App.Filters(e.target);
            _this.filters.filterList = filterListJSON;
            distanceCollapseCheck(distanceFlag, distanceUnitFlag);
            App.Bullseye.getBullsEyeResponse(resourcePath + '.json');
          }
        }
      });

      filtersComponent.addEventListener('filterSelected', function (e) {
        if (e.detail) {
          var selectedId = e.detail.selectedId;
          var filter = e.detail.activeFilters[selectedId];
          var filterTitle = filter.title;
          var filterId = filter.id;
          var distanceFlag = false;
          var distanceUnitFlag = false;
          if ($('#distance').siblings('button').hasClass('collapsed')) {
            distanceFlag = true;
          }
          if ($('#distanceUnits').siblings('button').hasClass('collapsed')) {
            distanceUnitFlag = true;
          }
          var activeFilterDetails = {
            name: filterId,
            title: filterTitle,
            id: filterId
          };
          var removeFilterIds = e.detail.removeFilterIds;
          Object.keys(removeFilterIds).map(function (key) {
            activeFilters.removeValue('name', removeFilterIds[key]);
          });
          if (!filter.value) {
            activeFilters.push(activeFilterDetails);
            activeFiltersComponent.activeFilterCount = activeFilters.length;
            activeFiltersComponent.activeFilters = activeFilters;
          }
          _this.filters = new App.Filters(e.target);
          _this.filters.filterList = filterListJSON;
          distanceCollapseCheck(distanceFlag, distanceUnitFlag);
          App.Bullseye.getBullsEyeResponse(resourcePath + '.json');
        }
      });

      filtersComponent.addEventListener('clearSelection', function (e) {
        if (e.detail) {
          var distanceFlag = false;
          var distanceUnitFlag = false;
          if ($('#distance').siblings('button').hasClass('collapsed')) {
            distanceFlag = true;
          }
          if ($('#distanceUnits').siblings('button').hasClass('collapsed')) {
            distanceUnitFlag = true;
          }
          var filter = e.detail.component;
          var removeFilterIds = filter.activeFilterValues.map(function (filterValue) {
            activeFilters.removeValue('name', filterValue.name);
            filtersComponent.deactiveFilter(filterValue.name);
            return filterValue.id;
          });
          var newActiveFilters = _this.filters.selectedFilters;
          // remove all active filter values from the given filter and updated selectedFilter list
          Object.keys(_this.filters.selectedFilters).map(function (key) {
            return removeFilterIds.indexOf(newActiveFilters[key].id) > -1 && delete newActiveFilters[key];
          });
          activeFiltersComponent.activeFilterCount = activeFilters.length;
          activeFiltersComponent.activeFilters = activeFilters;
          _this.filters = new App.Filters(e.target);
          _this.filters.selectedFilters = newActiveFilters;
          _this.filters.filterList = filterListJSON;
          distanceCollapseCheck(distanceFlag, distanceUnitFlag);
          App.Bullseye.getBullsEyeResponse(resourcePath + '.json');
        }
      });
      activeFiltersComponent.addEventListener('filterRemoved', function (e) {
        if (e.detail) {
          var name = e.detail.name;
          activeFilters.removeValue('name', name);
          activeFiltersComponent.activeFilterCount = activeFilters.length;
          activeFiltersComponent.activeFilters = activeFilters;
          filtersComponent.deactiveFilter(name);
        }
      });

      App.Bullseye.clearAllFilters = function clearAllFilters() {
        var distanceFlag = false;
        var distanceUnitFlag = false;
        if ($('#distance').siblings('button').hasClass('collapsed')) {
          distanceFlag = true;
        }
        if ($('#distanceUnits').siblings('button').hasClass('collapsed')) {
          distanceUnitFlag = true;
        }
        activeFiltersComponent.activeFilterCount = 0;
        activeFiltersComponent.activeFilters = [];
        Object.keys(activeFilters).map(function (key) {
          filtersComponent.deactiveFilter(activeFilters[0].name);
        });
        activeFilters = [];
        activeFiltersComponent.activeFilterCount = activeFilters.length;
        activeFiltersComponent.activeFilters = activeFilters;
        filtersComponent.filterList = filterListJSON;
        distanceCollapseCheck(distanceFlag, distanceUnitFlag);
        App.Bullseye.getBullsEyeResponse(resourcePath + '.json');
      };

      $('.open-facets-map-mobile').click(function () {
        filtersComponent.open();
      });
    }

    $('.mapLoadMore').click(function () {
      if (resultsLoaded < totalResults) {
        var resultToLoad = resultsLoaded + pageSize;
        App.Bullseye.getBullsEyeResponse(resourcePath + '.json', resultToLoad);
      }
    });

    $('.whereToBuy').click(function () {
      App.Bullseye.downloadBullsEyeResult();
    });

    $('.bullseye__clear-all-filters').click(function () {
      App.Bullseye.clearAllFilters();
    });

    $('#distance').removeClass('in');
    $('#distance').siblings('button').addClass('collapsed');
    $('#distanceUnits').removeClass('in');
    $('#distanceUnits').siblings('button').addClass('collapsed');
    $('#distance').find('.faceted-navigation-header__action-link').hide();
    $('#distanceUnits').find('.faceted-navigation-header__action-link').hide();
  });

  var locateMe = $('.eaton-search--map__locator__wrapper');
  locateMe.click(function () {
    navigator.geolocation.getCurrentPosition(function (position) {
      $('#location-search-box').val('');
      getLocation(position);
      $('.map-primary__location__code-error').addClass('hide');
    }, function (error) {
      console.log('error' + error);
      $('.map-primary__location__code-error').removeClass('hide');
    }, { maximumAge: 60000, timeout: 5000, enableHighAccuracy: false });
  });

  $('.map-search').click(function () {
    var keyword = $('#location-search-box').val();
    var locationForm = $('#location-search-form')[0];
    if (!keyword && locationForm) {
      locationForm.reportValidity();
    } else {
      App.Bullseye.getBullsEyeResponse(resourcePath + '.json');
    }
  });

  $(function () {

    if (window.location.search.includes('isBuyNowMap')) {

      try {
        var buyNowMapData = JSON.parse(localStorage.getItem('buyNowMapData'));
        if (!buyNowMapData) {
          throw 'Unable to find buy now data';
        } else {
          $('.mapContainer').data('current-latitude', buyNowMapData.latitude);
          $('.mapContainer').data('current-longitude', buyNowMapData.longitude);
          $('#location-search-box').val(buyNowMapData.keywords);
          localStorage.removeItem('buyNowMapData');
          App.Bullseye.getBullsEyeResponse(resourcePath + '.json');
        }
      } catch (err) {
        console.error(err);
      }
    }
  });

  function getLocation(position) {
    if (position) {
      var latitude = position.coords.latitude;
      var longitude = position.coords.longitude;
      $('.mapContainer').data('current-latitude', latitude);
      $('.mapContainer').data('current-longitude', longitude);
      if (resourcePath && latitude && longitude) {
        App.Bullseye.getBullsEyeResponse(resourcePath + '.json');
      }
    }
  }

  function distanceCollapseCheck(distanceFlag, distanceUnitFlag) {
    if (distanceFlag) {
      $('#distance').removeClass('in');
      $('#distance').siblings('button').addClass('collapsed');
    }
    if (distanceUnitFlag) {
      $('#distanceUnits').removeClass('in');
      $('#distanceUnits').siblings('button').addClass('collapsed');
    }
  }

  App.Bullseye.downloadBullsEyeResult = function () {
    $('.loader--inline').show();
    var currentLatitude = $('.mapContainer').attr('data-current-latitude');
    var currentLongitude = $('.mapContainer').attr('data-current-longitude');
    var categoryIds = [];
    Object.keys(activeFilters).map(function (key) {
      categoryIds.push(activeFilters[key].id);
    });
    var categories = categoryIds.join(',');
    var Keyword = $('#location-search-box').val();
    var radius = $('#distance').find('input:radio:checked').val();
    var distanceUnit = $('#distanceUnits').find('input:radio:checked').val();
    var downloadAllURL = resourcePath + '.csv' + '?Keyword=' + (Keyword ? Keyword : '') + '&PageSize=' + (pageSize ? totalResults : '') + '&CategoryIDs=' + (categories ? categories : '') + '&distanceUnit=' + (distanceUnit ? distanceUnit : '') + '&Radius=' + (radius ? radius : '') + '&Latitude=' + (currentLatitude ? currentLatitude : '') + '&Longitude=' + (currentLongitude ? currentLongitude : '');
    $.get(downloadAllURL, function (response) {
      var blob = new Blob([response]);
      if (window.navigator.msSaveOrOpenBlob) {
        // code for IE.
        window.navigator.msSaveBlob(blob, 'wheretobuy.csv');
      } else {
        // code for chromium browsers.
        var aTag = window.document.createElement('a');
        aTag.href = window.URL.createObjectURL(blob, { type: 'text/plain' });
        aTag.download = 'wheretobuy.csv';
        document.body.appendChild(aTag);
        aTag.click();
      }
      $('.loader--inline').hide();
    });
  };

  var loader = $('.loader');
  App.Bullseye.getBullsEyeResponse = function (url, pageSize) {
    if (!primaryMapInitialized) {
      primaryMapInitialized = true;

      if (mappingVendor === 'google') {
        map = new google.maps.Map(document.getElementById('mapPrimary'), {
          center: { lat: defaultLatitude, lng: defaultLongitude },
          zoom: 4,
          mapTypeId: 'terrain'
        });
      } else if (mappingVendor === 'mapbox') {
        mapboxgl.accessToken = mappingApiKey;
        map = new mapboxgl.Map({
          container: 'mapPrimary',
          style: 'mapbox://styles/mapbox/streets-v11',
          center: [defaultLongitude, defaultLatitude],
          zoom: 4
        });
      }

      $('.initial-layout').hide();
      $('.primary-layout').show();
      applyFilters();
    }

    loader.addClass('loader-active');
    if (activeFilters.length > 0) {
      $('.bullseye__clear-all-filters').show();
    } else {
      $('.bullseye__clear-all-filters').hide();
    }
    $('#distance').find('.faceted-navigation-header__action-link').hide();
    $('#distanceUnits').find('.faceted-navigation-header__action-link').hide();
    var categoryIds = [];
    var radius = $('#distance').find('input:radio:checked').val();
    var distanceUnit = $('#distanceUnits').find('input:radio:checked').val();
    var latitude = $('.mapContainer').data('current-latitude');
    var longitude = $('.mapContainer').data('current-longitude');
    var keywords = $('#location-search-box').val();
    Object.keys(activeFilters).map(function (key) {
      categoryIds.push(activeFilters[key].id);
    });
    var size = void 0;
    if (pageSize) {
      size = pageSize;
    }

    var data = {
      Latitude: latitude,
      Longitude: longitude,
      PageSize: size,
      Keyword: keywords,
      CategoryIDs: categoryIds.join(','),
      Radius: radius,
      distanceUnit: distanceUnit,
      SearchTypeOverride: searchTypeOverride
    };
    $.ajax({
      type: 'GET',
      url: url,
      data: data,
      headers: { 'Content-Type': 'application/json' },
      success: function success(resultData) {
        App.Bullseye.constructMapDetail(resultData, data.Latitude, data.Longitude, data.radius);
      }
    });
  };

  var applyFilters = function applyFilters() {
    // first apply any prefilters from Bullseye Config
    var fields = void 0;
    var filters = [];
    if (typeof prefilters === 'string') {
      fields = prefilters.split(',');
      for (var i = 0; i < fields.length; i++) {
        if (fields[i].includes('categoryId')) {
          filters.push(fields[i].split(':')[1].replace(/"/g, ''));
        }
      }
    } else if ((typeof prefilters === 'undefined' ? 'undefined' : _typeof(prefilters)) === 'object') {
      fields = prefilters;
      filters.push(fields.categoryId);
    }
    for (var _i = 0; _i < filters.length; _i++) {
      $("input[type=checkbox][value='" + filters[_i] + "']").click();
    }

    // apply filters in the URL
    var vars = {};
    var loc = void 0;
    var productLines = document.querySelectorAll('input[type=checkbox][name=Product-lines]');
    var partnerType = document.querySelectorAll('input[type=checkbox][name=Partner-type]');
    var productGrouping = document.querySelectorAll('input[type=checkbox][name=Product-grouping]');
    var productLinesNoSpace = [];
    var partnerTypeNoSpace = [];
    var productGroupingNoSpace = [];

    for (var _i2 = 0; _i2 < productLines.length; _i2++) {
      productLinesNoSpace[_i2] = productLines[_i2].getAttribute('data-title').replace(/ /g, '').toLowerCase();
    }
    for (var _i3 = 0; _i3 < partnerType.length; _i3++) {
      partnerTypeNoSpace[_i3] = partnerType[_i3].getAttribute('data-title').replace(/ /g, '').toLowerCase();
    }
    for (var _i4 = 0; _i4 < productGrouping.length; _i4++) {
      productGroupingNoSpace[_i4] = productGrouping[_i4].getAttribute('data-title').replace(/ /g, '').toLowerCase();
    }
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
      key = key.toLowerCase();
      value = decodeURI(value).toLowerCase();
      var multiVal = value.split('||');
      multiVal.forEach(function (val) {
        switch (key) {
          case 'productlines':
            loc = productLinesNoSpace.indexOf(val);
            if (loc !== -1) {
              $("input[type=checkbox][data-title='" + productLines[loc].getAttribute('data-title') + "']").click();
            }
            break;
          case 'partnertype':
            loc = partnerTypeNoSpace.indexOf(val);
            if (loc !== -1) {
              $("input[type=checkbox][data-title='" + partnerType[loc].getAttribute('data-title') + "']").click();
            }
            break;
          case 'productgrouping':
            loc = productGroupingNoSpace.indexOf(val);
            if (loc !== -1) {
              $("input[type=checkbox][data-title='" + productGrouping[loc].getAttribute('data-title') + "']").click();
            }
            break;
          case 'keyword':
            fillKeyword(val);
            break;
          case 'city':
            fillKeyword(val);
            break;
          case 'state':
            fillKeyword(val);
            break;
          case 'province':
            fillKeyword(val);
            break;
          case 'zip':
            fillKeyword(val);
            break;
          default:
            vars[key] = val.toLowerCase();
        }
      });
    });
    return vars;
  };

  var fillKeyword = function fillKeyword(value) {
    document.getElementById('location-search-box').value = value;
  };

  var markers = [];
  var previousCardActive = void 0;
  var previousInfoActive = void 0;

  App.Bullseye.constructMapDetail = function (resultData, latitude, longitude) {
    if (resultData) {
      $('.map-primary__location__code-error').addClass('hide');
      $('.bullseye-map-active__filters .faceted-navigation__action-link--clear-filters').click(function () {
        App.Bullseye.clearAllFilters();
      });
      deleteMarkers();
      $('.card-list').empty();
      var resultList = resultData.ResultList;
      $('.mapContainer').attr('data-current-latitude', resultData.Latitude);
      $('.mapContainer').attr('data-current-longitude', resultData.Longitude);
      var kmText = $('.mapContainer').attr('data-km-text');
      var miText = $('.mapContainer').attr('data-miles-text');
      if (resultList) {
        if (resultList.length > 0) {
          $('.map-primary__download').show();
        } else {
          $('.map-primary__download').hide();
        }
        resultsLoaded = resultData.ResultList.length;
        var searchTerm = resultData.searchTerm;
        var radius = resultData.radius;
        totalResults = resultData.TotalResults;
        var distanceUnit = resultData.distanceUnit;
        distanceUnit = distanceUnit === 'kilometers' ? kmText : miText;
        if (resultsLoaded >= totalResults) {
          $('.mapLoadMore').hide();
        } else {
          $('.mapLoadMore').show();
        }
        var coma = '';
        if (searchTerm) {
          $('#location-search-box').val(searchTerm);
          coma = ', ';
          searchTerm = '"' + searchTerm + '"';
        }
        var mapResultText = $('.map_result').data('map-results');
        mapResultText = (totalResults || totalResults === 0 ? totalResults : '') + ' ' + (mapResultText ? mapResultText : '') + ' <span class=\'faceted-navigation-header__sub-copy\'>' + radius + ' ' + distanceUnit + coma + ' ' + (searchTerm ? searchTerm : '') + '</span>';
        $('.map_result').html(mapResultText);
        var count = 0;
        resultList.forEach(function (item) {
          var distributorLatitude = item.Latitude;
          var distributorLongitude = item.Longitude;
          /* eslint-disable no-unused-vars, no-undef*/
          var geocoder = new google.maps.Geocoder();
          geocoder.geocode({ address: searchTerm }, function (results, status) {
            if (status === 'OK') {
              map.setCenter(results[0].geometry.location);
            }
          });
          /* eslint-disable no-unused-vars, no-undef*/
          map.setZoom(9);
          var location = { lat: distributorLatitude, lng: distributorLongitude };
          var distributorName = item.Name;
          var address1 = item.Address1;
          var address2 = item.Address2 ? item.Address2 : '';
          var phoneNumber = item.PhoneNumber;
          var mobileNumber = item.MobileNumber;
          var emailAddress = item.EmailAddress;
          var distance = item.Distance;
          var locationTypeName = item.LocationTypeName;
          var categoryIds = item.CategoryIds;
          var city = item.City ? item.City + ',' : '';
          var state = item.State ? item.State : '';
          var postCode = item.PostCode ? item.PostCode : '';
          var contactName = item.ContactName ? item.ContactName + ',' : '';
          var contactPosition = item.ContactPosition ? item.ContactPosition : '';
          var addressCityStatePC = city + ' ' + state + ' ' + postCode;
          var websiteUrl = item.URL;
          var directionURL = 'https://www.google.com/maps/dir/' + latitude + ',' + longitude + '/' + distributorLatitude + ',' + distributorLongitude;
          var labelIndex = item.CategoryIds.split(',').indexOf(labelCategory);
          var label = undefined;
          if (labelIndex >= 0) {
            label = item.CategoryNames.split(',')[labelIndex];
          }
          var notesTitle = 'Notes';
          var notesText = '';

          if (!item.Attributes.length) {
            notesText = '';
          } else {
            for (var attr in item.Attributes) {
              if (item.Attributes[attr].AttributeName === notesTitle) {
                notesText = item.Attributes[attr].AttributeValue.trim();
                break;
              }
            }
          }

          var contentString = getInfoCard(distributorName, address1, address2, addressCityStatePC, locationTypeName, phoneNumber, mobileNumber, contactName, contactPosition, websiteUrl, emailAddress, directionURL, 'card${count}', label, notesText, notesTitle);
          var categoryGroupsArray = item.categoryGroups;
          var categoryGroupsContentArray = [];
          if (categoryGroupsArray) {
            for (var key in categoryGroupsArray) {
              var categoryArray = categoryGroupsArray[key];
              var _contentString = '<p class=map-card__accordion__group__title>' + key + '</p>\n                  <div class=\'map-card__accordion__group\'>\n                     ' + categoryArray.map(function (service) {
                return '<p class=map-card__accordion__group__copy>' + service + '</p>';
              }).join(' ') + '\n                  </div>\n                ';
              categoryGroupsContentArray.push(_contentString);
            }
          }
          var mapCard = '<div class=map-card id=card' + count + '>\n                            <div class=map-card__content>\n                              <div class=map-card-header>\n                                <div class=map-card-header__wrapper>\n                                  <h3 class=map-card-header__title>' + distributorName + '</h3>\n                                  <p class=map-card-header__distance>' + distance + ' ' + distanceUnit + '</p>\n                                </div>\n                                ' + (label ? '<p class=map-card-header__vpma>' + label + '</p>' : '') + '\n                              </div>\n\n                              <div class=map-card-body>\n                                  ' + (enableLocationType ? '<p class=\'map-card-body__copy map-card-body__copy--class\'>' + locationTypeName + '</p>' : '') + '\n                                  <p class=\'map-card-body__copy map-card-body__copy--address\'>\n                                    ' + (address1 ? address1 : '') + ' <br>\n                                    ' + (address2 ? address2 : '') + ' <br>\n\n                                    ' + (addressCityStatePC ? addressCityStatePC : '') + ' <br>\n                                    ' + (contactName ? contactName : '') + '   ' + (contactPosition ? contactPosition : '') + '<br>\n                                    ' + (phoneNumber ? phoneNumber : '') + ' <br>\n                                    ' + (mobileNumber ? mobileNumber : '') + '\n                                  </p>\n                                  ' + (notesText ? '<p class=\'map-card-body__copy map-card-body__copy--notes\'><br><b>' + notesTitle + ':</b><br>' + notesText + '</p>' : '') + '\n                              </div>\n\n                            ' + (enableExpander ? '<div class=map-card-contact map-card-expander>' : '<div class=map-card-contact>') + '\n                                 ' + (websiteUrl && !hideWebsite ? '<a href=' + websiteUrl + ' class="map-card-contact__copy map-card-contact__copy--website" target=_blank><p>' + websiteText + '</p></a>' : '') + '\n                                 ' + (emailAddress && !hideEmail ? '<a href=mailto:' + emailAddress + ' class="map-card-contact__copy map-card-contact__copy--email" target=_blank><p>' + emailText + '</p></a>' : '') + '\n                                 ' + (directionURL && !hideDirection ? '<a href=' + directionURL + ' class="map-card-contact__copy map-card-contact__copy--directions" target=_blank><p>' + directionText + '</p></a>' : '') + '\n                              </div>\n                            </div>\n\n                           ' + (enableExpander ? (categoryGroupsArray ? '<div class=\'map-card__accordion\' data-target=\'#card-accordion-panel' + count + '\' data-toggle=\'collapse\'>\n                               <p class=\'map-card__accordion__title\'>' + categoryGroupsAccordionText + '</p>\n                               <i class="map-card__accordion__icon icon icon-chevron-down"></i>\n                             </div>' : '') + '\n                             <div class=\'map-card__accordion__panel--wrapper collapse in\' id=\'card-accordion-panel' + count + '\'>' : '') + '\n\n                           ' + (enableExpander ? '<div class=\'map-card__accordion__panel\'>\n                                ' + categoryGroupsContentArray.join(' ') + '\n                              </div>' : '') + '\n\n                            </div>\n                        </div>'; // end map-card

          $('.card-list').append(mapCard);

          if (mappingVendor === 'google') {
            /* eslint-disable no-unused-vars, no-undef*/
            var infowindow = new google.maps.InfoWindow({
              content: contentString
            });

            /* eslint-disable no-unused-vars, no-undef*/
            var _marker = new google.maps.Marker({
              position: location,
              /* eslint-disable no-unused-vars, no-undef*/
              map: map,
              icon: item.icon,
              title: distributorName,
              infowindow: infowindow
            });
            _marker.customInfo = 'card' + count;
            markers.push(_marker);
            _marker.addListener('click', function () {
              markers.forEach(function (marker) {
                marker.infowindow.close(map, marker);
              });
              $('.map-card').removeClass('map-card-select');
              $('#' + this.customInfo).addClass('map-card-select');
              previousCardActive = $('#' + this.customInfo);
              infowindow.open(map, _marker);
              var clonedDiv = $('#' + this.customInfo).clone();
              $('#' + this.customInfo).remove();
              clonedDiv.prependTo('.card-list').fadeIn();
            });
          } else if (mappingVendor === 'mapbox') {
            var popup = new mapboxgl.Popup().setText(contentString);
            var _marker2 = new mapboxgl.Marker().setLngLat(location).setPopup(popup).addTo(map);
            markers.push(_marker2);
          }
          count++;
        });
      }
    }
    loader.removeClass('loader-active');
  };

  function getInfoCard(distributorName, address1, address2, addressCityStatePC, locationTypeName, phoneNumber, mobileNumber, contactName, contactPosition, websiteUrl, emailAddress, directionURL, id, label, notesText, notesTitle) {
    var contentString = '\n              <div class=map-card-info data-card-id=' + id + '>\n                <div class=map-card-info__content>\n                   <div class=map-card-info-header>\n                    <h1 class=map-card-info-header__title>' + distributorName + '</h1>\n                    ' + (label ? '<p class=map-card-info-header__vpma>' + label + '</p>' : '') + '\n                   </div>\n\n                   <div class=map-card-body>\n                       <p class=\'map-card-body__copy map-card-body__copy--class\'>' + locationTypeName + '</p>\n                       <p class=\'map-card-body__copy map-card-body__copy--address\'>\n                          ' + (address1 ? address1 : '') + ' <br>\n                          ' + (address2 ? address2 : '') + ' <br>\n                          ' + (addressCityStatePC ? addressCityStatePC : '') + '<br>\n                          ' + (contactName ? contactName : '') + '   ' + (contactPosition ? contactPosition : '') + '<br>\n                       </p>\n                        <p class=\'map-card-body__copy map-card-body__copy--phonenumber\'>\n                          ' + (phoneNumber ? phoneNumber : '') + ' <br>\n                          ' + (mobileNumber ? mobileNumber : '') + '\n                        </p>\n                        ' + (notesText ? '<p class=\'map-card-body__copy map-card-body__copy--notes\'><br><b>' + notesTitle + ':</b><br>' + notesText + '</p>' : '') + '\n                   </div>\n\n                   <div class=map-card-contact>\n                       ' + (websiteUrl && !hideWebsite ? '<a href=\'' + websiteUrl + '\' class=\'map-card-contact__copy map-card-contact__copy--website\' target=\'_blank\'><p>' + websiteText + '</p></a>' : '') + '\n                       ' + (emailAddress && !hideEmail ? '<a href=\'mailto:' + emailAddress + '\' class=\'map-card-contact__copy map-card-contact__copy--email\' target=\'_blank\'><p>' + emailText + '</p></a>' : '') + '\n                       ' + (directionURL && !hideDirection ? '<a href=\'' + directionURL + '\' class=\'map-card-contact__copy map-card-contact__copy--directions\' target=\'_blank\'><p>' + directionText + '</p></a>' : '') + '\n                   </div>\n\n                </div>\n              </div>\n              ';
    return contentString;
  }

  function deleteMarkers() {
    for (var i = 0; i < markers.length; i++) {
      if (mappingVendor === 'google') {
        markers[i].setMap(null);
      } else if (mappingVendor === 'mapbox') {
        markers[i].remove();
      }
    }
    markers = [];
  }

  if (mappingVendor === 'google') {
    var places = new google.maps.places.Autocomplete(document.getElementById('location-search-box'));
    // eslint-disable-next-line no-eq-null, eqeqeq
    if (places != null) {
      google.maps.event.addListener(places, 'place_changed', function () {
        var place = places.getPlace();
        console.log(place);
        var city = '';
        var state = '';
        if (place.address_components) {
          for (var i = 0; i < place.address_components.length; i++) {

            var component = place.address_components[i];

            var componentType = component.types[0];

            switch (componentType) {

              case 'locality':
                {
                  city = component.long_name + ' ' + city;
                  break;
                }

              case 'administrative_area_level_1':
                state += component.long_name;
                break;
            }
          }

          var searchItem = city + ',' + state;
          var keyword = $('#location-search-box').val(searchItem);
          var locationForm = $('#location-search-form')[0];

          if (!keyword && locationForm) {
            locationForm.reportValidity();
          } else {
            App.Bullseye.getBullsEyeResponse(resourcePath + '.json');
          }
        }
      });
    }
  }
  App.Bullseye.initMap = function () {
    var urlVars = applyFilters();
    var urlLat = urlVars.latitude;
    var urlLon = urlVars.longitude;
    var urlRad = urlVars.radius;

    if (urlRad) {
      defaultRadius = urlRad;
    }
    if (urlLat) {
      defaultLatitude = urlLat;
    } else {
      defaultLatitude = document.getElementById('bullseye-map__filters').getAttribute('data-default-latitude');
    }
    if (urlLon) {
      defaultLongitude = urlLon;
    } else {
      defaultLongitude = document.getElementById('bullseye-map__filters').getAttribute('data-default-longitude');
    }
    if (defaultLatitude && defaultLongitude) {
      defaultLatitude = parseFloat(defaultLatitude);
      defaultLongitude = parseFloat(defaultLongitude);
    }

    if (defaultRadius) {
      $('input[type=radio][value=' + defaultRadius + ']').prop('checked', true);
    }
    if (defaultRadiusUnit) {
      $('input[type=radio][value=' + defaultRadiusUnit + ']').prop('checked', true);
    }
    navigator.geolocation.getCurrentPosition(function (position) {
      $('.initial-layout').hide();
      $('.primary-layout').show();
      if (mappingVendor === 'google') {
        map = new google.maps.Map(document.getElementById('mapPrimary'), {
          center: { lat: defaultLatitude, lng: defaultLongitude },
          zoom: 4,
          mapTypeId: 'terrain'
        });
      } else if (mappingVendor === 'mapbox') {
        mapboxgl.accessToken = mappingApiKey;
        map = new mapboxgl.Map({
          container: 'mapPrimary',
          style: 'mapbox://styles/mapbox/streets-v11',
          center: [defaultLongitude, defaultLatitude],
          zoom: 4
        });
      }
      getLocation(position);
      primaryMapInitialized = true;

      $(window).resize(function () {
        if ($(window).width() >= '768') {
          $('.eaton-search--map__locator--mobile').hide();
          $('.eaton-search--map__locator').show();
        } else {
          $('.eaton-search--map__locator').hide();
          $('.eaton-search--map__locator--mobile').show();
        }
      });
    }, function (errorCode) {
      console.warn('location error');
      $('.initial-layout').show();
      $('.primary-layout').hide();
      if (mappingVendor === 'google') {
        map = new google.maps.Map(document.getElementById('mapLanding'), {
          center: { lat: defaultLatitude, lng: defaultLongitude },
          zoom: 4,
          mapTypeId: 'terrain'
        });
      } else if (mappingVendor === 'mapbox') {
        mapboxgl.accessToken = mappingApiKey;
        map = new mapboxgl.Map({
          container: 'mapPrimary',
          style: 'mapbox://styles/mapbox/streets-v11',
          center: [defaultLongitude, defaultLatitude],
          zoom: 4
        });
      }
    }, { maximumAge: 60000, timeout: 5000, enableHighAccuracy: false });
  };
  if ($('.mapContainer').length > 0) {
    Array.prototype.removeValue = function (name, value) {
      if (value) {
        var removableValue = value.toString();
        var array = $.map(this, function (v, i) {
          return v[name] === removableValue ? null : v;
        });
        this.length = 0;
        this.push.apply(this, array);
      }
    };
  }

  if (mappingVendor === 'mapbox') {
    App.Bullseye.initMap();
  }
})();