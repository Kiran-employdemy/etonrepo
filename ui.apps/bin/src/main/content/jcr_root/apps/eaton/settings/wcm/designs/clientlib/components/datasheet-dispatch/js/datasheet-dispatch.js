/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable no-undef */
/* eslint-disable no-global-assign */
// noinspection JSConstantReassignment
//-----------------------------------
// List Component - Datasheet Dispatch
//-----------------------------------
var requirePresent = function requirePresent() {
  return typeof require !== 'undefined';
};

if (requirePresent()) {
  var globalConstants = require('../../../global/js/etn-new-global-constants');
  var localConstants = require('./datasheet-dispatch-constants');
  datasheetDispatchConstants = localConstants.datasheetDispatchConstants;
  literals = globalConstants.literals;
  displayStyles = globalConstants.displayStyles;
  eventListeners = globalConstants.eventListeners;
  XLSX = require('xlsx');
}

var externalCallWrapperPresent = function externalCallWrapperPresent() {
  return (typeof externalCallWrapper === 'undefined' ? 'undefined' : _typeof(externalCallWrapper)) !== literals.UNDEFINED && (typeof externalCallWrapper === 'undefined' ? 'undefined' : _typeof(externalCallWrapper)) !== literals.UNDEFINED;
};

var DatasheetDispatch = function () {
  function DatasheetDispatch() {
    _classCallCheck(this, DatasheetDispatch);

    this.xlsxuploader = document.getElementById(datasheetDispatchConstants.elementIds.xlsxUploader);
    this.createButtonBottom = document.getElementById(datasheetDispatchConstants.elementIds.buttons.createBottom);
    this.createButtonTop = document.getElementById(datasheetDispatchConstants.elementIds.buttons.createTop);
    this.checkboxes = document.getElementsByName(datasheetDispatchConstants.elementNames.locales);
    this.catalogNumberArea = document.querySelector(datasheetDispatchConstants.querySelectors.textArea);
    this.resetDispatcher = document.getElementById(datasheetDispatchConstants.elementIds.buttons.reset);
    this.sendMail = document.getElementById(datasheetDispatchConstants.elementIds.buttons.sendMail);
    this.textEmailId = document.getElementById(datasheetDispatchConstants.elementIds.emailTextField);
    this.sendMailButton = document.getElementById(datasheetDispatchConstants.elementIds.buttons.modalSendMailButton);
    this.errorEmailMessage = document.querySelector(datasheetDispatchConstants.querySelectors.emailError);
    this.successEmailMessage = document.querySelector(datasheetDispatchConstants.querySelectors.emailSuccess);
    this.resultSection = document.getElementById(datasheetDispatchConstants.elementIds.resultSection);
    this.mustacheTemplates = {
      result: document.getElementById(datasheetDispatchConstants.elementIds.mustacheTemplates.result),
      email: document.getElementById(datasheetDispatchConstants.elementIds.mustacheTemplates.email)
    };
    this.captioni18ArtNo = this.resultSection.dataset.ddNoCap;
    this.captioni18Lang = this.resultSection.dataset.ddLangCap;
    this.captioni18SKULink = this.resultSection.dataset.ddSkuLinkCap;
    this.captioni18PDFLink = this.resultSection.dataset.ddPdfLinkCap;
    this.captioni18SKUSpecLink = this.resultSection.dataset.ddSpecLinkCap;
    this.selectedLocales = [];
    this.EmailLinks = [];
    this.emailData = '';
  }

  _createClass(DatasheetDispatch, [{
    key: 'init',
    value: function init() {
      this.initialState();
      this.bindEvents();
    }
  }, {
    key: 'initialState',
    value: function initialState() {
      this.catalogNumberArea.classList.remove(datasheetDispatchConstants.elementClasses.disabled);
      this.disableCreateButtons();
      this.resetDispatcher.classList.add(datasheetDispatchConstants.elementClasses.disabled);
      this.sendMail.classList.add(datasheetDispatchConstants.elementClasses.disabled);
      this.catalogNumberArea.disabled = false;
      this.catalogNumberArea.value = '';
      this.xlsxuploader.value = '';
      this.resultSection.innerHTML = '';
      if (this.checkboxes.length > 0) {
        this.checkboxes.forEach(function (checkbox) {
          checkbox.checked = checkbox.id === datasheetDispatchConstants.elementIds.englishCheckbox;
        });
      }
      this.selectedLocales = [datasheetDispatchConstants.literals.englishLocale];
    }
  }, {
    key: 'disableCreateButtons',
    value: function disableCreateButtons() {
      this.createButtonTop.classList.add(datasheetDispatchConstants.elementClasses.disabled);
      this.createButtonBottom.classList.add(datasheetDispatchConstants.elementClasses.disabled);
    }
  }, {
    key: 'enableCreateButtons',
    value: function enableCreateButtons() {
      this.createButtonTop.classList.remove(datasheetDispatchConstants.elementClasses.disabled);
      this.createButtonBottom.classList.remove(datasheetDispatchConstants.elementClasses.disabled);
    }
  }, {
    key: 'bindEvents',
    value: function bindEvents() {
      var _this = this;

      var self = this;
      if (this.checkboxes.length > 0) {
        this.checkboxes.forEach(function (checkbox) {
          checkbox.onclick = function () {
            checkbox.checked ? self.selectedLocales.push(checkbox.value) : self.selectedLocales = self.selectedLocales.filter(function (value) {
              return value !== checkbox.value;
            });
            self.enableCreateButtons();
          };
        });
      }
      if (this.xlsxuploader) {
        this.xlsxuploader.addEventListener(eventListeners.CHANGE, function (event) {
          _this.xlsxParser(event, self);
        });
      }
      this.createButtonBottom.onclick = function () {
        self.getDeepLinks();
      };
      this.createButtonTop.onclick = function () {
        self.getDeepLinks();
      };
      this.resetDispatcher.onclick = function () {
        self.initialState();
      };
      this.sendMail.onclick = function () {
        self.displayModal(document.getElementById(datasheetDispatchConstants.elementIds.modals.email));
      };
      this.sendMailButton.onclick = function () {
        self.sendMailUser();
      };
      this.catalogNumberArea.addEventListener(eventListeners.CHANGE, function () {
        _this.enableCreateButtons();
      });
      this.catalogNumberArea.onblur = function () {
        // get data and remove extra spaces
        var textAreaValue = self.catalogNumberArea.value;
        if (textAreaValue.indexOf('\n') > -1) {
          textAreaValue = textAreaValue.replace(/\n/g, ',');
        }
        textAreaValue = textAreaValue.replace(datasheetDispatchConstants.regex.disallowedChars, '');
        var ajaxInputValueOnBlur = [];
        // convert string to string array.
        ajaxInputValueOnBlur = textAreaValue.split(',');
        // Sanitize string array by removing duplicate value
        ajaxInputValueOnBlur = ajaxInputValueOnBlur.reduce(function (noDupArr, entry) {
          if (noDupArr.includes(entry)) {
            return noDupArr;
          } else {
            // eslint-disable-next-line no-undef
            return [].concat(_toConsumableArray(noDupArr), [entry]);
          }
        }, []);

        // Sanitize string array by removing null, undefine & blank values.
        ajaxInputValueOnBlur = ajaxInputValueOnBlur.filter(function (el) {
          if (el && el !== '') {
            return el;
          }
        });
        self.catalogNumberArea.value = ajaxInputValueOnBlur;
        self.enableCreateButtons();
      };
    }
  }, {
    key: 'xlsxParser',
    value: function xlsxParser(evt, datasheetDispatch) {

      if (evt.target.files.length === 1 && evt.target.files[0].size > datasheetDispatchConstants.MAX_FILE_UPLOAD_SIZE) {
        console.log('The file size must be no more than ' + datasheetDispatchConstants.MAX_FILE_UPLOAD_SIZE / 1024 / 1024 + '  MB');
        datasheetDispatch.displayModal(document.getElementById(datasheetDispatchConstants.elementIds.modals.error));
        datasheetDispatch.disableAllButtonsButReset();
      } else if (evt.target.files.length === 1 && evt.target.files[0].size < datasheetDispatchConstants.MAX_FILE_UPLOAD_SIZE) {
        var selectedFile = evt.target.files[0];
        var reader = new FileReader();
        reader.onload = function (event) {
          var excelEntries = [];
          var data = event.target.result;
          /* eslint-disable*/
          var workbook = XLSX.read(data, {
            type: literals.BINARY
          });
          workbook.SheetNames.forEach(function (sheetName) {
            var xlRowObj = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
            /* eslint-enable*/
            xlRowObj.forEach(function (obz) {
              excelEntries.push(Object.values(obz).toString());
            });
          });
          excelEntries = excelEntries.filter(function (item, index) {
            return excelEntries.indexOf(item) === index;
          });
          datasheetDispatch.catalogNumberArea.value = excelEntries;
          datasheetDispatch.catalogNumberArea.dispatchEvent(new Event(eventListeners.BLUR));
          datasheetDispatch.catalogNumberArea.disabled = true;
        };
        reader.onerror = function (event) {
          console.error('File could not be read! Code ' + event.target.error.code);
          datasheetDispatch.displayModal(document.getElementById(datasheetDispatchConstants.elementIds.modals.error));
        };
        reader.readAsBinaryString(selectedFile);
      }
    }
  }, {
    key: 'disableAllButtonsButReset',
    value: function disableAllButtonsButReset() {
      this.createButtonTop.classList.add(datasheetDispatchConstants.elementClasses.disabled);
      this.createButtonBottom.classList.add(datasheetDispatchConstants.elementClasses.disabled);
      this.resetDispatcher.classList.remove(datasheetDispatchConstants.elementClasses.disabled);
      this.sendMail.classList.add(datasheetDispatchConstants.elementClasses.disabled);
    }
  }, {
    key: 'enableSendMailButton',
    value: function enableSendMailButton() {
      this.sendMail.classList.remove(datasheetDispatchConstants.elementClasses.disabled);
    }
  }, {
    key: 'getDeepLinks',
    value: function getDeepLinks() {
      var textAreaValue = this.catalogNumberArea.value;
      if (textAreaValue.length > 0) {
        if (this.selectedLocales.length > 0) {
          var catalogNumbers = textAreaValue.split(',');
          if (catalogNumbers.length > 20) {
            this.displayModal(document.getElementById(datasheetDispatchConstants.elementIds.modals.aboveSku));
            this.resetDispatcher.classList.remove(datasheetDispatchConstants.elementClasses.disabled);
          } else {
            var data = {
              skuIDs: catalogNumbers.map(function (value) {
                return value.trim();
              }),
              locales: this.selectedLocales
            };
            this.scrollToTop();
            this.disableAllButtonsButReset();
            this.makeCall(datasheetDispatchConstants.pathsTo.generator, data, this.handleData);
          }
        } else {
          this.displayModal(document.getElementById(datasheetDispatchConstants.elementIds.modals.localeError));
        }
      } else {
        this.displayModal(document.getElementById(datasheetDispatchConstants.elementIds.modals.createError));
      }
    }
  }, {
    key: 'makeCall',
    value: function makeCall(url, data, handleData) {
      var _this2 = this;

      if (!externalCallWrapperPresent() && requirePresent()) {
        var _require = require('../../../global/js/external-call-wrapper'),
            _externalCallWrapper = _require.externalCallWrapper;

        _externalCallWrapper.post(url, JSON.stringify(data)).then(function (data) {
          if (handleData) {
            handleData(data, _this2);
          }
        });
      } else {
        externalCallWrapper.post(url, JSON.stringify(data)).then(function (data) {
          if (handleData) {
            handleData(data, _this2);
          }
        });
      }
    }
  }, {
    key: 'handleData',
    value: function handleData(results, dataSheetDispatch) {
      results = JSON.parse(results);
      results.datasheetGen.forEach(function (skuInfo) {
        var localeWithSkuLink = skuInfo.skuDeepLinksList.find(function (deepLink) {
          return deepLink.skuLink !== '';
        });
        skuInfo.skuLink = localeWithSkuLink ? localeWithSkuLink.skuLink : '';
      });
      results.i18n = {
        articleNumber: dataSheetDispatch.captioni18ArtNo,
        language: dataSheetDispatch.captioni18Lang,
        productSpec: dataSheetDispatch.captioni18SKUSpecLink,
        productSpecAsPdf: dataSheetDispatch.captioni18PDFLink,
        resources: dataSheetDispatch.captioni18SKULink
      };
      dataSheetDispatch.resultSection.innerHTML = window.Mustache.render(dataSheetDispatch.mustacheTemplates.result.innerHTML, results);
      dataSheetDispatch.emailData = window.Mustache.render(dataSheetDispatch.mustacheTemplates.email.innerHTML, results).replace(/\n/g, '').replace(/\s{2,}/g, '');
      dataSheetDispatch.enableSendMailButton();
    }
  }, {
    key: 'sendMailUser',
    value: function sendMailUser() {

      var validRegex = RegExp(datasheetDispatchConstants.regex.validEmail);

      var email = this.textEmailId.value;

      if (email.match(validRegex)) {

        this.errorEmailMessage.textContent = '';
        this.successEmailMessage.textContent = 'Sku Details sent to your email';

        // eslint-disable-next-line no-undef
        var data = {
          email: email,
          skuData: this.emailData,
          pagePath: dataLayer.language
        };

        this.makeCall(datasheetDispatchConstants.pathsTo.sendEmail, data);

        document.getElementById(datasheetDispatchConstants.elementIds.modals.email).querySelector(datasheetDispatchConstants.querySelectors.modalCloseButtons).click();
        this.textEmailId.value = '';
      } else {

        this.errorEmailMessage.textContent = 'Please enter a vaild email';
        this.successEmailMessage.textContent = '';
      }
    }
  }, {
    key: 'displayModal',
    value: function displayModal(emailModal) {
      emailModal.style.display = displayStyles.block;
      emailModal.classList.add(datasheetDispatchConstants.elementClasses.inwards);
      emailModal.querySelectorAll(datasheetDispatchConstants.querySelectors.modalCloseButtons).forEach(function (dismiss) {
        dismiss.onclick = function () {
          emailModal.style.display = '';
          emailModal.classList.remove(datasheetDispatchConstants.elementClasses.inwards);
        };
      });
    }
  }, {
    key: 'scrollToTop',
    value: function scrollToTop() {
      document.body.scrollTop = 0;
      document.documentElement.scrollTop = 0;
    }
  }]);

  return DatasheetDispatch;
}();

document.addEventListener('DOMContentLoaded', function () {
  var dataSheetContainer = document.querySelector('.datasheet-dispatch');
  if (dataSheetContainer) {
    new DatasheetDispatch().init();
  }
});