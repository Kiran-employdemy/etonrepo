/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  var BODY_ELEMENT = document.getElementsByTagName('body')[0];
  var MODAL_OPEN_CLASS = 'submittal-builder__modal--open';
  var HIDDEN_CLASS = 'hidden';
  var MODAL_CLASS = 'submittal-builder__modal';
  var CLOSE_MODAL_CLASS = MODAL_CLASS + '__close';
  var INNER_CONTENT_MODAL_CLASS = MODAL_CLASS + '__inner-content';
  var DOWNLOAD_CLASS = 'submittal-builder__download';
  var DOWNLOAD_PACKAGE_BUTTON_CLASS = DOWNLOAD_CLASS + '__download-button';
  var DOWNLOAD_PACKAGE_BUTTON_SELECTOR = '.' + DOWNLOAD_PACKAGE_BUTTON_CLASS;
  var EMAIL_PACKAGE_BUTTON_CLASS = DOWNLOAD_CLASS + '__email-button';
  var EMAIL_PACKAGE_BUTTON_SELECTOR = '.' + EMAIL_PACKAGE_BUTTON_CLASS;
  var FILE_ACCESS_RADIO_GROUP_NAME = 'file-access';
  var CLOSE_SELECTOR = '.' + CLOSE_MODAL_CLASS;
  var DOWNLOAD_RADIO_VALUE = 'download';
  var EMAIL_RADIO_VALUE = 'email';
  var PACKAGE_SIZE_CLASS = DOWNLOAD_CLASS + '-package-size';
  var PACKAGE_SIZE_SELECTOR = '.' + PACKAGE_SIZE_CLASS;
  var NO_COMMUNICATIONS_CLASS = DOWNLOAD_CLASS + '-no-communications';
  var NO_COMMUNICATIONS_SELECTOR = '.' + NO_COMMUNICATIONS_CLASS;

  var App = window.App || {};
  App.SubmittalDownload = function () {
    _createClass(SubmittalDownload, null, [{
      key: 'markup',
      value: function markup(_ref) {
        var title = _ref.title,
            preferredOptionText = _ref.preferredOptionText,
            downloadOptionText = _ref.downloadOptionText,
            emailOptionText = _ref.emailOptionText,
            sizeText = _ref.sizeText,
            sendEmailText = _ref.sendEmailText,
            expirationText = _ref.expirationText,
            fileSizeLimitText = _ref.fileSizeLimitText,
            closeText = _ref.closeText,
            thankYouDownloadMessage = _ref.thankYouDownloadMessage,
            thankYouEmailMessage = _ref.thankYouEmailMessage,
            assetRequiredMessage = _ref.assetRequiredMessage,
            selectedRadioButton = _ref.selectedRadioButton,
            formSubmitted = _ref.formSubmitted,
            fileName = _ref.fileName,
            eatonCommunicationsPage = _ref.eatonCommunicationsPage,
            eatonCommunicationsMessage = _ref.eatonCommunicationsMessage,
            yesText = _ref.yesText,
            noText = _ref.noText,
            formattedPackageSize = _ref.formattedPackageSize,
            mergeAssetsFileName = _ref.mergeAssetsFileName;

        /**
         * NOTE: although the radio buttons are not a faceted navigation, faceted navigation classes are used to match radio button
         * styling and behaviors without duplicating CSS and JS
        */
        return '\n        <div class="' + DOWNLOAD_CLASS + ' ' + INNER_CONTENT_MODAL_CLASS + '">\n          <h3 class="' + MODAL_CLASS + '__header">' + title + '</h3>\n          <button aria-label="' + closeText + '"\n            class="button--reset ' + CLOSE_MODAL_CLASS + '">\n            <span class="sr-only">' + closeText + ' ' + title + '</span>\n            <i class="icon icon-close" aria-hidden="true"></i>\n          </button>\n\n          <div class="eaton-form ' + DOWNLOAD_CLASS + '__form ' + (formSubmitted ? 'hidden' : '') + '">\n            <p class="' + DOWNLOAD_CLASS + '__preferred-option">' + preferredOptionText + '</p>\n            <p class="' + DOWNLOAD_CLASS + '__disclaimer">' + expirationText + '</p>\n            <fieldset id="' + FILE_ACCESS_RADIO_GROUP_NAME + '" class="faceted-navigation__facet-group ' + DOWNLOAD_CLASS + '__radio-button__container">\n              <ul class="faceted-navigation__list">\n                <li class="faceted-navigation__list-item ' + DOWNLOAD_CLASS + '__radio-button__list-item">\n                  <label class="submittal-builder__filters__facet-value-label">\n                  <input\n                    data-analytics-name="submittal-builder-package-download-radio-button-email"\n                    data-analytics-state=' + (selectedRadioButton === EMAIL_RADIO_VALUE ? 'on' : 'off') + '\n                    type="radio"\n                    class="input input--small"\n                    value="' + EMAIL_RADIO_VALUE + '"\n                    ' + (selectedRadioButton === EMAIL_RADIO_VALUE ? 'checked' : '') + '\n                    name="' + FILE_ACCESS_RADIO_GROUP_NAME + '">\n                    <span class="inner">' + emailOptionText + '</span>\n                  </label>\n                </li>\n                <li class="faceted-navigation__list-item ' + DOWNLOAD_CLASS + '__radio-button__list-item">\n                  <label class="submittal-builder__filters__facet-value-label">\n                    <input\n                      data-analytics-name="submittal-builder-package-download-radio-button-download"\n                      data-analytics-state=' + (selectedRadioButton === EMAIL_RADIO_VALUE ? 'on' : 'off') + '\n                      type="radio"\n                      class="input input--small"\n                      value="' + DOWNLOAD_RADIO_VALUE + '"\n                      ' + (selectedRadioButton === DOWNLOAD_RADIO_VALUE ? 'checked' : '') + '\n                      name="' + FILE_ACCESS_RADIO_GROUP_NAME + '">\n                    <span class="inner">' + downloadOptionText + '</span>\n                  </label>\n                </li>\n              </ul>\n            </fieldset>\n            <div class="' + DOWNLOAD_CLASS + '__email__container ' + (selectedRadioButton !== EMAIL_RADIO_VALUE ? 'hidden' : '') + '">\n              <label for="download-email">' + emailOptionText + '</label>\n              <input type="text" id="download-email" />\n            </div>\n            <div class="' + DOWNLOAD_CLASS + '__footer">\n              <div class="' + (selectedRadioButton === DOWNLOAD_RADIO_VALUE ? DOWNLOAD_PACKAGE_BUTTON_CLASS + '--visible' : DOWNLOAD_CLASS + '__footer__column') + '">\n                <button aria-label="[download package]"\n                  data-analytics-name="submittal-builder-package-email-package"\n                  class="b-button b-button__primary b-button__primary--light ' + DOWNLOAD_PACKAGE_BUTTON_CLASS + ' ' + (selectedRadioButton !== DOWNLOAD_RADIO_VALUE ? 'hidden' : '') + '">\n                  <span class="icon icon-download ' + DOWNLOAD_PACKAGE_BUTTON_CLASS + '__icon" aria-hidden="true"></span>\n                </button>\n                <div class="' + DOWNLOAD_CLASS + '__file-info__container">\n                  <p class="' + DOWNLOAD_CLASS + '__file-info">\n                    ' + fileName + ' <span class="' + DOWNLOAD_CLASS + '__file-info__file-size">' + sizeText + ' <bdi>(<span class="' + PACKAGE_SIZE_CLASS + '">' + formattedPackageSize + '</span>)</bdi></span>\n                  </p>\n                  <p class="' + DOWNLOAD_CLASS + '__disclaimer">' + fileSizeLimitText + '</p>\n                </div>\n              </div>\n              <div class="' + DOWNLOAD_CLASS + '__footer__column">\n                <button\n                  data-analytics-name="submittal-builder-package-submit-email"\n                  class="b-button b-button__primary b-button__primary--light ' + EMAIL_PACKAGE_BUTTON_CLASS + ' ' + (selectedRadioButton !== EMAIL_RADIO_VALUE ? 'hidden' : '') + '">\n                    ' + sendEmailText + '\n                  </button>\n              </div>\n            </div>\n          </div>\n          <div class="' + DOWNLOAD_CLASS + '__thank-you ' + (formSubmitted ? '' : 'hidden') + '">\n            <span class="icon icon-circle-checkmark ' + DOWNLOAD_CLASS + '__icon" aria-hidden="true"></span>\n            <p class="' + DOWNLOAD_CLASS + '__file-info"> ' + fileName + ' </p>\n            <p class="' + DOWNLOAD_CLASS + '__thank-you__message ' + (selectedRadioButton !== DOWNLOAD_RADIO_VALUE ? 'hidden' : '') + '">' + thankYouDownloadMessage + '</p>\n            <p class="' + DOWNLOAD_CLASS + '__thank-you__message ' + (selectedRadioButton !== EMAIL_RADIO_VALUE ? 'hidden' : '') + '">' + thankYouEmailMessage + '</p>\n\n            ' + (selectedRadioButton === EMAIL_RADIO_VALUE ? '\n              <div class="row">\n                <div class="col-md-6">\n                <p class="' + DOWNLOAD_CLASS + '__communications__message">' + eatonCommunicationsMessage + '</p>\n                </div>\n                <div class="col-md-6">\n                  <div class="' + DOWNLOAD_CLASS + '__communications__group" role="group" aria-label="Basic example">\n                  <button\n                    data-analytics-name="submittal-builder-package-communication-preferences-opt-out"\n                    class="b-button b-button__primary b-button__primary--light ' + DOWNLOAD_CLASS + '__communications__button ' + NO_COMMUNICATIONS_CLASS + '">\n                      ' + noText + '\n                  </button>\n                  <a\n                    data-analytics-name="submittal-builder-package-communication-preferences-opt-in"\n                    href="' + eatonCommunicationsPage + '"\n                    class="b-button b-button__primary b-button__primary--light ' + DOWNLOAD_CLASS + '__communications__button">\n                      ' + yesText + '\n                  </a>\n                  </div>\n                </div>\n              </div>\n            ' : '') + '\n          </div>\n        </div>\n      ';
      }
    }]);

    function SubmittalDownload(container) {
      _classCallCheck(this, SubmittalDownload);

      // The constructor should only contain the boiler plate code for finding or creating the reference.
      if (typeof container.dataset.ref === 'undefined') {
        this.ref = Math.random();
        App.SubmittalDownload.refs[this.ref] = this;
        container.dataset.ref = this.ref;
        this.init(container);
      } else {
        // If this element has already been instantiated, use the existing reference.
        return App.SubmittalDownload.refs[container.dataset.ref];
      }
    }

    _createClass(SubmittalDownload, [{
      key: 'init',
      value: function init(container) {
        this.container = container;
        this.title = this.container.dataset.title;
        this.preferredOptionText = this.container.dataset.preferredOptionText;
        this.downloadOptionText = this.container.dataset.downloadOptionText;
        this.emailOptionText = this.container.dataset.emailOptionText;
        this.sizeText = this.container.dataset.sizeText;
        this.sendEmailText = this.container.dataset.sendEmailText;
        this.expirationText = this.container.dataset.expirationText;
        this.closeText = this.container.dataset.closeText;
        this.thankYouDownloadMessage = this.container.dataset.thankYouDownloadMessage;
        this.thankYouEmailMessage = this.container.dataset.thankYouEmailMessage;
        this.fileSizeLimitText = this.container.dataset.fileSizeLimitText;
        this.invalidEmailMessage = this.container.dataset.invalidEmailMessage;
        this.eatonCommunicationsPage = this.container.dataset.eatonCommunicationsPage;
        this.eatonCommunicationsMessage = this.container.dataset.eatonCommunicationsMessage;
        this.yesText = this.container.dataset.yesText;
        this.noText = this.container.dataset.noText;
        this.addressRequired = this.container.dataset.addressRequired;
        this.assetRequiredMessage = this.container.dataset.assetRequiredMessage;
        this.maxSizeExceededMessage = this.container.dataset.maxSizeExceededMessage;
        this.fileNamePrefix = this.container.dataset.fileNamePrefix;
        this.mergeAssetsFileName = this.container.dataset.mergeAssetsFileName;
        this.isEmailErrorDisplayed = false;

        this.render();
      }

      /**
       * @function get isOpen - check if SubmittalDownload is open (mobile only) and return
       * @returns {boolean}
      */

    }, {
      key: 'formatPackageSize',
      value: function formatPackageSize(size, toDecimalPlace) {
        var kb = 1024;
        var mb = 1048576;
        var gb = 1048576000;

        toDecimalPlace = typeof toDecimalPlace !== 'undefined' ? toDecimalPlace : 1;

        if (size > gb) {
          return (size / gb).toFixed(toDecimalPlace) + ' gb';
        } else if (size > mb) {
          return (size / mb).toFixed(toDecimalPlace) + ' mb';
        } else if (size > kb) {
          return (size / kb).toFixed(toDecimalPlace) + ' kb';
        } else if (size > 0) {
          return size.toFixed(toDecimalPlace) + ' bytes';
        } else {
          return '0 mb';
        }
      }

      /**
       * @function usersEmail - The email address the user entered.
       */

    }, {
      key: 'open',


      /**
       * @function open - shows SubmittalDownload on mobile
      */
      value: function open() {
        this.container.classList.remove(HIDDEN_CLASS);
        BODY_ELEMENT.classList.add(MODAL_OPEN_CLASS);
      }

      /**
       * @function close - hides SubmittalDownload on mobile
      */

    }, {
      key: 'close',
      value: function close() {
        this.container.classList.add(HIDDEN_CLASS);
        BODY_ELEMENT.classList.remove(MODAL_OPEN_CLASS);
        this.resetState();
      }

      /**
       * @function resetState - return the form state to its initial form
       * and triggers a re-render
       */

    }, {
      key: 'resetState',
      value: function resetState() {
        this.selectedRadioButton = null;
        this.formSubmitted = false;
        this.removeEmailErrorMessage();

        this.render();
      }
      /**
       * @function removeEmailErrorMessage - removes error message element and sets isEmailErrorDisplayed to false
       */

    }, {
      key: 'removeEmailErrorMessage',
      value: function removeEmailErrorMessage() {
        var errorMessage = this.container.querySelector('.LV_validation_message');

        if (errorMessage !== null) {
          this.container.querySelector('.LV_invalid').classList.remove('LV_invalid');
          errorMessage.remove();
        }
        this.isEmailErrorDisplayed = false;
      }

      /**
       * @function updateFileAccessSelection - finds the currently selected radio button and sets this.selectedRadioButton equal to its value
       * and triggers a re-render
       */

    }, {
      key: 'updateFileAccessSelection',
      value: function updateFileAccessSelection() {
        this.selectedRadioButton = this.container.querySelector('[name="' + FILE_ACCESS_RADIO_GROUP_NAME + '"]:checked').value;
        this.removeEmailErrorMessage();

        this.render();
      }

      /**
       * @function downloadPackage - sets formSubmitted to true and kicks off file download process
       */

    }, {
      key: 'downloadPackage',
      value: function downloadPackage() {
        this.formSubmitted = true;
        this.container.dispatchEvent(new CustomEvent('packageDownloaded'));

        this.render();
      }

      /**
       * @function emailPackage - sets formSubmitted to true and kicks off email process.
       * Dispays an error message if entry is invalid or triggers the email event if
       * the entry is valid
       */

    }, {
      key: 'emailPackage',
      value: function emailPackage() {
        if (this.emailIsValid) {
          this.formSubmitted = true;
          this.container.dispatchEvent(new CustomEvent('packageEmailed', { detail: this.usersEmail }));
          this.render();
        } else if (!this.isEmailErrorDisplayed) {
          var message = document.createElement('span');
          message.classList.add('LV_validation_message');
          message.textContent = this.invalidEmailMessage;
          this.emailInput.parentNode.classList.add('LV_invalid');
          this.emailInput.parentNode.append(message);
          this.isEmailErrorDisplayed = true;
        }
      }
    }, {
      key: 'render',
      value: function render() {
        this.container.innerHTML = App.SubmittalDownload.markup(this);
        this.closeButton = this.container.querySelector(CLOSE_SELECTOR);
        this.downloadButton = this.container.querySelector(DOWNLOAD_PACKAGE_BUTTON_SELECTOR);
        this.emailButton = this.container.querySelector(EMAIL_PACKAGE_BUTTON_SELECTOR);
        this.fileAccessRadioButtons = this.container.querySelectorAll('[name="' + FILE_ACCESS_RADIO_GROUP_NAME + '"]');
        this.selectedRadioButton = this.container.querySelector('[name="' + FILE_ACCESS_RADIO_GROUP_NAME + '"]:checked') ? this.container.querySelector('[name="' + FILE_ACCESS_RADIO_GROUP_NAME + '"]:checked').value : null;
        this.packageSizeElement = this.container.querySelector(PACKAGE_SIZE_SELECTOR);
        this.emailInput = this.container.querySelector('#download-email');
        this.noCommunicationsButton = this.container.querySelector(NO_COMMUNICATIONS_SELECTOR);
        this.formSubmitted = false;

        this.addEventListeners();
      }

      /**
       * @function addEventListeners - Adds event listeners for the internal implementation
       * of this component.
       */

    }, {
      key: 'addEventListeners',
      value: function addEventListeners() {
        var _this = this;

        this.closeButton.addEventListener('click', function () {
          return _this.close();
        });
        this.fileAccessRadioButtons.forEach(function (radioButton) {
          return radioButton.addEventListener('click', function () {
            return _this.updateFileAccessSelection();
          });
        });
        this.downloadButton.addEventListener('click', function () {
          return _this.downloadPackage();
        });
        this.emailButton.addEventListener('click', function () {
          return _this.emailPackage();
        });
        this.emailInput.addEventListener('keyup', function () {
          return _this.removeEmailErrorMessage();
        });

        if (this.noCommunicationsButton) {
          this.noCommunicationsButton.addEventListener('click', function () {
            return _this.close();
          });
        }
      }

      /**
       * @function addEventListener - A method to allow clients to add event listeners
       *  to this component. Calls the addEventListener method of this components containing element.
       */

    }, {
      key: 'addEventListener',
      value: function addEventListener() {
        return this.container.addEventListener.apply(this.container, arguments);
      }

      /**
       * @function removeEventListener - A method to allow clients to remove event listeners
       *  from this component. Calls the removeEventListener method of this components containing element.
       */

    }, {
      key: 'removeEventListener',
      value: function removeEventListener() {
        return this.container.removeEventListener.apply(this.container, arguments);
      }
    }, {
      key: 'isOpen',
      get: function get() {
        return !this.container.classList.contains(HIDDEN_CLASS);
      }

      /**
       * @function fileName - The file name based on the authored prefix and the current time.
      */

    }, {
      key: 'fileName',
      get: function get() {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1;
        var yyyy = today.getFullYear();
        if (dd < 10) {
          dd = '0' + dd;
        }
        if (mm < 10) {
          mm = '0' + mm;
        }

        return this.fileNamePrefix + dd + '_' + mm + '_' + yyyy;
      }

      /**
       * @function set packageSize - Sets the package size in bytes and updates the UI.
       */

    }, {
      key: 'packageSize',
      set: function set(size) {
        this.packageSizeValue = size;
        this.packageSizeElement.textContent = this.formattedPackageSize;
      }

      /**
       * @function get packageSize - Get the package size in bytes.
       */
      ,
      get: function get() {
        return this.packageSizeValue ? this.packageSizeValue : 0;
      }

      /**
       * @function get formattedPackageSize - Get the package size as a string in bytes, kb, mb, or gb.
       */

    }, {
      key: 'formattedPackageSize',
      get: function get() {
        return this.formatPackageSize(this.packageSize);
      }
    }, {
      key: 'usersEmail',
      get: function get() {
        return this.emailInput.value;
      }

      /**
       * @function emailIsValid - checks if a valid email address has been entered
      */

    }, {
      key: 'emailIsValid',
      get: function get() {
        return (/(.+)@(.+){2,}\.(.+){2,}/.test(this.usersEmail)
        );
      }
    }]);

    return SubmittalDownload;
  }();

  App.SubmittalDownload.refs = {};
})();