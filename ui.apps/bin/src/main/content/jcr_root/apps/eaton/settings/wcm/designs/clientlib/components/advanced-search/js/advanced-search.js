/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable no-undef */
/* eslint-disable no-global-assign */
// noinspection JSConstantReassignment
//-----------------------------------
// Advanced Search Component
//-----------------------------------
var searchResult = void 0;
var uniqueSearchResultList = [];

var requirePresent = function requirePresent() {
  return typeof require !== 'undefined';
};

if (requirePresent()) {
  var globalConstants = require('../../../global/js/etn-new-global-constants');
  var constants = require('./advanced-search-constants');
  literals = globalConstants.literals;
  $ = require(literals.JQUERY);
  eventListeners = globalConstants.eventListeners;
  elementAttributes = globalConstants.elementAttributes;
  booleans = globalConstants.booleans;
  viewTypes = globalConstants.viewTypes;
  htmlTags = globalConstants.htmlTags;
  sessionStorageKeys = constants.sessionStorageKeys;
  customEvents = constants.customEvents;
  querySelectorFor = constants.querySelectorFor;
  elementClasses = constants.elementClasses;
  elementIdOf = constants.elementIdOf;
}

var externalCallWrapperPresent = function externalCallWrapperPresent() {
  return (typeof externalCallWrapper === 'undefined' ? 'undefined' : _typeof(externalCallWrapper)) !== literals.UNDEFINED && (typeof externalCallWrapper === 'undefined' ? 'undefined' : _typeof(externalCallWrapper)) !== literals.UNDEFINED;
};

var AdvancedSearch = function () {
  function AdvancedSearch() {
    _classCallCheck(this, AdvancedSearch);

    sessionStorage.removeItem(sessionStorageKeys.selectedFiles);
    this.bulkDownloadContainer = document.querySelector(querySelectorFor.bulkDownloadActivated);
    this.advancedSearchContainer = document.querySelector(querySelectorFor.advancedSearchContainer);
    this.resultsContainer = document.querySelector(querySelectorFor.advancedSearchResults);
    this.advancedSearchDataset = this.advancedSearchContainer.dataset;
    this.viewType = this.advancedSearchDataset.attributeViewType ? this.advancedSearchDataset.attributeViewType : null;
    this.searchBoxInput = document.getElementById(elementIdOf.advancedSearchBox);
    this.noResult = document.getElementById(elementIdOf.noResult);
    this.gridTemplate = document.getElementById(elementIdOf.mustacheTemplate.forGrid);
    this.listTemplate = document.getElementById(elementIdOf.mustacheTemplate.forList);
    this.listItemTemplate = document.getElementById(elementIdOf.mustacheTemplate.forListPartial);
    this.entireSearchList = null;
    this.initializeComponents();
  }

  _createClass(AdvancedSearch, [{
    key: 'initializeComponents',
    value: function initializeComponents() {
      if (requirePresent()) {
        this.viewTypeComponent = this.initializeViewTypeComponent();
        this.urlBuilder = this.initializeUrlBuilder();
        this.menuComponent = this.initializeMenuComponent();
        this.filterComponent = this.initializeFilterComponent();
        this.searchComponent = this.initializeSearchComponent();
      } else {
        this.viewTypeComponent = new ViewTypeComponent(this.viewType, this.advancedSearchContainer);
        this.urlBuilder = new AdvancedSearchUrlBuilder(this.advancedSearchDataset.resource, this.advancedSearchContainer.dataset.authenticated === literals.TRUE);
        this.menuComponent = new MenuComponent(this.advancedSearchContainer);
        this.filterComponent = new FilterComponent(this.advancedSearchContainer, this.menuComponent.removeFilterFromSelectedFilters, this.menuComponent.addSelectedFilter);
        this.searchComponent = new SearchComponent(this.advancedSearchContainer, this.searchBoxInput);
      }
    }
  }, {
    key: 'initializeViewTypeComponent',
    value: function initializeViewTypeComponent() {
      var _require = require('./view-type-component'),
          createViewTypeComponent = _require.createViewTypeComponent;

      return createViewTypeComponent(this.viewType, this.advancedSearchContainer);
    }
  }, {
    key: 'initializeUrlBuilder',
    value: function initializeUrlBuilder() {
      var _require2 = require('./advanced-search-url-builder'),
          createUrlBuilder = _require2.createUrlBuilder;

      return createUrlBuilder(this.advancedSearchDataset.resource, this.advancedSearchContainer.dataset.authenticated === literals.TRUE);
    }
  }, {
    key: 'initializeFilterComponent',
    value: function initializeFilterComponent() {
      var _require3 = require('./filter-component'),
          createFilterComponent = _require3.createFilterComponent;

      return createFilterComponent(this.advancedSearchContainer, this.menuComponent.removeFilterFromSelectedFilters, this.menuComponent.addSelectedFilter);
    }
  }, {
    key: 'initializeMenuComponent',
    value: function initializeMenuComponent() {
      var _require4 = require('./menu-component'),
          createMenuComponent = _require4.createMenuComponent;

      return createMenuComponent(this.advancedSearchContainer);
    }
  }, {
    key: 'initializeSearchComponent',
    value: function initializeSearchComponent() {
      var _require5 = require('./search-component'),
          createSearchComponent = _require5.createSearchComponent;

      return createSearchComponent(this.advancedSearchContainer, this.searchBoxInput);
    }
  }, {
    key: 'init',
    value: function init() {
      var _this = this;

      this.urlBuilder.withSortBy(this.advancedSearchDataset.defaultSortOption);
      this.initializeForView().then(function () {
        _this.filterComponent.renderFilters(searchResult);
        _this.addEventListener();
        _this.initializeRightClickEventsToTrack();
        uniqueSearchResultList = searchResult.siteSearchResults;
        _this.initializeBulkDownloadClickListener();
      });
    }
  }, {
    key: 'initializeForView',
    value: async function initializeForView() {
      var _this2 = this;

      this.viewTypeComponent.initializeViewTypeButton();
      this.getResult().then(function () {
        _this2.renderResultUsingMustacheTemplate();
      });
    }

    /* eslint-disable no-undef */

  }, {
    key: 'getResult',
    value: async function getResult() {
      var _this3 = this;

      var urlToCall = this.urlBuilder.constructUrl();
      if (!externalCallWrapperPresent() && requirePresent()) {
        var _require6 = require('../../../global/js/external-call-wrapper'),
            _externalCallWrapper = _require6.externalCallWrapper;

        _externalCallWrapper.makeCall(urlToCall).then(function (data) {
          _this3.handleData(data);
        });
      } else {
        externalCallWrapper.makeCall(urlToCall).then(function (data) {
          _this3.handleData(data);
        });
      }
    }
  }, {
    key: 'handleData',
    value: function handleData(data) {
      var _this4 = this;

      return new Promise(function () {
        searchResult = typeof data === 'string' ? JSON.parse(data) : data;
        _this4.addI18nToResponseObject();
        _this4.hideOrUnhideNoResult();
        _this4.showOrHideLoadMore(searchResult);
        var loader = document.querySelector(querySelectorFor.advancedSearchLoader);
        loader.classList.remove(elementClasses.loaderActive);
      });
    }
  }, {
    key: 'hideOrUnhideNoResult',
    value: function hideOrUnhideNoResult() {
      var advResultsContainer = document.querySelector(querySelectorFor.advancedSearchResultsBox);
      var noResultsContainer = document.querySelector(querySelectorFor.noResultContainer);
      var noResultsAFterTextSearch = noResultsContainer.querySelector(querySelectorFor.noResultsAfterTextSearch);
      if (searchResult.totalCount === 0) {
        this.filterComponent.hideFilters();
        advResultsContainer.classList.add(elementClasses.hide);
        this.resultsContainer.classList.add(elementClasses.hide);
        noResultsContainer.classList.remove(elementClasses.hide);
        if (this.searchBoxInput.value !== '') {
          this.noResult.innerHTML = this.searchBoxInput.value;
          noResultsAFterTextSearch.classList.remove(elementClasses.hide);
        } else {
          noResultsAFterTextSearch.classList.add(elementClasses.hide);
        }
      } else {
        this.filterComponent.showFilters();
        advResultsContainer.classList.remove(elementClasses.hide);
        this.resultsContainer.classList.remove(elementClasses.hide);
        noResultsContainer.classList.add(elementClasses.hide);
      }
    }
  }, {
    key: 'addI18nToResponseObject',
    value: function addI18nToResponseObject() {
      searchResult.i18n = {
        date: this.advancedSearchContainer.dataset.dateLabel,
        size: this.advancedSearchContainer.dataset.sizeLabel,
        language: this.advancedSearchContainer.dataset.languageLabel,
        tooltiptext: this.advancedSearchContainer.dataset.bulkdownloadTooltipText
      };
    }
  }, {
    key: 'renderResultUsingMustacheTemplate',
    value: function renderResultUsingMustacheTemplate() {
      var resultsToWorkWith = this.entireSearchList ? this.entireSearchList : searchResult;
      if (this.resultsContainer) {
        if (this.isViewTypeGridView()) {
          this.resultsContainer.innerHTML = this.renderForGrid(resultsToWorkWith);
        } else {
          if (this.entireSearchList) {
            resultsToWorkWith.i18n = searchResult.i18n;
          }
          this.resultsContainer.innerHTML = this.renderForList(resultsToWorkWith);
        }
      }
      var finalResult = document.getElementById(elementIdOf.finalResult);
      if (finalResult) {
        finalResult.innerHTML = searchResult.totalCount;
        this.triggerEventOnBulkDownloadContainerIfPresent(customEvents.RESPONSE_RENDERED);
      }
    }
  }, {
    key: 'renderForList',
    value: function renderForList(resultsToWorkWith) {
      return window.Mustache.render(this.listTemplate.innerHTML, resultsToWorkWith, {
        listItems: this.listItemTemplate.innerHTML
      });
    }
  }, {
    key: 'renderOnlPartial',
    value: function renderOnlPartial(resultsToWorkWith) {
      return window.Mustache.render(this.listItemTemplate.innerHTML, resultsToWorkWith);
    }

    // Handles LoadMore Hide/Show

  }, {
    key: 'showOrHideLoadMore',
    value: function showOrHideLoadMore(searchResult) {
      var loadMoreButton = document.querySelector(querySelectorFor.loadMore);
      if (searchResult.loadMoreOffset) {
        this.urlBuilder.withLoadMore(searchResult.loadMoreOffset);
        loadMoreButton.classList.remove(elementClasses.hide);
      } else if (searchResult.siteSearchResults && searchResult.siteSearchResults.length > 0 && !searchResult.loadMoreOffset) {
        this.urlBuilder.withLoadMore('');
        loadMoreButton.classList.add(elementClasses.hide);
      } else {
        loadMoreButton.classList.add(elementClasses.hide);
      }
    }
  }, {
    key: 'initializeRightClickEventsToTrack',
    value: function initializeRightClickEventsToTrack() {
      var self = this;
      document.querySelectorAll(querySelectorFor.allSearchResultLinks).forEach(function (link) {
        return link.addEventListener(eventListeners.MOUSE_DOWN, function (event) {
          var trackDownload = event.target.dataset.trackDownload;
          if (booleans.isTrue(trackDownload)) {
            var hrefAttribute = event.target.getAttribute(elementAttributes.reference);
            var evt = customEvents.newTabEventWithArgument({ link: hrefAttribute });
            evt.assetLink = hrefAttribute;
            event.stopPropagation();
            if (event.button === 0) {
              self.triggerEventOnBulkDownloadContainerIfPresent(evt);
              self.showTrackDownloadWarning();
            }
          }
        });
      });
    }
  }, {
    key: 'ajaxViewDisplay',
    value: async function ajaxViewDisplay() {
      var _this5 = this;

      this.viewType = this.advancedSearchDataset.attributeViewType;
      this.viewTypeComponent.initializeViewTypeButton();
      this.entireSearchList = null;
      this.getResult().then(function () {
        _this5.appendSearchResultWithPreviousSelection();
        _this5.renderResultUsingMustacheTemplate();
        uniqueSearchResultList = [];
        uniqueSearchResultList = searchResult.siteSearchResults;
        _this5.filterComponent.renderFilters(searchResult);
        _this5.initializeRightClickEventsToTrack();
        _this5.initializeBulkDownloadClickListener();
      });
    }
  }, {
    key: 'storePreviousSelection',
    value: function storePreviousSelection() {
      var allSelectedFiles = [];
      var allCheckedToDownload = document.querySelectorAll(querySelectorFor.allCheckedToDownload);
      if (allCheckedToDownload.length === 0 && this.selectedFilesNotEmpty()) {
        return;
      }
      allCheckedToDownload.forEach(function (input) {
        if (!input.classList.contains(elementClasses.disabledButton)) {
          uniqueSearchResultList.forEach(function (searchResult) {
            // check id and if matched pushed it to selected queue.
            if (input.id === searchResult.id) {
              allSelectedFiles.push(searchResult);
            }
          });
        }
      });
      sessionStorage.setItem(sessionStorageKeys.selectedFiles, JSON.stringify(allSelectedFiles));
    }
  }, {
    key: 'selectedFilesNotEmpty',
    value: function selectedFilesNotEmpty() {
      var selectedFilesFromStorage = sessionStorage.getItem(sessionStorageKeys.selectedFiles);
      return selectedFilesFromStorage && JSON.parse(selectedFilesFromStorage).length > 0;
    }
  }, {
    key: 'appendSearchResultWithPreviousSelection',
    value: function appendSearchResultWithPreviousSelection() {
      if (searchResult.totalCount === 0) {
        return;
      }
      var siteSearchResults = searchResult.siteSearchResults;
      var selectedFilesString = sessionStorage.getItem(sessionStorageKeys.selectedFiles);
      if (selectedFilesString !== null) {
        var selectedFiles = JSON.parse(selectedFilesString);
        selectedFiles.forEach(function (selectedFile) {
          if (!siteSearchResults.find(function (searchResult) {
            return searchResult.id === selectedFile.id;
          })) {
            searchResult.siteSearchResults.unshift(selectedFile);
          }
        });
      }
    }
  }, {
    key: 'populateCheckboxes',
    value: function populateCheckboxes() {
      var selectedFilesString = sessionStorage.getItem(sessionStorageKeys.selectedFiles);
      if (selectedFilesString !== null) {
        var selectdFiles = JSON.parse(selectedFilesString);
        selectdFiles.forEach(function (file) {
          var fileInList = document.getElementById(file.id);
          if (fileInList && !fileInList.checked) {
            fileInList.click();
          }
        });
      }
    }
  }, {
    key: 'searchBarResult',
    value: function searchBarResult() {
      var sortby = this.menuComponent.getSelectedSortBy();
      var startDate = this.filterComponent.getStartDate();
      var endDate = this.filterComponent.getEndDate();
      var searchterm = this.searchComponent.getSearchValue();
      // Character "." is replaced with "@" so that leading dot issue is handel in backend.
      if (searchterm[0] === '.') {
        searchterm = '@' + searchterm.slice(1);
      }
      this.urlBuilder.withSortBy(sortby).withStartDate(startDate).withEndDate(endDate).withSearchTerm(searchterm);
      this.callSearchAPIAndUpdateView();
    }
  }, {
    key: 'resultsFound',
    value: function resultsFound() {
      var resultList = document.querySelectorAll(this.isViewTypeGridView() ? querySelectorFor.gridResults : querySelectorFor.listResults);
      return resultList.length > 0;
    }

    /**
     * Funtion
     */

  }, {
    key: 'moveSelectedFilesToTopOfList',
    value: function moveSelectedFilesToTopOfList() {
      var _this6 = this;

      var checkedToDownload = document.querySelectorAll(querySelectorFor.allCheckedToDownload);
      var whereToInsert = this.isViewTypeGridView() ? this.resultsContainer : this.resultsContainer.querySelector(htmlTags.tableBody);
      checkedToDownload.forEach(function (inputToDownload) {
        var parentNodeToInsert = _this6.isViewTypeGridView() ? inputToDownload.parentNode : inputToDownload.parentNode.parentNode;
        whereToInsert.insertBefore(parentNodeToInsert, whereToInsert.firstChild);
      });
      this.unhideOrHideClearFilters();
    }
  }, {
    key: 'isViewTypeGridView',
    value: function isViewTypeGridView() {
      return this.viewTypeComponent.viewType === viewTypes.grid;
    }
  }, {
    key: 'callSearchAPIAndUpdateView',
    value: function callSearchAPIAndUpdateView() {
      var _this7 = this;

      this.urlBuilder.withLoadMore('');
      this.storePreviousSelection();
      this.ajaxViewDisplay().then(function () {
        _this7.populateCheckboxes();
        _this7.moveSelectedFilesToTopOfList();
      });
    }

    // Click event to handel the functionality

  }, {
    key: 'addEventListener',
    value: function addEventListener() {
      var self = this;

      this.advancedSearchContainer.addEventListener('sortOptionSelected', function (event) {
        self.urlBuilder.withStartDate(self.filterComponent.getStartDate()).withEndDate(self.filterComponent.getEndDate()).withSortBy(event.sortOption);
        self.callSearchAPIAndUpdateView();
      });

      this.advancedSearchContainer.addEventListener('viewTypeSelectionClicked', function () {
        self.advancedSearchContainer.dataset.attributeViewType = self.viewTypeComponent.viewType;
        self.triggerEventOnBulkDownloadContainerIfPresent(customEvents.VIEW_CHANGED);
        self.appendSearchResultWithPreviousSelection();
        self.renderResultUsingMustacheTemplate();
        self.populateCheckboxes();
        self.moveSelectedFilesToTopOfList();
        self.initializeBulkDownloadClickListener();
      });

      this.advancedSearchContainer.addEventListener('filterSelected', function (event) {
        self.urlBuilder.withSortBy(self.menuComponent.getSelectedSortBy()).withStartDate(self.filterComponent.getStartDate()).withEndDate(self.filterComponent.getEndDate());
        var filter = event.filter;
        if (event.toRemove !== '') {
          self.urlBuilder.removeFacet(event.toRemove);
        }
        self.urlBuilder.addFacet(filter.value);
        self.callSearchAPIAndUpdateView();
        self.menuComponent.unhideClearFilters();
        if (!self.resultsFound()) {
          self.noResult.innerHTML = filter.dataset.title;
        }
      });

      this.advancedSearchContainer.addEventListener('filterDeselected', function (event) {
        var facetId = event.facetId;
        self.urlBuilder.removeFacet(facetId).withSortBy(self.menuComponent.getSelectedSortBy()).withStartDate(self.filterComponent.getStartDate()).withEndDate(self.filterComponent.getEndDate());
        self.callSearchAPIAndUpdateView();
        self.unhideOrHideClearFilters();
      });

      this.advancedSearchContainer.addEventListener('clearFiltersClicked', function () {
        self.searchBoxInput.value = '';
        self.filterComponent.clearDateFields();
        self.filterComponent.hideDateError();
        self.urlBuilder.resetExceptSortBy();
        self.callSearchAPIAndUpdateView();
      });

      this.advancedSearchContainer.addEventListener('applyDateClicked', function (event) {
        var startDate = event.startDate;
        var endDate = event.endDate;
        var sortby = self.menuComponent.getSelectedSortBy();
        self.urlBuilder.withSortBy(sortby).withStartDate(startDate).withEndDate(endDate);
        self.menuComponent.unhideClearFilters();
        self.callSearchAPIAndUpdateView();
      });

      this.advancedSearchContainer.addEventListener('resetDatesClicked', function () {
        self.urlBuilder.withSortBy(self.menuComponent.getSelectedSortBy()).withStartDate('').withEndDate('');
        self.callSearchAPIAndUpdateView();
        self.unhideOrHideClearFilters();
      });

      this.advancedSearchContainer.addEventListener('searchEvent', function () {
        self.searchBarResult();
        if (!self.resultsFound()) {
          self.noResult.innerHTML = self.searchComponent.getSearchValue();
        }
        self.menuComponent.unhideClearFilters();
      });

      document.querySelector(querySelectorFor.loadMore).onclick = function (event) {
        self.entireSearchList = { siteSearchResults: [] };
        uniqueSearchResultList.forEach(function (uniqueSearchResult) {
          self.entireSearchList.siteSearchResults.push(uniqueSearchResult);
        });
        self.getResult().then(function () {
          self.loadMoreCallBack(self);
          uniqueSearchResultList = [];
          uniqueSearchResultList = [].concat(_toConsumableArray(new Set(self.entireSearchList.siteSearchResults)));
          self.triggerEventOnBulkDownloadContainerIfPresent(customEvents.RESPONSE_RENDERED);
          if (searchResult.siteSearchResults && searchResult.siteSearchResults.length > 0 && !searchResult.loadMoreOffset) {
            event.target.classList.add(elementClasses.hide);
          }
          self.moveSelectedFilesToTopOfList();
          self.initializeBulkDownloadClickListener();
        });
      };
    }
  }, {
    key: 'unhideOrHideClearFilters',
    value: function unhideOrHideClearFilters() {
      var count = this.menuComponent.selectedFilterCount();
      if (count === 0 && this.searchBoxInput.value === '' && this.filterComponent.getStartDate() === '' && this.filterComponent.getEndDate() === '') {
        this.menuComponent.hideClearFilters();
      } else {
        this.menuComponent.unhideClearFilters();
      }
    }
  }, {
    key: 'loadMoreCallBack',
    value: function loadMoreCallBack(advancedSearch) {
      searchResult.siteSearchResults.forEach(function (result) {
        advancedSearch.entireSearchList.siteSearchResults.push(result);
      });
      if (advancedSearch.isViewTypeGridView() || !advancedSearch.viewType) {
        advancedSearch.resultsContainer.insertAdjacentHTML('beforeend', advancedSearch.renderForGrid(searchResult));
      } else {
        advancedSearch.resultsContainer.querySelector(htmlTags.tableBody).insertAdjacentHTML('beforeend', advancedSearch.renderOnlPartial(searchResult));
      }
    }
  }, {
    key: 'renderForGrid',
    value: function renderForGrid(resultsToWorkWith) {
      return window.Mustache.render(this.gridTemplate.innerHTML, resultsToWorkWith);
    }
  }, {
    key: 'triggerEventOnBulkDownloadContainerIfPresent',
    value: function triggerEventOnBulkDownloadContainerIfPresent(event) {
      if (this.bulkDownloadContainer) {
        this.bulkDownloadContainer.dispatchEvent(event);
      }
    }

    // To show the list result using the mustache.js

  }, {
    key: 'showTrackDownloadWarning',
    value: function showTrackDownloadWarning() {
      var trackDownloadWarningDialog = document.getElementById(elementIdOf.trackDownloadDialog);
      trackDownloadWarningDialog.classList.remove(elementClasses.hide);
      trackDownloadWarningDialog.querySelector(querySelectorFor.okayTrack).onclick = function () {
        trackDownloadWarningDialog.classList.add(elementClasses.hide);
      };
    }
  }, {
    key: 'initializeBulkDownloadClickListener',
    value: function initializeBulkDownloadClickListener() {
      var self = this;
      document.querySelectorAll(querySelectorFor.allToDownload).forEach(function (toDownload) {
        toDownload.onclick = function (event) {
          var clickedElement = event.target;
          var checkedToDownload = document.querySelectorAll(querySelectorFor.allCheckedToDownload);
          var tempCount = checkedToDownload.length;
          var actualLimitSet = parseInt(document.getElementById(elementIdOf.selectedFilesDrawerBox).dataset.downloadFileCountLimit);
          // For size limit, check this condition: "checkSize > maxZipLimit" instaed of 'actualLimitSet < tempCount' in folloing if.
          if (actualLimitSet < tempCount) {
            return false;
          }
          if (clickedElement.checked) {
            self.addFileWithIdToSelectedFiles(clickedElement.id);
          } else if (!clickedElement.checked) {
            self.removeFileWithIdFromSelectedFiles(clickedElement.id);
          }
          addRemovefileForBDE();
        };
      });
    }
  }, {
    key: 'addFileWithIdToSelectedFiles',
    value: function addFileWithIdToSelectedFiles(id) {
      var allSelectedFiles = JSON.parse(sessionStorage.getItem(sessionStorageKeys.selectedFiles)) || [];
      uniqueSearchResultList.forEach(function (searchResult) {
        // check id and if matched pushed it to selected queue.
        if (id === searchResult.id && (allSelectedFiles.length === 0 || !allSelectedFiles.find(function (file) {
          return file.id === searchResult.id;
        }))) {
          allSelectedFiles.push(searchResult);
        }
      });
      sessionStorage.setItem(sessionStorageKeys.selectedFiles, JSON.stringify(allSelectedFiles));
    }
  }, {
    key: 'removeFileWithIdFromSelectedFiles',
    value: function removeFileWithIdFromSelectedFiles(id) {
      var allSelectedFiles = JSON.parse(sessionStorage.getItem(sessionStorageKeys.selectedFiles));
      var newSelectedFiles = [];
      allSelectedFiles.forEach(function (selectedFile) {
        // check id and if matched pushed it to selected queue.
        if (id !== selectedFile.id) {
          newSelectedFiles.push(selectedFile);
        }
      });
      sessionStorage.setItem(sessionStorageKeys.selectedFiles, JSON.stringify(newSelectedFiles));
    }
  }]);

  return AdvancedSearch;
}();

/* Custom js for Dashboard document js */


document.addEventListener('DOMContentLoaded', function () {
  var advanceSearchContainer = document.getElementById('advance__search-result-doc');
  if (advanceSearchContainer) {
    new AdvancedSearch().init();
  }
  var dateInput = $(querySelectorFor.dateInput);
  if (typeof dateInput.datepicker !== 'undefined') {
    dateInput.datepicker({
      dateFormat: 'dd-mm-yy',
      maxDate: 0,
      changeYear: true
    });
  }
});
/* Custom js for Dashboard document js*/

if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
  module.exports = { AdvancedSearch: AdvancedSearch };
}