/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//-----------------------------------
// What's New Component
//-----------------------------------

var WhatsNew = function () {
  function WhatsNew(arg) {
    _classCallCheck(this, WhatsNew);

    this.expiryTime = 3600; // in seconds
    this.country = document.getElementsByName('country')[0].getAttribute('content');
    this.localStorage = 'Eaton-Whats-New-' + this.country;
    this.container = document.getElementById('whatsnew__accordion');
    this.template = document.getElementById('mustache-whats-new');
    this.whatsNewData = {};
    this.groupings = [{
      name: 'last7days'
    }, {
      name: 'last14days'
    }, {
      name: 'last21days'
    }, {
      name: 'last30days'
    }];
  }

  _createClass(WhatsNew, [{
    key: 'init',
    value: function init() {
      this.setWhatsNew();
    }
  }, {
    key: 'getWhatsNew',
    value: function getWhatsNew() {
      var _this = this;

      var loader = $('.loader');

      $.ajax({
        type: 'GET',
        url: $('#whatnewresourcepath').text() + '.json?=' + new Date().getTime(),
        success: function success(data) {
          loader.removeClass('loader-active');
          _this.whatsNewData.expires = new Date(new Date().getTime() + _this.expiryTime * 1000);
          _this.whatsNewData.functions = {};
          _this.whatsNewData.groups = [];

          _this.groupings.forEach(function (group, ind) {

            // Get just the Date from DateTime
            data[group.name].forEach(function (link) {
              link.assetPubDate = link.assetPublicationDate.split(' ')[0];
            });

            // Push into array for templating
            _this.whatsNewData.groups.push({
              expanded: ind === 0 ? true : false,
              index: ind,
              name: group.name,
              show: data[group.name].length > 0,
              label: document.getElementById('label-' + group.name).dataset.label,
              links: data[group.name]
            });
          });

          _this.unsetWhatsNew();
          localStorage.setItem(_this.localStorage, JSON.stringify(_this.whatsNewData));
          _this.renderWhatsNew(_this.whatsNewData);
        },
        error: function error(e) {
          loader.removeClass('loader-active');
          console.log(e);
        }
      });
    }
  }, {
    key: 'setWhatsNew',
    value: function setWhatsNew() {
      var cachedWhatsNew = localStorage.getItem(this.localStorage);
      var expired = false;
      if (cachedWhatsNew) {
        var loader = $('.loader');
        loader.removeClass('loader-active');
        var whatsNewObj = JSON.parse(cachedWhatsNew);
        expired = new Date(whatsNewObj.expires) < new Date();
        this.renderWhatsNew(whatsNewObj); // Render cached data
      }
      if (!cachedWhatsNew || expired) {
        this.getWhatsNew(); // Request new data
      }
    }
  }, {
    key: 'unsetWhatsNew',
    value: function unsetWhatsNew() {
      localStorage.removeItem(this.localStorage);
    }
  }, {
    key: 'renderWhatsNew',
    value: function renderWhatsNew(obj) {
      if (this.container) {
        console.log(obj);
        var template = this.template.innerHTML;
        var output = window.Mustache.render(template, obj);
        this.container.innerHTML = output;
      }
    }
  }]);

  return WhatsNew;
}();

(function () {
  var whatsnew = document.getElementById('whatsnew__accordion');
  if (whatsnew) {
    new WhatsNew().init();
  }
})();