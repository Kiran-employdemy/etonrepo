/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  var SUBMITTAL_CLASS = 'submittal-builder';
  var FLOATING_BUTTONS_CLASS = SUBMITTAL_CLASS + '__floating-button__container';
  var FLOATING_BUTTON_CLASS = SUBMITTAL_CLASS + '__floating-button';
  var DOWNLOAD_BUTTON_CLASS = SUBMITTAL_CLASS + '__download-button';
  var PREVIEW_BUTTON_CLASS = SUBMITTAL_CLASS + '__preview-button';
  var BACK_TO_TOP_BUTTON_CLASS = SUBMITTAL_CLASS + '__back-to-top';
  var BACK_TO_TOP_BUTTON_SELECTOR = '.' + BACK_TO_TOP_BUTTON_CLASS;
  var SUBMITTAL_SELECTOR = '.' + SUBMITTAL_CLASS;
  var INTRO_SELECTOR = SUBMITTAL_SELECTOR + '__intro';
  var FILTERS_SELECTOR = SUBMITTAL_SELECTOR + '__filters';
  var RESULTS_SELECTOR = SUBMITTAL_SELECTOR + '__results';
  var DOWNLOAD_SELECTOR = SUBMITTAL_SELECTOR + '__download';
  var DOWNLOAD_BUTTON_SELECTOR = '.' + DOWNLOAD_BUTTON_CLASS;
  var PREVIEW_BUTTON_SELECTOR = '.' + PREVIEW_BUTTON_CLASS;
  var WELCOME_MESSAGE_CLASS = SUBMITTAL_CLASS + '__welcome-message';
  var WELCOME_MESSAGE_SELECTOR = '.' + WELCOME_MESSAGE_CLASS;

  var App = window.App || {};
  App.SubmittalBuilder = function () {
    _createClass(SubmittalBuilder, null, [{
      key: 'markup',
      value: function markup() {
        /* This UI component has no template, it expects the submittal intro, filters,
         * package, results,  and download UI components to exist under the container. */
        return '';
      }
    }]);

    function SubmittalBuilder(container) {
      _classCallCheck(this, SubmittalBuilder);

      // The constructor should only contain the boiler plate code for finding or creating the reference.
      if (typeof container.dataset.ref === 'undefined') {
        this.ref = Math.random();
        App.SubmittalBuilder.refs[this.ref] = this;
        container.dataset.ref = this.ref;
        this.init(container);
      } else {
        // If this element has already been instantiated, use the existing reference.
        return App.SubmittalBuilder.refs[container.dataset.ref];
      }
    }

    _createClass(SubmittalBuilder, [{
      key: 'init',
      value: function init(container) {
        this.container = container;
        var dataset = this.container.dataset;
        this.resultServletUrl = dataset.resultServletUrl;
        this.downloadServletUrl = dataset.downloadServletUrl;
        this.emailServletUrl = dataset.emailServletUrl;
        this.totalCount = parseInt(dataset.totalCount);
        this.documentsPluralText = dataset.documentsPluralText;
        this.documentsSingularText = dataset.documentsSingularText;
        this.resultsPluralText = dataset.resultsPluralText;
        this.resultsSingularText = dataset.resultsSingularText;
        this.intro = new App.SubmittalIntro(this.container.querySelector(INTRO_SELECTOR));

        this.filters = new App.Filters(this.container.querySelector(FILTERS_SELECTOR));

        this.results = new App.SubmittalResults(this.container.querySelector(RESULTS_SELECTOR));
        this.download = new App.SubmittalDownload(this.container.querySelector(DOWNLOAD_SELECTOR));

        this.filters.resultCount = this.totalCount;
        this.intro.resultCount = this.totalCount;
        this.intro.resultsText = this.resultsText;
        this.intro.documentsText = this.documentsText;

        this.intro.maximumPackageFileSizeValue = this.download.formatPackageSize(this.results.zipSizeLimit, 0);
        this.results.documentsText = this.documentsText;
        this.results.resultsText = this.resultsText;
        this.results.resultCount = this.totalCount;
        this.results.hideResultsList = true;

        this.submittalScope = (dataset.submittalScope ? JSON.parse(dataset.submittalScope) : {}).families;
        if (!this.submittalScope) {
          this.submittalScope = [];
        }

        this.submittalAttributes = (dataset.submittalAttributes ? JSON.parse(dataset.submittalAttributes) : {}).attributes;
        if (!this.submittalAttributes) {
          this.submittalAttributes = [];
        }

        this.results.propertyList = this.submittalAttributes;
        this.filters.propertyList = this.submittalAttributes;

        if (typeof this.container.dataset.filters !== 'undefined') {
          this.filters.filterList = JSON.parse(this.container.dataset.filters);
        }

        if (typeof this.container.dataset.results !== 'undefined') {
          this.results.resultList = JSON.parse(this.container.dataset.results);
        }

        this.intro.activeFilters = this.filters.activeFilterList;

        this.servletReady = fetch('/libs/granite/csrf/token.json', {
          credentials: 'same-origin'
        }).then(function (response) {
          return response.json();
        }).then(function (json) {
          return json.token;
        });

        this.render();
      }

      /**
       * @function openDownloadDialog Closes the package and download components
       * and opens the filters component.
      */

    }, {
      key: 'openFilters',
      value: function openFilters() {
        if (!this.filters.isOpen) {
          this.results.showAllResults();
          this.download.close();
          this.filters.open();
        }
      }

      /**
       * @function openPackage Closes the results, filters and download components
       * and opens the package component.
      */

    }, {
      key: 'openPackage',
      value: function openPackage() {
        if (!this.results.showingOnlyPackage) {
          this.updateWelcomeMessageVisibility();
          this.results.showOnlyPackage();
          this.filters.close();
          this.download.close();
          this.intro.showOnlyPackage();
        }
      }

      /**
       * @function closePackage Closes the download and package components and opens
       * the results and filters components.
      */

    }, {
      key: 'closePackage',
      value: function closePackage() {
        if (this.results.showingOnlyPackage) {
          this.results.showAllResults();
          this.download.close();
          this.intro.hideOnlyPackage();

          /**
           * Only open filters for non-mobile devices
           */
          if (!window.matchMedia(App.global.constants.MEDIA_QUERIES.MOBILE).matches) {
            this.filters.open();
          }
        }
      }

      /**
       * @function openDownloadDialog Closes the filters and package components
       * and opens the download component.
      */

    }, {
      key: 'openDownloadDialog',
      value: function openDownloadDialog() {
        if (!this.download.isOpen) {
          // Should the filters only be closed on mobile?
          // this.filters.close();
          // this.results.showAllResults();
          this.download.open();
        }
      }
    }, {
      key: 'updateResultCount',
      value: function updateResultCount() {
        if (this.results.size === 0) {
          this.downloadButton.setAttribute('disabled', true);
        } else {
          this.downloadButton.removeAttribute('disabled');
        }
        this.documentCountElement.innerHTML = this.results.files.length;
        this.intro.packageSize = this.results.files.length;

        this.intro.packageFileSize = this.download.formatPackageSize(this.results.estimatedZipSize);

        this.intro.resultsText = this.resultsText;
        this.intro.documentsText = this.documentsText;
        this.results.documentsText = this.documentsText;
        this.results.resultsText = this.resultsText;
        this.download.packageSize = this.results.estimatedZipSize;

        // update datalayer
        this.updateDataLayer();
        this.updateFloatingPreviewButtonDisabledState();
      }
    }, {
      key: 'downloadPackage',


      /**
       * @function downloadPackage If the 'option' parameter is 'download' then
       * will initiate the package download based on the package component. Otherwise
       * it will send a request to the server to send an email with the package.
      */
      value: function downloadPackage(option) {
        var fileName = this.download.fileName;
        var mergeAssetsFileName = this.download.mergeAssetsFileName;
        if (option === 'email') {
          var emailToRecipients = [document.getElementById('download-email').value];
          var requestParams = {
            fileName: fileName,
            mergeAssetsFileName: mergeAssetsFileName,
            emailToRecipients: emailToRecipients,
            assetPaths: this.results.packageList
          };
          $.ajax({
            type: 'POST',
            url: this.emailServletUrl,
            data: JSON.stringify(requestParams),
            headers: { 'Content-Type': 'application/json' },
            success: function success(resultData) {}
          });
        }
        if (option === 'download') {
          var _requestParams = {
            fileName: fileName,
            mergeAssetsFileName: mergeAssetsFileName,
            option: option,
            assetPaths: this.results.packageList
          };
          $.ajax({
            type: 'POST',
            url: this.downloadServletUrl,
            data: JSON.stringify(_requestParams),
            headers: { 'Content-Type': 'application/json' },
            success: function success(resultData) {
              if (resultData) {
                var byteCharacters = atob(resultData);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                  byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var blob = void 0;
                var fileType = 'application/zip';
                var fileNameExt = fileName.concat('.zip');
                if (window.navigator.msSaveBlob) {
                  blob = new Blob([byteArray], { type: fileType });
                  window.navigator.msSaveBlob(blob, fileNameExt);
                } else {
                  var _blob = new Blob([byteArray], { type: fileType });
                  var link = document.createElement('a');
                  link.href = window.URL.createObjectURL(_blob);
                  link.download = fileNameExt;
                  document.body.appendChild(link);
                  link.click();
                  document.body.removeChild(link);
                }
              }
            }
          });
        }
      }
    }, {
      key: 'loadResults',
      value: function loadResults(startingRecord) {
        var scope = this.submittalScope.map(function (family) {
          return family.id;
        });
        var facets = this.submittalAttributes.map(function (attribute) {
          return attribute.name;
        });
        var activeIds = this.filters.activeFilterList.map(function (filter) {
          return filter.id;
        });
        var url = this.resultServletUrl + '?startingRecord=' + encodeURIComponent(startingRecord) + '&activeFilters=' + encodeURIComponent(JSON.stringify(activeIds)) + '&scope=' + encodeURIComponent(JSON.stringify(scope)) + '&facets=' + encodeURIComponent(JSON.stringify(facets)) + '&sortOrder=' + encodeURIComponent(JSON.stringify(this.results.sortOrder));

        return fetch(url, { credentials: 'same-origin' }).then(function (response) {
          return response.json();
        });
      }
    }, {
      key: 'loadMore',
      value: function loadMore(startingRecord) {
        var _this = this;

        this.loadResults(startingRecord).then(function (_ref) {
          var results = _ref.results;
          return _this.results.resultList = _this.results.resultList.concat(results);
        });
      }
    }, {
      key: 'updateResults',
      value: function updateResults() {
        var _this2 = this;

        this.loadResults(0).then(function (_ref2) {
          var filters = _ref2.filters,
              results = _ref2.results,
              totalCount = _ref2.totalCount;

          _this2.totalCount = totalCount;
          _this2.filters.resultCount = _this2.totalCount;
          _this2.intro.resultCount = _this2.totalCount;
          _this2.results.resultCount = _this2.totalCount;
          _this2.results.resultsText = _this2.resultsText;
          _this2.results.resultList = results;
          _this2.filters.filterList = filters;
          _this2.intro.resultsText = _this2.resultsText;
          _this2.intro.documentsText = _this2.documentsText;
          _this2.intro.activeFilters = _this2.filters.activeFilterList;
          _this2.updateResultCount();
        });
      }
      /**
       * @function getFileExtensionFromUrl
       * @param {string} url
       * @returns {string} returns the file extension
      */

    }, {
      key: 'getFileExtensionFromUrl',
      value: function getFileExtensionFromUrl(url) {
        return url.split('.').pop();
      }
      /**
       * @function getFileNameFromUrl
       * @param {object} result an object that contains all available data on the file
       * @returns {string} returns the result.title if it has a value, otherwise returns the filename from the URL
      */

    }, {
      key: 'getFileNameFromUrl',
      value: function getFileNameFromUrl(result) {
        var titleKeyValue = typeof result.title !== 'undefined' ? result.title : '';
        var titleFromUrl = result.url.split('/').pop().split('.').shift();
        return titleKeyValue !== '' ? titleKeyValue : titleFromUrl;
      }
      /**
       * @function updateDataLayer creates an array of results with a simplified data structure for use by the dataLayer
      */

    }, {
      key: 'updateDataLayer',
      value: function updateDataLayer() {
        var _this3 = this;

        var simplifiedFileInfo = this.results.files.map(function (result) {
          return {
            'data-analytics-assetId': result.url,
            'data-analytics-assetTitle': _this3.getFileNameFromUrl(result),
            'data-analytics-assetType': _this3.getFileExtensionFromUrl(result.url)
          };
        });
        /**
         * Temporarily disabling eslint to access the global dataLayer object defined in
         * ui.apps/src/main/content/jcr_root/apps/eaton/components/structure/eaton-edit-template-page/datalayer.html
         */
        /* eslint-disable no-undef */
        dataLayer.submittalBuilderPackage = simplifiedFileInfo;
        /* eslint-enable */
      }
      /**
       * @function updateWelcomeMessageVisibility
       * hide the welcome message if a filter has been chosen
       * show the welcome message when no filter has been chosen
      */

    }, {
      key: 'updateWelcomeMessageVisibility',
      value: function updateWelcomeMessageVisibility() {
        if (this.filters.activeFilterList.length > 0 || this.results.showingOnlyPackage || this.results.size > 0) {
          this.welcomeMessage.classList.add('hidden');
          this.results.hideResultsList = false;
        } else {
          this.welcomeMessage.classList.remove('hidden');
          this.results.hideResultsList = true;
        }
      }
      /**
       * @function updateFloatingPreviewButtonDisabledState
       * enable or disable the floating preview button's disabled state to match the tab version
      */

    }, {
      key: 'updateFloatingPreviewButtonDisabledState',
      value: function updateFloatingPreviewButtonDisabledState() {
        this.container.querySelector(PREVIEW_BUTTON_SELECTOR).disabled = this.results.files.length === 0 ? 'disabled' : '';
      }
    }, {
      key: 'clearAllFilters',
      value: function clearAllFilters() {
        var _this4 = this;

        this.filters.activeFilterList.map(function (filter) {
          return _this4.filters.deactiveFilter(filter.name);
        });
        this.filters.selectedFilters = [];
        this.updateResults();
      }
    }, {
      key: 'clearFilter',
      value: function clearFilter(filter) {
        var removeFilterIds = filter.activeFilterValues.map(function (filterValue) {
          return filterValue.id;
        });
        var newActiveFilters = this.filters.selectedFilters;
        // remove all active filter values from the given filter and updated selectedFilter list
        Object.keys(this.filters.selectedFilters).map(function (key) {
          return removeFilterIds.indexOf(newActiveFilters[key].id) > -1 && delete newActiveFilters[key];
        });
        this.filters.selectedFilters = newActiveFilters;
        this.updateResults();
      }
    }, {
      key: 'render',
      value: function render() {
        var floatingButtons = document.createElement('div');

        floatingButtons.classList.add(FLOATING_BUTTONS_CLASS);
        floatingButtons.innerHTML = '\n\n          <button data-analytics-name="submittal-builder-floating-buttons-open-download-modal"\n            ' + (this.results.size === 0 ? 'disabled' : '') + ' class="button--reset ' + FLOATING_BUTTON_CLASS + ' ' + DOWNLOAD_BUTTON_CLASS + '"  style="display:none">\n            <i class="icon icon-download ' + FLOATING_BUTTON_CLASS + '__icon" aria-hidden="true"></i>\n          </button>\n          <button data-analytics-name="submittal-builder-floating-buttons-view-package"\n            class="button--reset ' + FLOATING_BUTTON_CLASS + ' ' + PREVIEW_BUTTON_CLASS + '"\n            ' + (this.filters.activeFilterList.length === 0 ? 'disabled' : '') + ' style="display:none">\n            <span class="' + PREVIEW_BUTTON_CLASS + '__document-count">' + this.results.size + '</span>\n            <i class="icon icon-folder ' + FLOATING_BUTTON_CLASS + '__icon" aria-hidden="true"></i>\n          </button>\n          <button class="back-to-top button--reset sumb" data-scroll-to="body" >\n            <span class="sr-only">Back to top of the page</span>\n            <i class="icon icon-chevron-up ' + FLOATING_BUTTON_CLASS + '__icon" aria-hidden="true"></i>\n          </button>\n\n\n        ';
        this.container.appendChild(floatingButtons);

        this.documentCountElement = floatingButtons.querySelector('.' + PREVIEW_BUTTON_CLASS + '__document-count');
        this.documentCountElement = floatingButtons.querySelector('.' + PREVIEW_BUTTON_CLASS + '__document-count');
        this.downloadButton = this.container.querySelector(DOWNLOAD_BUTTON_SELECTOR);
        this.previewButton = this.container.querySelector(PREVIEW_BUTTON_SELECTOR);
        this.backToTopButton = this.container.querySelector(BACK_TO_TOP_BUTTON_SELECTOR);
        this.welcomeMessage = this.container.querySelector(WELCOME_MESSAGE_SELECTOR);

        this.addEventListeners();
      }
    }, {
      key: 'addEventListeners',
      value: function addEventListeners() {
        var _this5 = this;

        this.intro.addEventListener('filterButtonClicked', function () {
          return _this5.openFilters();
        });
        this.intro.addEventListener('packageButtonClicked', function () {
          if (_this5.results.showingOnlyPackage) {
            _this5.closePackage();
          } else {
            _this5.openPackage();
          }
        });

        this.intro.addEventListener('closePackageViewClicked', function () {
          _this5.closePackage();
          _this5.intro.hideEditPackageMode();
        });

        this.intro.addEventListener('editSubmittalPackageButtonClicked', function () {
          _this5.results.showEditPackageMode();
          _this5.intro.showEditPackageMode();
        });

        this.intro.addEventListener('finishEditsButtonClicked', function () {
          _this5.results.hideEditPackageMode();
          _this5.intro.hideEditPackageMode();
        });

        this.intro.addEventListener('filterRemoved', function (_ref3) {
          var name = _ref3.detail.name;

          _this5.filters.deactiveFilter(name);
          _this5.updateResults();
        });

        this.intro.addEventListener('downloadButtonClicked', function () {
          return _this5.openDownloadDialog();
        });
        this.downloadButton.addEventListener('click', function () {
          return _this5.openDownloadDialog();
        });
        this.previewButton.addEventListener('click', function () {
          return _this5.openPackage();
        });
        this.download.addEventListener('packageDownloaded', function () {
          return _this5.downloadPackage('download');
        });
        this.download.addEventListener('packageEmailed', function () {
          return _this5.downloadPackage('email');
        });
        this.results.addEventListener('resultSelected', function () {
          return _this5.updateResultCount();
        });
        this.results.addEventListener('resultDeselected', function () {
          return _this5.updateResultCount();
        });
        this.results.addEventListener('allResultsDeselected', function () {
          return _this5.updateResultCount();
        });
        this.results.addEventListener('allResultsSelected', function () {
          return _this5.updateResultCount();
        });
        this.results.addEventListener('orderChanged', function () {
          return _this5.updateResults();
        });
        this.results.addEventListener('loadMore', function (_ref4) {
          var startingRecord = _ref4.detail.startingRecord;
          return _this5.loadMore(startingRecord);
        });
        this.intro.addEventListener('clearAllFilters', function () {
          return _this5.clearAllFilters();
        });

        // this.backToTopButton.addEventListener('click', () => {
        //   window.scroll({
        //     top: 0,
        //     behavior: 'smooth'
        //   });
        // });

        /** Fire event when filters are updated so filter chips in the intro component updates with new active filters updates */
        this.filters.addEventListener('filterListUpdated', function () {
          _this5.intro.activeFilters = _this5.filters.activeFilterList;
          _this5.updateWelcomeMessageVisibility();
        });

        this.filters.addEventListener('filterRemoved', function () {
          return _this5.updateResults();
        });
        this.filters.addEventListener('clearSelection', function (e) {
          return _this5.clearFilter(e.detail.component);
        });
        this.filters.addEventListener('filterSelected', function () {
          return _this5.updateResults();
        });
        this.filters.addEventListener('clearAllFilters', function () {
          return _this5.clearAllFilters();
        });
      }
    }, {
      key: 'resultsText',
      get: function get() {
        return typeof this.results.resultCountValue === 'undefined' || this.results.resultCountValue > 1 ? this.resultsPluralText : this.resultsSingularText;
      }
    }, {
      key: 'documentsText',
      get: function get() {
        return this.results.files.length === 1 && this.filters.activeFilterList.length > 0 ? this.documentsSingularText : this.documentsPluralText;
      }
    }]);

    return SubmittalBuilder;
  }();

  App.SubmittalBuilder.refs = {};
})();