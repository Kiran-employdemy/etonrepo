/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var CMD_VEHICLE = 'vehicle';
$(document).ready(function () {

  if (performance.navigation.type === 2) {
    location.reload(true);
  }

  $('.reset').on('click', function () {
    location.reload(true);
  });

  $('.guide-header-bar-wrapper, .guide-mobile-navigator, .wizard-navigators').hide();
  $('.ctabutton').addClass('container');
  $('.form-parsys > .ctabutton').removeClass('container');

  var placeholderValue = $('#emptyValue').html();

  Array.prototype.remove = function (value) {
    var idx = this.indexOf(value);
    if (idx !== -1) {
      return this.splice(idx, 1);
    }
    return false;
  };

  function arraySearch(nameKey, ArrayName) {
    for (var i = 0; i < ArrayName.length; i++) {
      if (ArrayName[i].formElementName === nameKey) {
        return i;
      }
    }
  }

  var blockListPropSub = [];
  var axleDataAr = [];

  $("select[id^='guideContainer-rootPanel-panel'],select[id^='guideContainer-rootPanel-guidedropdownlist']").on('change', function (e) {

    $(this).attr('checked', 'true');
    var formName = $(this).parent().attr('data-info-type');
    var formElementName = $(this).parent().attr('id');
    var formElementValue = $(this).val();

    var data = {};
    var insertObj = {
      formElementName: formElementName,
      formElementValue: formElementValue
    };
    if (formName === 'axle') {
      var tempResult = arraySearch(formElementName, axleDataAr);
      axleDataAr[tempResult] = insertObj;
      data = {
        blockListPropSub: JSON.stringify(axleDataAr)
      };
    } else {
      var _tempResult = arraySearch(formElementName, blockListPropSub);
      blockListPropSub[_tempResult] = insertObj;
      data = {
        blockListPropSub: JSON.stringify(blockListPropSub)
      };
    }
    $.ajax({
      url: '/eaton/vgproductselector/fetchoptions',
      data: data,
      success: function success(data) {
        appendOptions(data, formName);
      },
      error: function error(data) {},

      timeout: 30000,
      type: 'POST'
    });

    function appendOptions(data, cmd) {
      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== undefined && _typeof(data.response) !== undefined && data.response && data.response.status === 'Success' && _typeof(data.response.binning) !== undefined && _typeof(data.response.binning.binningSet) !== undefined) {
        for (var _i in data.response.binning.binningSet) {
          var binningJsonObject = data.response.binning.binningSet[_i];
          if ((typeof binningJsonObject === 'undefined' ? 'undefined' : _typeof(binningJsonObject)) !== undefined && formElementName !== binningJsonObject.bsId && binningJsonObject.bsId !== 'Portfolio_Rating') {
            var element = $('#' + binningJsonObject.bsId);
            $(element).children().empty();
            var _isElementChecked = $(element).children().attr('checked');

            if (_isElementChecked !== 'checked') {
              $(element).children().append("<option selected='selected'>" + placeholderValue + '</option>');
            }
            if (_typeof(binningJsonObject.bin) !== undefined) {
              for (var _j in binningJsonObject.bin) {
                var _isValueAppened = 'false';
                if (binningJsonObject.bin[_j].label !== undefined) {
                  var selectOption = document.createElement('option');
                  selectOption.text = binningJsonObject.bin[_j].label;

                  /* Checking already selected dropdown elements */
                  var filteredElementsArray = [];
                  if (cmd === CMD_VEHICLE) {
                    selectOption.value = binningJsonObject.bin[_j].label + binningJsonObject.bsId;
                    filteredElementsArray = blockListPropSub;
                  } else {
                    selectOption.value = binningJsonObject.bin[_j].value;
                    filteredElementsArray = axleDataAr;
                  }
                  if ((typeof filteredElementsArray === 'undefined' ? 'undefined' : _typeof(filteredElementsArray)) !== undefined) {
                    for (var _k in filteredElementsArray) {
                      if (cmd === CMD_VEHICLE && filteredElementsArray[_k].formElementValue === binningJsonObject.bin[_j].label) {
                        $(element).children().append(selectOption);
                        _isValueAppened = 'true';
                      } else if (cmd !== CMD_VEHICLE && filteredElementsArray[_k].formElementValue === binningJsonObject.bin[_j].value) {
                        $(element).children().append(selectOption);
                        _isValueAppened = 'true';
                      }
                    }
                  }
                  if (_isValueAppened !== 'true') {
                    $(element).children().append(selectOption);
                  }
                }
              }
            }
          }
        }
      }
    }
  });

  $("select[id^='guideContainer-rootPanel-panel'],select[id^='guideContainer-rootPanel-guidedropdownlist']").each(function () {

    var formElementName = $(this).parent().attr('id');
    var formName = $(this).parent().attr('data-info-type');
    var formElementValue = $(this).val();
    var tempObj = {
      formElementName: formElementName,
      formElementValue: formElementValue
    };
    //
    if (formName === 'axle') {
      axleDataAr.push(tempObj);
    } else {
      blockListPropSub.push(tempObj);
    }
  });
});