/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable no-undef */
/* eslint-disable no-global-assign */
// noinspection JSConstantReassignment
//-----------------------------------
// Product Grid Comparison Widget Component
//-----------------------------------

var requirePresent = function requirePresent() {
  return typeof require !== 'undefined';
};

if (requirePresent()) {
  var globalConstants = require('../../../global/js/etn-new-global-constants');
  var constants = require('./comparison-widget-constants');
  literals = globalConstants.literals;
  $ = require(literals.JQUERY);
  eventListeners = globalConstants.eventListeners;
  comparisonWidgetQuerySelectors = constants.comparisonWidgetQuerySelectors;
  comparisonWidgetClasses = constants.comparisonWidgetClasses;
  comparisonMustacheElements = constants.comparisonMustacheElements;
}

var Comparison = function () {
  function Comparison() {
    _classCallCheck(this, Comparison);

    // eslint-disable-next-line no-undef
    this.counter = 0;
    this.compareResult = '';
    this.iduncheck = [];

    this.comparisonWidget = document.querySelector(comparisonWidgetQuerySelectors.comparisonWidget);
    this.comparisonWidgetItemLabel = document.querySelectorAll(comparisonWidgetQuerySelectors.comparisonWidgetItemLabel);
    this.clearSelection = document.querySelector(comparisonWidgetQuerySelectors.clearSelection);
    this.comparisonWidgetItemCountDiv = document.querySelector(comparisonWidgetQuerySelectors.comparisonWidgetItemCountDiv);
    this.compareButton = document.querySelector(comparisonWidgetQuerySelectors.compareButton);
    this.productGridResults = document.querySelector(comparisonWidgetQuerySelectors.productGridResults);
    this.productGridResultsContainer = document.querySelector(comparisonWidgetQuerySelectors.productGridResultsContainer);
    this.comparisonResults = document.querySelector(comparisonWidgetQuerySelectors.comparisonResults);
    this.comparisonResultsTableHead = document.querySelector(comparisonWidgetQuerySelectors.comparisonResultsTableHead);
    this.comparisonResultsTableBody = document.querySelector(comparisonWidgetQuerySelectors.comparisonResultsTableBody);
    this.errorModal = document.querySelector(comparisonWidgetQuerySelectors.errorModal);
    this.minItemsModal = document.querySelector(comparisonWidgetQuerySelectors.minItemsModal);
    this.maxItemsModal = document.querySelector(comparisonWidgetQuerySelectors.maxItemsModal);
    this.loader = document.querySelector(comparisonWidgetQuerySelectors.loader);
    this.goBackButton = document.querySelector(comparisonWidgetQuerySelectors.goBackButton);
    this.compareDTTool = document.querySelector(comparisonWidgetQuerySelectors.compareDTTool);

    this.mustacheHeading = document.getElementById(comparisonMustacheElements.mustacheTemplate.heading);
    this.mustacheBody = document.getElementById(comparisonMustacheElements.mustacheTemplate.body);

    this.initializeFromSessionStorage();
    this.convertrowtocolumn();
    this.addEventListeners();
  }

  // Mustache


  _createClass(Comparison, [{
    key: 'renderComparisonTableHeading',
    value: function renderComparisonTableHeading(headerData) {
      return window.Mustache.render(this.mustacheHeading.innerHTML, headerData);
    }
  }, {
    key: 'renderComparisonTableBody',
    value: function renderComparisonTableBody(bodyData) {
      return window.Mustache.render(this.mustacheBody.innerHTML, bodyData);
    }
  }, {
    key: 'addEventListeners',
    value: function addEventListeners() {
      this.minimizeMaximizeComparisonWidget();
      this.checkboxAddRemove();
      this.comparisonWidgetRemoveButton();
      this.clearAllItems();
      this.displayComparisonResultsScreen();
      this.goBack();
      this.setSessionStorageVar();
      this.comparisonResultsScreenRemoveButton();
      this.highlightDifferencesAndHideBlankFields();
    }

    // event listeners

  }, {
    key: 'minimizeMaximizeComparisonWidget',
    value: function minimizeMaximizeComparisonWidget() {
      document.querySelector('.comparision .min__close').addEventListener(eventListeners.CLICK, function (event) {
        document.querySelector('.comparision .main__box').classList.toggle(comparisonWidgetClasses.hide);
        document.querySelector('.comp__down').classList.toggle('icon-chevron-up');
        document.querySelector('.comp__down').classList.toggle('icon-chevron-down');
      });
    }
  }, {
    key: 'checkboxAddRemove',
    value: function checkboxAddRemove() {
      var self = this;

      // Add and remove items via the checkboxes on the main page (listener for each checkbox)
      var compareCheckbox = document.querySelectorAll('input[type=checkbox].product-card-sku__comp');
      for (var i = 0; i < compareCheckbox.length; i++) {
        compareCheckbox[i].addEventListener('click', function (event) {

          var checkid = $(this).attr('id');
          var checkidElement = document.getElementById(checkid);
          var checklen = self.iduncheck.length;
          // if a box gets unchecked
          if (!checkidElement.checked) {
            self.removeItemFromCompare(checkid);
          }
          // else if an item is being selected to add
          else if (checkidElement.checked && checklen <= 3) {
              self.addItemToCompare(checkid);
              self.comparisonWidget.classList.remove(comparisonWidgetClasses.hide);
              self.comparisonWidget.style.width = self.calculateWidthWithoutPadding();
              document.querySelector('.main__comp-box').classList.remove(comparisonWidgetClasses.hide);
            }
            // if more than 4 items are being selected, show error modal to user
            else if (checklen >= 3) {
                checkidElement.checked = false;
                $(self.maxItemsModal).modal('show');
              }

          // Enable or disable Compare button & update the count in the html
          self.disabledButton(self.iduncheck.length);
          self.comparisonWidgetItemCountDiv.innerHTML = self.iduncheck.length;
        });
      }
    }
  }, {
    key: 'comparisonWidgetRemoveButton',
    value: function comparisonWidgetRemoveButton() {
      var self = this;
      // Remove an item from the comparison widget by clicking its "close" button
      $('.comp__close').click(function () {
        var itemToRemove = $(this).prev().text();
        self.removeItemFromCompare(itemToRemove);

        // uncheck the itemToRemove's box on main page, if it is visible
        if (typeof document.getElementById(itemToRemove) !== 'undefined' && document.getElementById(itemToRemove) !== null) {
          document.getElementById(itemToRemove).checked = false;
        }
        // Enable or disable Compare button & update the count in the html
        self.disabledButton(self.iduncheck.length);
        self.comparisonWidgetItemCountDiv.innerHTML = self.iduncheck.length;
        if (self.comparisonWidgetItemCountDiv.innerHTML === 0) {
          self.compareDTTool.innerHTML = '';
          self.comparisonWidget.classList.add(comparisonWidgetClasses.hide);
          $('#product1 tr, #product1 td,#product2 td, #product2 tr, #product3 tr, #product3 td,#product4 tr,#product4 td').remove();
        }
      });
    }
  }, {
    key: 'clearAllItems',
    value: function clearAllItems() {
      var self = this;
      $('.clear-selection').click(function () {
        $('.comparision__box').addClass('comp__closed');
        self.comparisonWidgetItemLabel.forEach(function (element) {
          element.innerHTML = '';
        });
        $('.comp__close').removeClass('icon-close');
        $('.results-list__content input:checkbox').prop('checked', false);
        self.counter = 0;
        self.iduncheck = [];
        self.comparisonWidgetItemCountDiv.innerHTML = self.counter;
        self.compareDTTool.innerHTML = '';
        self.comparisonWidget.classList.add(comparisonWidgetClasses.hide);
        $('#product1 tr, #product1 td,#product2 td, #product2 tr, #product3 tr, #product3 td,#product4 tr,#product4 td').remove();
      });
    }
  }, {
    key: 'displayComparisonResultsScreen',
    value: function displayComparisonResultsScreen() {
      // Display comparison screen, button is only active after two or more items to compare are selected
      var self = this;
      self.compareButton.addEventListener(eventListeners.CLICK, function (event) {
        // build data to send. Example:  C37,C17,C17 SA,C27
        var selectedSkus = '';
        for (var index = 0; index < self.iduncheck.length; index++) {
          selectedSkus += self.iduncheck[index];
          if (index + 1 < self.iduncheck.length) {
            selectedSkus += ',';
          }
        }
        self.compareDTTool.innerHTML = selectedSkus;
        self.loader.classList.remove(comparisonWidgetClasses.hide);
        var tabsMenuDiv = document.querySelector('.eaton-product-tabs');
        if (tabsMenuDiv) {
          tabsMenuDiv.scrollIntoView({
            behavior: 'smooth'
          });
        } else {
          $('html, body').animate({ scrollTop: 0 });
        }
        self.productCompare(selectedSkus);
        self.comparisonResults.classList.remove(comparisonWidgetClasses.hide);
        self.productGridResults.classList.add(comparisonWidgetClasses.hide);
      });
    }
  }, {
    key: 'goBack',
    value: function goBack() {
      // Go back to product list, from comparison screen
      var self = this;

      self.goBackButton.addEventListener(eventListeners.CLICK, function (event) {
        $('#header-fixed').empty();
        self.storeProdxSelection($('#tableheadComp #heading th p.header_align'));
        self.comparisonResults.classList.add(comparisonWidgetClasses.hide);
        self.comparisonResultsTableHead.innerHTML = '';
        self.comparisonResultsTableBody.innerHTML = '';
        self.loader.classList.add(comparisonWidgetClasses.loaderActive);
        self.loader.classList.remove(comparisonWidgetClasses.hide);
        setTimeout(function () {
          self.loader.classList.remove(comparisonWidgetClasses.loaderActive);
          self.loader.classList.add(comparisonWidgetClasses.hide);
          self.productGridResults.classList.remove(comparisonWidgetClasses.hide);
          self.comparisonWidget.classList.remove(comparisonWidgetClasses.hide);
          self.comparisonWidget.style.width = self.calculateWidthWithoutPadding();
          document.querySelector('.main__comp-box').classList.remove(comparisonWidgetClasses.hide);
        }, '2000');
      });
    }
  }, {
    key: 'setSessionStorageVar',
    value: function setSessionStorageVar() {
      // On click of Sort dropdown ("Alpha: A to Z"), set Session Storage variable "selectedProdx" to store the products
      //    that are currently in the comparison widget.  See product-grid.js for use of "selectedProdx"
      var self = this;
      var sortLinks = document.querySelectorAll('.faceted-navigation-header__sort-link');
      for (var i = 0; i < sortLinks.length; i++) {
        sortLinks[i].addEventListener('click', function (event) {
          self.storeProdxSelection($(self.comparisonWidgetItemLabel));
        });
      }
    }
  }, {
    key: 'comparisonResultsScreenRemoveButton',
    value: function comparisonResultsScreenRemoveButton() {
      var self = this;

      // On click of "close" button on a product in the comparison table, remove it from the comparison results table,
      //    the comparison widget, this.iduncheck, and #compare__DTtool.
      $('#heading, #header-fixed > thead').on('click', '.popup_close ', function () {
        if ($('#tableheadComp .popup_close').length === 2) {
          $(self.minItemsModal).modal('show');
        } else {
          var xSku = $(this).parent().siblings('.product-sku-url').children('.header_align').text();

          self.removeItemFromCompare(xSku);
          // uncheck the itemToRemove's box on main page, if it is visible
          if (typeof document.getElementById(xSku) !== 'undefined' && document.getElementById(xSku) !== null) {
            document.getElementById(xSku).checked = false;
          }
          // Enable or disable Compare button & update the count in the html
          self.disabledButton(self.iduncheck.length);
          self.comparisonWidgetItemCountDiv.innerHTML = self.iduncheck.length;

          var selectedSkus = $('#tableheadComp .header_align').map(function () {
            return $(this).text();
          }).get().join(',') + ',';
          selectedSkus = selectedSkus.replace(xSku + ',', ''); // example: remove "C27," from "C17,C17 SA,C27,"
          selectedSkus = selectedSkus.replace(/,\s*$/, ''); // remove final comma after element removal
          self.compareDTTool.innerHTML = selectedSkus;
          $('#header-fixed').empty();
          self.loader.classList.add(comparisonWidgetClasses.loaderActive);
          self.loader.classList.remove(comparisonWidgetClasses.hide);
          self.comparisonResultsTableHead.innerHTML = '';
          self.comparisonResultsTableBody.innerHTML = '';
          self.productCompare(selectedSkus);
        }
      });
    }
  }, {
    key: 'highlightDifferencesAndHideBlankFields',
    value: function highlightDifferencesAndHideBlankFields() {
      // Functionality for the three checkboxes in the comparison results table
      // For filter checkbox 1:  When checked by the user, highlight in blue the rows that have different aspects, between products.
      $('#tableheadComp #heading').on('click', '.comparision_table-checkbox', function () {
        if ($('#tableheadComp > thead .comparision_table-checkbox').is(':checked')) {
          $('.all-different').addClass('highlight');
          $('#header-fixed > thead .comparision_table-checkbox').prop('checked', true);
        } else {
          $('.all-different').removeClass('highlight');
          $('#header-fixed > thead .comparision_table-checkbox').prop('checked', false);
        }
      });

      // For filter checkbox 2:  When checked by the user, only show the rows that have different aspects, between products.
      $('#tableheadComp #heading').on('click', '.comparision_table-checkbox-diff', function () {
        if ($('#tableheadComp > thead .comparision_table-checkbox-diff').is(':checked')) {
          $('#header-fixed > thead .comparision_table-checkbox-diff').prop('checked', true);
          $('.comparision_table-row').addClass('hide');
          $('.comparision_table-row.all-different').removeClass('hide');
        } else {
          $('.comparision_table-row').removeClass('hide');
          if ($('#tableheadComp > thead .comparision_table-checkbox-incomprbl').is(':checked')) {
            $('tbody td').filter(function () {
              return $(this).text() === '-';
            }).parent().addClass('hide');
          }
          $('#header-fixed > thead .comparision_table-checkbox-diff').prop('checked', false);
        }
      });

      // For filter checkbox 3:
      $('#tableheadComp #heading').on('click', '.comparision_table-checkbox-incomprbl', function () {
        if ($('#tableheadComp > thead .comparision_table-checkbox-incomprbl').is(':checked')) {
          document.querySelectorAll(comparisonWidgetClasses.hideForBlank).display = 'none';
        } else {
          document.querySelectorAll(comparisonWidgetClasses.hideForBlank).display = 'block';
        }
      });
    }

    // helper functions

  }, {
    key: 'initializeFromSessionStorage',
    value: function initializeFromSessionStorage() {
      if (sessionStorage.getItem('selectedProdx') !== '' && sessionStorage.getItem('selectedProdx') !== null) {
        var storageItms = sessionStorage.getItem('selectedProdx');
        var storageItmsArr = storageItms.split(',');
        storageItmsArr = storageItmsArr.filter(String);
        for (var n = 0; n < storageItmsArr.length; n++) {
          var checkidElement = document.getElementById(storageItmsArr[n]);

          // if it's visible check it
          if (typeof checkidElement !== 'undefined' && checkidElement !== null) {
            checkidElement.checked = true;
          }
          this.addItemToCompare(storageItmsArr[n]);
          this.comparisonWidget.classList.remove(comparisonWidgetClasses.hide);
          this.comparisonWidget.style.width = this.calculateWidthWithoutPadding();
          document.querySelector('.main__comp-box').classList.remove(comparisonWidgetClasses.hide);
        }
        // Enable or disable Compare button & update the count in the html
        this.disabledButton(this.iduncheck.length);
        this.comparisonWidgetItemCountDiv.innerHTML = this.iduncheck.length;
        sessionStorage.removeItem('selectedProdx');
      }
    }
  }, {
    key: 'calculateWidthWithoutPadding',
    value: function calculateWidthWithoutPadding() {
      var containerWidth = parseFloat(getComputedStyle(this.productGridResultsContainer).width);
      var containerTotalPadding = parseFloat(getComputedStyle(this.productGridResultsContainer).paddingLeft) + parseFloat(getComputedStyle(this.productGridResultsContainer).paddingRight);
      var finalWidth = containerWidth - containerTotalPadding;
      return finalWidth + 'px';
    }
  }, {
    key: 'addItemToCompare',
    value: function addItemToCompare(checkid) {
      // if not already in array of "selected" items, add
      if (this.iduncheck.includes(checkid) === false) {
        this.iduncheck.push(checkid);
      }
      this.populateWithCurrentArrayOfItems(this.iduncheck);
    }
  }, {
    key: 'removeItemFromCompare',
    value: function removeItemFromCompare(skuToRemove) {
      // remove from current array of items
      var index = this.iduncheck.indexOf(skuToRemove);
      this.iduncheck.splice(index, 1);

      // empty all and repopulate w current array of items
      this.comparisonWidgetItemLabel.forEach(function (element) {
        element.innerHTML = '';
        element.parentNode.classList.add('comp__closed');
        element.nextElementSibling.classList.remove('icon-close');
      });
      this.populateWithCurrentArrayOfItems(this.iduncheck);
    }
  }, {
    key: 'populateWithCurrentArrayOfItems',
    value: function populateWithCurrentArrayOfItems(iduncheck) {
      for (var index = 0; index < this.iduncheck.length; index++) {
        var positionElement = document.getElementById(index + 1);
        if (positionElement.textContent === '') {
          positionElement.innerHTML = this.iduncheck[index];
          positionElement.parentNode.classList.remove('comp__closed');
          positionElement.nextElementSibling.classList.add('icon-close');
        }
      }
    }
  }, {
    key: 'disabledButton',
    value: function disabledButton(itemCount) {
      // if zero or one item in comparison widget, disable Compare button. Else, enable it.
      if (itemCount <= 1) {
        this.compareButton.classList.add(comparisonWidgetClasses.compareBasketButtonDisabled);
      } else {
        this.compareButton.classList.remove(comparisonWidgetClasses.compareBasketButtonDisabled);
      }
    }
  }, {
    key: 'productCompare',
    value: function productCompare(selectedSkus) {
      var self = this;
      $.ajax({
        type: 'POST',
        url: '/eaton/productcompare',
        data: { value1: selectedSkus },
        success: function success(msg) {
          self.compareResult = msg;
          if (self.compareResult.length === 0) {
            self.showErrorModal();
          } else {
            self.dataDisplayNew();
            self.compareTableScroll();
            self.multiLine();
            $('.comparision_table-pdh').attr('colspan', $('#tableheadComp #heading tr').children().length);
            self.loader.classList.remove(comparisonWidgetClasses.loaderActive);
            self.loader.classList.add(comparisonWidgetClasses.hide);
          }
        }
      });
    }
  }, {
    key: 'showErrorModal',
    value: function showErrorModal() {
      this.loader.classList.remove(comparisonWidgetClasses.loaderActive);
      this.loader.classList.add(comparisonWidgetClasses.hide);
      $(this.errorModal).modal('show');
      this.comparisonResults.classList.add(comparisonWidgetClasses.hide);
      this.productGridResults.classList.remove(comparisonWidgetClasses.hide);
      this.clearSelection.click();
    }
  }, {
    key: 'constructCompareResultItems',
    value: function constructCompareResultItems() {
      var _this = this;

      var compareResultItems = [];
      this.compareResult.forEach(function (item, index) {
        compareResultItems.push({ col: index + 1, url: item['ProductSku Url']['ProductSku Url'] + '.' + item[_this.getTRKey(item, 'Catalog Number')] + '.html', image: item.Image.Image, catalogNumber: item[_this.getTRKey(item, 'Catalog Number')] });
      });
      return compareResultItems;
    }
  }, {
    key: 'constructCompareResultBodyItems',
    value: function constructCompareResultBodyItems() {
      var _this2 = this;

      var compareResultItems = [];
      this.compareResult.forEach(function (item, index) {
        compareResultItems.push({ productName: item[_this2.getTRKey(item, 'Product Name')], catalogNumber: item[_this2.getTRKey(item, 'Catalog Number')], uniqueCategories: [] });
      });
      return compareResultItems;
    }
  }, {
    key: 'dataDisplayNew',
    value: function dataDisplayNew() {
      var catList = [];
      var atrList = [];
      var noOfAttribute = 0;

      var showDiffIDVar = document.getElementById('showDiffId').textContent;
      var showHighLightIDVar = document.getElementById('showHighLightId').textContent;
      var hideIncompAttr = document.getElementById('hideIncompAttrId').textContent;

      var headerData = {
        showDiffIDVar: showDiffIDVar,
        showHighLightIDVar: showHighLightIDVar,
        hideIncompAttr: hideIncompAttr,
        compareResultItems: this.constructCompareResultItems()
      };
      this.comparisonResultsTableHead.innerHTML = this.renderComparisonTableHeading(headerData);

      var productNameRow = this.getTRKey(this.compareResult[0], 'Product Name');
      var productNameLabel = this.getTRLabel(productNameRow, 'label');
      var catalogNumberRow = this.getTRKey(this.compareResult[0], 'Catalog Number');
      var catalogNumberLabel = this.getTRLabel(catalogNumberRow, 'label');

      var bodyData = {
        productNameRowTitle: productNameLabel,
        catalogNumberRowTitle: catalogNumberLabel,
        allUniqueCategories: [],
        compareResultItems: this.constructCompareResultBodyItems(),
        catRowColspan: this.compareResult.length + 1
      };

      for (var i = 0; i < this.compareResult.length; i++) {
        $.each(this.compareResult[i], function (key, value) {
          if (key.includes('Categories_') || key.includes('categories_')) {
            catList.push(key);
            $.each(value, function (atrkey, atrvalue) {
              atrList.push(atrkey);
            });
          }
        });
      }

      // Remove Duplicate cat list.
      // eslint-disable-next-line consistent-this
      var NewUniqueCatList = catList.filter(function (element, index, self) {
        return index === self.indexOf(element);
      });

      // Bring General specifications row to top.
      var first = this.getTRKey(this.compareResult[0], 'General specifications');
      NewUniqueCatList.sort(function (x, y) {
        return x === first ? -1 : y === first ? 1 : 0;
      });

      // eslint-disable-next-line no-unused-vars, consistent-this
      var NewUniqueAtrList = atrList.filter(function (element, index, self) {
        return index === self.indexOf(element);
      });

      // Sorting of atribute list.
      for (var _i = 0; _i < NewUniqueCatList.length; _i++) {
        var tempCatName = NewUniqueCatList[_i].replace('Categories_', '');
        tempCatName = this.getTRLabel(tempCatName, 'lable');
        var tempCatId = this.getTRLabel(tempCatName, 'id');

        // Store Attribute rows starting with Unique Categories, then Subcategories.
        for (var j = 0; j < this.compareResult.length; j++) {
          bodyData.compareResultItems[j].uniqueCategories.push({ tempCatId: tempCatId.toLowerCase(), tempCatName: tempCatName, subcategories: [] });

          if (j === 0) {
            bodyData.allUniqueCategories.push({ tempCatId: tempCatId.toLowerCase(), tempCatName: tempCatName, allSubcategories: [] });
          }

          // eslint-disable-next-line no-unused-vars
          var atrAvailFlag = 0;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = Object.keys(this.compareResult[j])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var key = _step.value;

              if (key.includes('Categories_') && key === NewUniqueCatList[_i] && typeof this.compareResult[j][NewUniqueCatList[_i]] !== 'undefined') {
                // if category match then print attribute label.
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = Object.keys(this.compareResult[j][NewUniqueCatList[_i]])[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _key = _step2.value;

                    var rowId = tempCatName + '-' + noOfAttribute;
                    rowId = rowId.replace(/ /g, '-');
                    var dataIDKey = this.getTRLabel(_key, 'id');
                    var dataLabelKey = this.getTRLabel(_key, 'lable');
                    noOfAttribute++;
                    bodyData.allUniqueCategories[_i].allSubcategories.push({ rowId: rowId, dataIDKey: dataIDKey, dataLabelKey: dataLabelKey, productValues: [] });

                    // Store Subcategory values for each product
                    // Check if category exists.
                    var tempVar = typeof this.compareResult[j][NewUniqueCatList[_i]] !== 'undefined' ? this.compareResult[j][NewUniqueCatList[_i]][_key] : 'undefined';
                    if (tempVar !== undefined || typeof tempVar !== 'undefined' || tempVar !== 'undefined') {
                      // condition for Runtime graph & its URL.
                      bodyData.compareResultItems[j].uniqueCategories[_i].subcategories.push({ rowId: rowId, dataIDKey: dataIDKey, dataLabelKey: dataLabelKey, dataValue: tempVar });
                    } else {
                      // if nothing then undefined.
                      bodyData.compareResultItems[j].uniqueCategories[_i].subcategories.push({ rowId: rowId, dataIDKey: dataIDKey, dataLabelKey: dataLabelKey, dataValue: '-' });
                    }
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
              }
            } // end for
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          atrAvailFlag++;
        }
      }

      // Having constructed a list of all categories and all subcategories nested for the template,
      //   place the values of compareResultItems into the bodyData json for use in the Mustache template columns.

      var _loop = function _loop(a) {
        var _loop2 = function _loop2(b) {
          // if dataLabelKey of the current product equals the dataLabelKey of the current subcategory
          var currentSubcategoryDataLabelKey = bodyData.allUniqueCategories[a].allSubcategories[b].dataLabelKey;

          bodyData.compareResultItems.forEach(function (resultItem) {
            resultItem.uniqueCategories.forEach(function (resultUniqueCategory) {
              resultUniqueCategory.subcategories.forEach(function (resultSubcategory) {
                if (resultSubcategory.dataLabelKey === currentSubcategoryDataLabelKey) {
                  // if product's subcategory datalabelkey = allSubcategories datalabelkey, push on the key and the value, for display.
                  bodyData.allUniqueCategories[a].allSubcategories[b].productValues.push({ dataLabelKey: currentSubcategoryDataLabelKey, dataValue: resultSubcategory.dataValue });
                }
              });
            });
          });
        };

        for (var b = 0; b < bodyData.allUniqueCategories[a].allSubcategories.length; b++) {
          _loop2(b);
        }
      };

      for (var a = 0; a < bodyData.allUniqueCategories.length; a++) {
        _loop(a);
      }

      this.comparisonResultsTableBody.innerHTML = this.renderComparisonTableBody(bodyData);

      var seen = {};
      $('.attribute-key').each(function () {
        var txt = $(this).text() + '-cat-' + $(this).parent('tr').attr('data-cat');
        if (seen[txt]) {
          $(this).parent('tr').remove();
        } else {
          seen[txt] = true;
        }
      });

      var runtimeGraphTitle = [];
      var runtimeGraphURL = [];
      var tempVal = '';

      $('.attribute-key-value').each(function () {
        // set url for Runtime graph.
        if ($(this).attr('data-key') === 'runtime graph') {
          tempVal = $(this).text();
          runtimeGraphTitle.push(tempVal);
        } else {
          if ($(this).attr('data-key') === 'runtime graph url') {
            tempVal = $(this).text();
            runtimeGraphURL.push(tempVal);
          }
        }
        tempVal = '';
      });

      // Set Runtime graph URL.
      if (runtimeGraphTitle.length === runtimeGraphURL.length) {
        var rCounter = 0;
        $('.attribute-key-value[data-key="runtime graph"]').each(function () {
          if ($(this).text() === '-') {
            // Do nothing
          } else {
            $(this).html('<a target="_blank" href="' + runtimeGraphURL[rCounter] + '">' + runtimeGraphTitle[rCounter] + '</a>');
          }
          rCounter++;
        });
      }

      // Remove row from table - Runtime Graph URL, Product name & Catalog number which is under category
      $('tr.comparision_table-row[data-key="runtime graph url"]').remove();
      $('tr.attribute-row[data-key="product name"]').remove();
      $('tr.attribute-row[data-key="catalog number"]').remove();

      $('tr.category-row[data-cat="defaulttaxonomyattributelabel"]').children('td').html('Product specifications');

      $('.category-row').each(function () {
        var catDataCount = 0;
        var catName = $(this).attr('data-cat');
        $('.attribute-row').each(function () {
          // If category row and attribute mach then data exists for category.
          if (catName === $(this).attr('data-cat')) {
            catDataCount++;
          }
        });
        if (catDataCount === 0) {
          $(this).remove();
        }
      });

      // replace all undefine value with dash (undefine: no attribute for that product.)
      $('.attribute-key-value').each(function () {
        if ($(this).text() === 'undefined') {
          $(this).text('-');
        }
      });

      // Merger code.
      if (this.compareResult.length === 2) {
        $('.comparision_table-row').each(function () {
          if ($(this).find('td:eq(1)').text() === $(this).find('td:eq(2)').text() && $(this).find('td:eq(1)').attr('data-key') !== 'runtime graph') {
            $(this).find('td:eq(2)').remove();
            $(this).find('td:eq(1)').attr('colspan', 2);
          } else {
            // Add class for all diffent values.
            $(this).addClass('all-different');
          }
        });
      } else {
        if (this.compareResult.length === 3) {
          $('.comparision_table-row').each(function () {
            // if 1,2 & 3 are same
            if ($(this).find('td:eq(1)').text() === $(this).find('td:eq(2)').text() && $(this).find('td:eq(1)').text() === $(this).find('td:eq(3)').text() && $(this).find('td:eq(1)').attr('data-key') !== 'runtime graph') {
              $(this).find('td:eq(3)').remove();
              $(this).find('td:eq(2)').remove();
              $(this).find('td:eq(1)').attr('colspan', 3);
            } else {
              // if 1 and 2 are same.
              if ($(this).find('td:eq(1)').text() === $(this).find('td:eq(2)').text() && $(this).find('td:eq(1)').attr('data-key') !== 'runtime graph') {
                $(this).find('td:eq(2)').remove();
                $(this).find('td:eq(1)').attr('colspan', 2);
              } else {
                // if 2 and 3 same
                if ($(this).find('td:eq(2)').text() === $(this).find('td:eq(3)').text() && $(this).find('td:eq(2)').attr('data-key') !== 'runtime graph') {
                  $(this).find('td:eq(3)').remove();
                  $(this).find('td:eq(2)').attr('colspan', 2);
                } else {
                  // do nothing.
                  $(this).addClass('all-different');
                }
              }
            }
          });
        } else {
          if (this.compareResult.length === 4) {
            $('.comparision_table-row').each(function () {
              // if 1,2, 3 & 4 are same
              if ($(this).find('td:eq(1)').text() === $(this).find('td:eq(2)').text() && $(this).find('td:eq(1)').text() === $(this).find('td:eq(3)').text() && $(this).find('td:eq(1)').text() === $(this).find('td:eq(4)').text() && $(this).find('td:eq(1)').attr('data-key') !== 'runtime graph') {
                $(this).find('td:eq(4)').remove();
                $(this).find('td:eq(3)').remove();
                $(this).find('td:eq(2)').remove();
                $(this).find('td:eq(1)').attr('colspan', 4);
              } else {
                // if 1,2 & 3 are same
                if ($(this).find('td:eq(1)').text() === $(this).find('td:eq(2)').text() && $(this).find('td:eq(1)').text() === $(this).find('td:eq(3)').text() && $(this).find('td:eq(1)').attr('data-key') !== 'runtime graph') {
                  $(this).find('td:eq(3)').remove();
                  $(this).find('td:eq(2)').remove();
                  $(this).find('td:eq(1)').attr('colspan', 3);
                } else {
                  // if 2,3 & 4 are same
                  if ($(this).find('td:eq(2)').text() === $(this).find('td:eq(3)').text() && $(this).find('td:eq(2)').text() === $(this).find('td:eq(4)').text() && $(this).find('td:eq(1)').attr('data-key') !== 'runtime graph') {
                    $(this).find('td:eq(4)').remove();
                    $(this).find('td:eq(3)').remove();
                    $(this).find('td:eq(2)').attr('colspan', 3);
                  } else {
                    // if 1 and 2 are same.
                    if ($(this).find('td:eq(1)').text() === $(this).find('td:eq(2)').text() && $(this).find('td:eq(1)').attr('data-key') !== 'runtime graph') {
                      $(this).find('td:eq(2)').remove();
                      $(this).find('td:eq(1)').attr('colspan', 2);
                    } else {
                      // if 2 and 3 same
                      if ($(this).find('td:eq(2)').text() === $(this).find('td:eq(3)').text() && $(this).find('td:eq(2)').attr('data-key') !== 'runtime graph') {
                        $(this).find('td:eq(3)').remove();
                        $(this).find('td:eq(2)').attr('colspan', 2);
                      } else {
                        // if 3 and 4 same
                        if ($(this).find('td:eq(3)').text() === $(this).find('td:eq(4)').text() && $(this).find('td:eq(3)').attr('data-key') !== 'runtime graph') {
                          $(this).find('td:eq(4)').remove();
                          $(this).find('td:eq(3)').attr('colspan', 2);
                        } else {
                          $(this).addClass('all-different');
                        }
                      }
                    }
                  }
                }
              }
            });
          }
        }
      }

      if (this.comparisonWidgetItemCountDiv.textContent.trim() === '2') {
        $('.heading-prd-cmp').addClass('col-sm-4');
        $('.hide--mob-td').addClass('col-sm-4');
      } else if (this.comparisonWidgetItemCountDiv.textContent.trim() === '3') {
        $('.heading-prd-cmp').addClass('col-sm-3');
        $('.hide--mob-td').addClass('col-sm-3');
      } else if (this.comparisonWidgetItemCountDiv.textContent.trim() === '4') {
        $('.heading-prd-cmp').addClass('col-sm-2');
        $('.hide--mob-td').addClass('col-sm-2');
      }

      $('.displayNone').remove();
      $('.dataTables_sizing').addClass('hide');
      $('.comparision_table-pdh').attr('colspan', document.querySelector('#tableheadComp #heading tr').childElementCount);
      $('.runtime-graph').parent('tr').addClass('skipMerge');
      $('.skipMerge').children('td').removeAttr('colspan');

      $('.displayNone').remove();
      $('.dataTables_sizing').addClass('hide');
      $('.comparision_table-pdh').attr('colspan', document.querySelector('#tableheadComp #heading tr').childElementCount);
      $('.runtime-graph').parent('tr').addClass('skipMerge');
      $('.skipMerge').children('td').removeAttr('colspan');

      /**
       * Setting filters classes.
       * 1. class: all-differnce - for all diffent data.
       * 2. class hide-for-blank - for blank data depend on no of product.
       */
      var dashCount = 0;
      var dashCountForMerge = 0;
      var compareDTToolText = this.compareDTTool.textContent; // determine number of items without using this.compareResult
      var columns = compareDTToolText.split(',');

      $('.attribute-row').each(function () {

        if ($(this).children('.attribute-key-value').length > 1) {
          $(this).addClass('all-different');
        } else {
          $(this).removeClass('all-different');
          $(this).removeClass('highlight');
        }

        // For 2 column.
        if (columns.length === 2) {
          dashCount = 0;
          $(this).children('.attribute-key-value').each(function () {
            if ($(this).text() === '-') {
              dashCount++;
            }
          });
          if (dashCount === 1) {
            $(this).addClass(comparisonWidgetClasses.hideForBlank);
          } else {
            $(this).removeClass(comparisonWidgetClasses.hideForBlank);
          }
        }

        // For 3 column.
        if (columns.length === 3) {
          dashCount = 0;
          dashCountForMerge = 0;
          $(this).children('.attribute-key-value').each(function () {
            if ($(this).text() === '-') {
              dashCount++;
            }
            if ($(this).text() === '-' && $(this).attr('colspan') === '2') {
              dashCountForMerge = 1;
            }
          });

          // For 2 dash and 1 data.
          if (dashCount === 2) {
            $(this).addClass(comparisonWidgetClasses.hideForBlank);
          } else {
            // For 1 dash and 1 data i.e. 2 merge column & 1 column.
            if (dashCount === 1 && dashCountForMerge === 1) {
              $(this).addClass(comparisonWidgetClasses.hideForBlank);
            } else {
              $(this).removeClass(comparisonWidgetClasses.hideForBlank);
            }
          }
        }

        // For 4 column.
        if (columns.length === 4) {
          dashCount = 0;
          dashCountForMerge = 0;
          $(this).children('.attribute-key-value').each(function () {
            if ($(this).text() === '-') {
              dashCount++;
            }
            if ($(this).text() === '-' && $(this).attr('colspan') === '3') {
              dashCountForMerge = 1;
            }
            if ($(this).text() === '-' && $(this).attr('colspan') === '2') {
              dashCountForMerge = 2;
            }
          });

          // For 3 dash and 1 data.
          if (dashCount === 1 && dashCountForMerge === 1) {
            $(this).addClass(comparisonWidgetClasses.hideForBlank);
          } else {
            // For 2 dash and 1 data i.e. 2 merge dash + 1 data + 1 dash.
            if (dashCount === 2 && dashCountForMerge === 2) {
              $(this).addClass(comparisonWidgetClasses.hideForBlank);
            } else {
              $(this).removeClass(comparisonWidgetClasses.hideForBlank);
            }
          }
        }
      });
    }

    /* Original helper functions */

  }, {
    key: 'convertrowtocolumn',
    value: function convertrowtocolumn() {
      $('.comparision__table-result').each(function () {
        var $this = $(this);
        var newrows = [];
        $this.find('.comparision__table--row').each(function () {
          var i = 0;
          $(this).find('.comparision-data').each(function () {
            i++;
            if (newrows[i] === undefined) {
              newrows[i] = $('<tr></tr>');
            }
            newrows[i].append($(this));
          });
        });
        $this.find('.comparision__table--row').remove();
        $.each(newrows, function () {
          $this.append(this);
        });
      });
    }

    /**
     * Funtion to get translated key in JSON.
     */

  }, {
    key: 'getTRKey',
    value: function getTRKey(tempArr, trKey) {
      var tempKeyArr = Object.keys(tempArr);
      for (var i = 0; i < tempKeyArr.length; i++) {
        if (tempKeyArr[i].includes(trKey)) {
          return tempKeyArr[i];
        }
      }
    }

    /**
     * Funtion to get translated label in JSON.
     */

  }, {
    key: 'getTRLabel',
    value: function getTRLabel(tempStr, tempWhat) {
      var tempStrArr = [];
      var keyString = String(tempStr);

      // if unique key not exists.
      if (keyString.includes('_Pr@ductC@mpT@R_') && keyString !== 'undefined') {
        tempStrArr = keyString.split('_Pr@ductC@mpT@R_');
      } else {
        tempStrArr[0] = keyString;
        tempStrArr[1] = keyString;
      }

      // check unique key and split.
      if ((tempWhat === 'lable' || tempWhat === 'label') && keyString !== 'undefined') {
        // return label value
        keyString = tempStrArr[1];
      } else {
        if (tempWhat === 'id' && keyString !== 'undefined') {
          // return id value
          keyString = tempStrArr[0].toLowerCase();
        }
      }

      keyString = keyString.replace(/_+/g, ' ');
      return keyString;
    }
  }, {
    key: 'multiLine',
    value: function multiLine() {
      $('td.comparision-data.comparision_table-data').each(function () {
        var cellTxt = $(this).text();
        if (cellTxt.includes('|')) {
          var splitxt = $(this).text().split('|');
          var txt2 = '';
          $.each(splitxt, function (key, value) {
            txt2 += '<p>' + value + '</p>';
          });
          $(this).empty();
          $(this).append(txt2);
        }
      });
    }
  }, {
    key: 'compareTableScroll',
    value: function compareTableScroll() {
      var $header = $('#tableheadComp > thead').clone();
      var $fixedHeader = $('#header-fixed').append($header);
      var bottm = $('#tableheadComp > tbody tr:last-child').offset().top - $('.header-primary-nav').outerHeight() - $('.header-utility-nav').outerHeight() - $('#tableheadComp > tbody tr:last-child').outerHeight();

      $('#header-fixed > thead .comparision_table-checkbox-diff').change(function () {
        $('#tableheadComp thead .comparision_table-checkbox-diff').click();

        if ($('#header-fixed .comparision_table-checkbox-diff').is(':checked')) {
          $('#tableheadComp > thead .comparision_table-checkbox-diff').prop('checked', true);
        } else {
          $('#tableheadComp > thead .comparision_table-checkbox-diff').prop('checked', false);
        }
      });

      $('#header-fixed > thead .comparision_table-checkbox').change(function () {
        $('#tableheadComp thead .comparision_table-checkbox').click();

        if ($('#header-fixed .comparision_table-checkbox').is(':checked')) {
          $('#tableheadComp > thead .comparision_table-checkbox').prop('checked', true);
        } else {
          $('#tableheadComp > thead .comparision_table-checkbox').prop('checked', false);
        }
      });

      $('#header-fixed > thead .comparision_table-checkbox-incomprbl').change(function () {
        $('#tableheadComp thead .comparision_table-checkbox-incomprbl').click();

        if ($('#header-fixed .comparision_table-checkbox-incomprbl').is(':checked')) {
          $('#tableheadComp > thead .comparision_table-checkbox-incomprbl').prop('checked', true);
        } else {
          $('#tableheadComp > thead .comparision_table-checkbox-incomprbl').prop('checked', false);
        }
      });

      $('#header-fixed > thead').on('click', '.popup_close ', function () {
        var myIndex = $(this).parent().parent().prevAll().length;
        $('#tableheadComp thead tr').children().eq(myIndex).children('p').children('.popup_close').click();
      });

      function tableScroll() {
        var top = $('.header-primary-nav').outerHeight() + $('.header-utility-nav').height();
        $fixedHeader.css('top', top / 10 + 'rem');
        $fixedHeader.css('width', $('#tableheadComp').width());
        var topPos = $('#tableheadComp').offset().top - $('.header-primary-nav').outerHeight() + $('.header-utility-nav').outerHeight();
        var pos = $(document).scrollTop();
        var tcol = $('#tableheadComp thead tr').children().length;
        $('#heading th').css('width', 100 / tcol + '%');

        if (pos > topPos && pos < bottm) {
          $fixedHeader.show();
        } else {
          $fixedHeader.hide();
        }
      }

      $(window).scroll(function () {
        tableScroll();
      });

      $(document).ready(function () {
        setTimeout(function () {
          tableScroll();
          $(window).trigger('resize');
        }, 300);
      });
    }
  }, {
    key: 'storeProdxSelection',
    value: function storeProdxSelection(el) {
      var prodxarr = [];
      el.each(function () {
        if ($(this).text()) {
          prodxarr.push($(this).text());
        }
      });
      sessionStorage.setItem('selectedProdx', prodxarr);
    }
  }]);

  return Comparison;
}();

document.addEventListener('DOMContentLoaded', function () {
  // eslint-disable-next-line no-unused-vars
  var comparisonDiv = document.querySelector('.comparision');
  if (comparisonDiv) {
    new Comparison();
  }
});

if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
  // eslint-disable-next-line no-global-assign
  $ = require('jquery');
  module.exports = Comparison;
}