/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  var FACET_SEARCH_NUMBER_OF_SUGGESTIONS = 2;
  var FACET_SEARCH_MIN_LENGTH = 2;

  var App = window.App || {};
  App.GlobalFacetSearch = function () {
    _createClass(GlobalFacetSearch, [{
      key: 'init',

      /**
       * Initialize the SubmittalFilters class
       * @function init
       * @param {object} container - A reference to the SubmittalFilters container's DOM element so data attributes may be referenced
      */
      value: function init(container) {
        this.container = container;
        this.facetSearchLabel = this.container.dataset.globalFacetSearchLabel;
        this.facetSearchPlaceholder = this.container.dataset.globalFacetSearchPlaceholder;
        this.inText = this.container.dataset.globalFacetSearchInText;
        this.noSuggestionsText = this.container.dataset.globalFacetSearchNoSuggestionsText;

        this.render();
      }

      /**
       * @function markup
       * The current html representation of the component based upon the current properties.
       */

    }, {
      key: 'markup',
      value: function markup() {
        return '\n        <label class="global-filter-search__label">' + this.facetSearchLabel + '</label>\n        <input type="text" class="global-filter-search__input" placeholder="' + this.facetSearchPlaceholder + '">\n        <ul class="global-filter-search__suggestions"></ul>\n        <div class="global-filter-search__suggestions no-suggestions-container hidden">\n          <div class="global-filter-search__suggestion global-filter-search__suggestion__no-suggestions__message">\n            ' + this.noSuggestionsText + '\n            <span class="global-filter-search__suggestion__suggested-term">\n              ' + this.facetSearchTerm + '\n            </span>\n          </div>\n        </div>\n      ';
      }

      /**
       * @function
       * Renders the component based upon the current properties.
       */

    }, {
      key: 'render',
      value: function render() {
        this.container.innerHTML = this.markup();
        this.input = this.container.querySelector('.global-filter-search__input');
        this.suggestions = this.container.querySelector('.global-filter-search__suggestions');
        this.noSuggestions = this.container.querySelector('.no-suggestions-container');
        this.noSuggestionsTerm = this.container.querySelector('.global-filter-search__suggestion__suggested-term');

        this.addEventListeners();
      }

      /**
       * @function addEventListeners - Adds event listeners for the internal implementation
       * of this component.
       */

    }, {
      key: 'addEventListeners',
      value: function addEventListeners() {
        var _this = this;

        this.input.addEventListener('input', function () {
          return _this.container.dispatchEvent(new CustomEvent('searchTermChanged', { detail: _this.facetSearchTerm }));
        });

        var closeSuggestions = function closeSuggestions(e) {
          if (!_this.container.contains(e.target)) {
            _this.suggestions.classList.add('hidden');
            _this.noSuggestions.classList.add('hidden');
          }
        };

        document.removeEventListener('click', closeSuggestions);
        document.addEventListener('click', closeSuggestions);
      }

      /**
       * @function get facetSearchTerm
       * @returns {string} the value in the input field
       */

    }, {
      key: 'createSuggestions',


      /**
       * @function createSuggestions
       * @returns {array} returns an array of list items of suggestions
       */
      value: function createSuggestions(suggestions) {
        var _this2 = this;

        return suggestions.filter(function (suggestedFilter) {
          return suggestedFilter.value.toLowerCase().indexOf(_this2.facetSearchTerm.toLowerCase()) !== -1;
        }).slice(0, FACET_SEARCH_NUMBER_OF_SUGGESTIONS).map(function (_ref) {
          var value = _ref.value,
              category = _ref.category;
          return '\n        <li class="global-filter-search__suggestion">\n          <a href="#" data-search-value="' + value + '" data-search-category="' + category + '" class="global-filter-search__suggestion__link">\n            <span class="global-filter-search__suggestion__suggested-term">' + value + '</span>\n            <span class="global-filter-search__suggestion__conjunction">' + _this2.inText + '</span>\n            <span class="global-filter-search__suggestion__suggested-facetgroup">' + category + '</span>\n          </a>\n        </li>\n      ';
        });
      }

      /**
       * @function updateFacetSearchSuggestion
       * displays suggestions if FACET_SEARCH_MIN_LENGTH is met, hides it suggestions otherwise
       ** if there are matching suggestions, noSuggestions is hidden, suggestions is displayed, and click events are attached to each search suggestion
       ** if there are no matching suggestions, suggestions is hidden and noSuggestions is displayed
       */

    }, {
      key: 'updateFacetSearchSuggestion',
      value: function updateFacetSearchSuggestion(suggestions) {
        var _this3 = this;

        if (this.facetSearchTerm.length >= FACET_SEARCH_MIN_LENGTH) {
          var suggestionsMarkup = this.createSuggestions(suggestions);
          if (suggestionsMarkup.length > 0) {
            this.suggestions.innerHTML = suggestionsMarkup.join('');
            this.noSuggestions.classList.add('hidden');
            this.suggestions.classList.remove('hidden');
          } else {
            this.noSuggestions.classList.remove('hidden');
            this.suggestions.classList.add('hidden');
            this.noSuggestionsTerm.innerText = this.facetSearchTerm;
          }
        } else {
          this.noSuggestions.classList.add('hidden');
          this.suggestions.classList.add('hidden');
        }

        this.container.querySelectorAll('.global-filter-search__suggestion__link').forEach(function (suggestion) {
          return suggestion.addEventListener('click', function (e) {
            e.preventDefault();
            _this3.container.dispatchEvent(new CustomEvent('suggestionSelected', { detail: { category: suggestion.dataset.searchCategory, value: suggestion.dataset.searchValue } }));
          });
        });
      }

      /**
       * The global facet search component
       * @constructor
       * @param {object} container - A reference to the GlobalFacetSearch container's DOM element
      */

    }, {
      key: 'facetSearchTerm',
      get: function get() {
        return this.input ? this.input.value : '';
      }
    }]);

    function GlobalFacetSearch(container) {
      _classCallCheck(this, GlobalFacetSearch);

      // The constructor should only contain the boiler plate code for finding or creating the reference.
      if (typeof container.dataset.ref === 'undefined') {
        this.ref = Math.random();
        App.GlobalFacetSearch.refs[this.ref] = this;
        container.dataset.ref = this.ref;
        this.init(container);
      } else {
        // If this element has already been instantiated, use the existing reference.
        return App.GlobalFacetSearch.refs[container.dataset.ref];
      }
    }

    /**
     * @function addEventListener - A method to allow clients to add event listeners
     *  to this component. Calls the addEventListener method of this components containing element.
     */


    _createClass(GlobalFacetSearch, [{
      key: 'addEventListener',
      value: function addEventListener() {
        return this.container.addEventListener.apply(this.container, arguments);
      }

      /**
       * @function removeEventListener - A method to allow clients to remove event listeners
       *  from this component. Calls the removeEventListener method of this components containing element.
       */

    }, {
      key: 'removeEventListener',
      value: function removeEventListener() {
        return this.container.removeEventListener.apply(this.container, arguments);
      }
    }]);

    return GlobalFacetSearch;
  }();

  App.GlobalFacetSearch.refs = {};
})();