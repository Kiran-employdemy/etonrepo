/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


//-----------------------------------
// Module M-46: Tabbed Menu List / Category Menu
//-----------------------------------
'use strict';

var App = App || window.App || {};

App.tabbedMenuList = function () {
  var $component = $('.tabbed-menu-list');
  var $titles = $component.find('.tabbed-menu-list__tab-title');
  var mediaquery = App.global.constants.MEDIA_QUERIES.DESKTOP;
  var mediaquerylg = App.global.constants.MEDIA_QUERIES.DESKTOP_LG;
  var matchmedia = window.matchMedia(mediaquery);
  var matchmedialg = window.matchMedia(mediaquerylg);
  var $collapses = $component.find('.collapse');
  var $tabsTitles = $component.find('.tabbed-menu-list__title.desktop');
  var $tabs = $component.find('.tab-pane');
  var $tabContets = $component.find('.tabbed-menu-list__tab-content');

  var init = function init() {
    bindEvents();
    matchFunction(matchmedia);
    matchFunctionLg(matchmedialg);
  };

  var bindEvents = function bindEvents() {
    $titles.on('click', toogleTitles);
    matchmedia.addListener(matchFunction);
    matchmedialg.addListener(matchFunctionLg);
  };

  var toogleTitles = function toogleTitles(event) {
    var $this = $(event.target);
    var index = $this.data('index');

    // TODO: This can be Cleaned-up, there is no need to use a "$.each()" method here since
    // the jquery method ".on()" handles each element independantly
    // and all behaviors can be attached to the element that was clicked
    // insted of looping over all the existing tabs.

    $.each($titles, function (i, element) {
      var $element = $(element);
      var $tabToggleLink = $element.find('[data-toggle="tab"]');
      var currentIndex = $tabToggleLink.data('index');
      var $tabPane = $component.find('.tab-pane[data-index="' + currentIndex + '"]');

      // Don't proceed if the Tab Link is an External Link (Instead of being a tab)
      // If is an external link there is no need to update aria-attributes/CSS-classes
      if ($tabToggleLink.length <= 0) {
        return;
      }

      // set all to false
      if ($element.hasClass('desktop')) {
        $tabToggleLink.attr('aria-selected', 'false');
      }

      if (currentIndex === index) {
        $element.toggleClass('active');

        var isDesktop = $element.hasClass('desktop');
        $tabToggleLink.attr('aria-selected', isDesktop);

        var isActive = $element.hasClass('active');
        $tabPane.css('display', isActive ? 'block' : 'none');
      } else {
        $element.removeClass('active');
        $tabPane.css('display', 'none');
      }
    });
  };

  var matchFunction = function matchFunction(matchmediaParam) {
    $titles.removeClass('active');
    if (matchmediaParam.matches) {
      // to desktop
      $collapses.collapse('hide');

      if ($tabContets.length > 0) {
        var windowWidth = $(window).outerWidth();
        var diffWidth = void 0;
        if (windowWidth >= App.global.constants.GRID.LG) {
          diffWidth = windowWidth - 1140;
        } else {
          diffWidth = windowWidth - 940;
        }

        $tabContets.css({
          'margin-left': Math.floor(-1 * diffWidth / 2 - 10) + 'px',
          'margin-right': Math.floor(-1 * diffWidth / 2 - 10) + 'px',
          width: 'calc( 100% + ' + (diffWidth + 20) + 'px)'
        });
      }
    } else {
      // to mobile
      $tabsTitles.removeClass('active');
      $tabs.removeClass('active');
    }
  };

  var matchFunctionLg = function matchFunctionLg(matchmediaParam) {
    if (matchmediaParam.matches) {
      if ($tabContets.length > 0) {
        var windowWidth = $(window).outerWidth();
        var diffWidth = void 0;
        if (windowWidth >= App.global.constants.GRID.LG) {
          diffWidth = windowWidth - 1140;
        } else {
          diffWidth = windowWidth - 940;
        }

        $tabContets.css({
          'margin-left': Math.floor(-1 * diffWidth / 2 - 10) + 'px',
          'margin-right': Math.floor(-1 * diffWidth / 2 - 10) + 'px',
          width: 'calc( 100% + ' + (diffWidth + 20) + 'px)'
        });
      }
    }
  };

  if ($component.length > 0) {
    init();
  }
}();