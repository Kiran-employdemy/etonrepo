/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  var escapeAttr = window.App.global.utils.escapeAttr;
  var unescapeAttr = window.App.global.utils.unescapeAttr;

  var App = window.App || {};
  App.ActiveFilters = function () {
    _createClass(ActiveFilters, [{
      key: 'init',

      /**
       * Initialize the ActiveFilters class
       * @function init
       * @param {object} container - A reference to the ActiveFilters container's DOM element so data attributes may be referenced
      */
      value: function init(container) {
        var facetedNavigationHeader = document.querySelector('.faceted-navigation-header');

        this.container = container;
        this.activeFilterValues = this.container.dataset.activeFilterValues ? unescapeAttr(this.container.dataset.activeFilterValues) : [];
        this.clearFiltersText = this.container.dataset.clearFiltersText;
        /** if facetedNavigationHeader exists, use the activeFacetCount data attribute. If not, use the activeFilterValues length (used in the context of submittal builder)  */
        this.activeFilterCount = facetedNavigationHeader && typeof facetedNavigationHeader.dataset.activeFacetCount !== 'undefined' ? facetedNavigationHeader.dataset.activeFacetCount : this.activeFilterValues.length;
        this.redirectUrl = facetedNavigationHeader ? facetedNavigationHeader.dataset.redirectLink : null;

        this.render();
      }

      /**
       * @function markup
       * The current html representation of the component based upon the current properties.
       */

    }, {
      key: 'markup',
      value: function markup() {
        return '\n      <div class="' + (this.activeFilterCount > 0 ? '' : 'hidden') + '">\n        <div class="' + (this.activeFilterCount > 0 && !this.showingOnlyPackage ? '' : 'hidden') + '">\n          ' + this.activeFilters.map(function (_ref) {
          var name = _ref.name,
              value = _ref.value,
              title = _ref.title;
          return '\n            <div class="faceted-navigation-header__active-filter"\n              data-name="' + escapeAttr(name) + '"\n              data-value="' + escapeAttr(value) + '"\n              data-title="' + escapeAttr(title) + '"></div>\n          ';
        }).join('') + '\n        </div>\n\n        <a href="#"\n          rel="nofollow"\n          class="faceted-navigation__action-link faceted-navigation__action-link--clear-filters faceted-navigation__action-link--clear-filters--mobile ' + (this.activeFilters.length > 0 ? '' : 'hidden') + '">\n            ' + this.clearFiltersText + '\n        </a>\n      </div>\n      ';
      }

      /**
       * @function
       * Renders the component based upon the current properties.
       */

    }, {
      key: 'render',
      value: function render() {
        this.container.innerHTML = this.markup();
        this.clearAllFiltersButton = this.container.querySelector('.faceted-navigation__action-link--clear-filters');
        this.container.dispatchEvent(new CustomEvent('active-filters-rendered'));

        this.addEventListeners();
      }

      /**
       * @function addEventListeners - Adds event listeners for the internal implementation
       * of this component.
       */

    }, {
      key: 'addEventListeners',
      value: function addEventListeners() {
        var _this = this;

        [].concat(_toConsumableArray(this.container.querySelectorAll('.faceted-navigation-header__active-filter'))).forEach(function (activeFilterContainer) {
          return new App.ActiveFilter(activeFilterContainer).addEventListener('removed', function (_ref2) {
            var _ref2$detail = _ref2.detail,
                name = _ref2$detail.name,
                value = _ref2$detail.value;
            return _this.container.dispatchEvent(new CustomEvent('filterRemoved', { detail: { name: name, value: value } }));
          });
        });

        this.clearAllFiltersButton.addEventListener('click', function (e) {
          e.preventDefault();
          /** if a redirect URL is defined, send the user along (this is used in non-submittal builder situations) */
          if (_this.redirectUrl) {
            window.location = _this.redirectUrl;
          }
          _this.clearAllFilters();
        });
      }

      /**
       * @function activeFilters
       * The currently active filters provided in an array. This will never return null
       * and will return an empty array if there are no active filters.
       */

    }, {
      key: 'clearAllFilters',


      /**
       * @function clearAllFilters
       * This only dispatches an event it does not actually do the clearing of filters.
       * This is meant to be used as a way to tell client code that all the filters should be cleared.
       */
      value: function clearAllFilters() {
        this.container.dispatchEvent(new CustomEvent('clearAllFilters'));
      }

      /**
       * The active filter chips section
       * @constructor
       * @param {object} container - A reference to the ActiveFilters container's DOM element
      */

    }, {
      key: 'activeFilters',
      get: function get() {
        return this.activeFilterValues ? this.activeFilterValues : [];
      }

      /**
       * @function activeFilters
       * This will set the currently active filters.
       */
      ,
      set: function set(activeFilters) {
        this.activeFilterValues = activeFilters;

        this.render();
      }
    }]);

    function ActiveFilters(container) {
      _classCallCheck(this, ActiveFilters);

      // The constructor should only contain the boiler plate code for finding or creating the reference.
      if (typeof container.dataset.ref === 'undefined') {
        this.ref = Math.random();
        App.ActiveFilters.refs[this.ref] = this;
        container.dataset.ref = this.ref;
        this.init(container);
      } else {
        // If this element has already been instantiated, use the existing reference.
        return App.ActiveFilters.refs[container.dataset.ref];
      }
    }

    /**
     * @function addEventListener - A method to allow clients to add event listeners
     *  to this component. Calls the addEventListener method of this components containing element.
     */


    _createClass(ActiveFilters, [{
      key: 'addEventListener',
      value: function addEventListener() {
        return this.container.addEventListener.apply(this.container, arguments);
      }

      /**
       * @function removeEventListener - A method to allow clients to remove event listeners
       *  from this component. Calls the removeEventListener method of this components containing element.
       */

    }, {
      key: 'removeEventListener',
      value: function removeEventListener() {
        return this.container.removeEventListener.apply(this.container, arguments);
      }
    }]);

    return ActiveFilters;
  }();

  App.ActiveFilters.refs = {};
})();