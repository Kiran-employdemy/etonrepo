/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable no-undef */
// noinspection JSConstantReassignment

if (typeof require !== 'undefined') {
  var globalConstants = require('../../../global/js/etn-new-global-constants');
  constants = require('./advanced-search-constants');
  displayStyles = globalConstants.displayStyles;
  eventListeners = globalConstants.eventListeners;
  customEvents = constants.customEvents;
}

var FilterComponent = function () {
  function FilterComponent(clickHandler, filterRemoved, filterAdded) {
    _classCallCheck(this, FilterComponent);

    this.clickHandler = clickHandler;
    this.filterRemoved = filterRemoved;
    this.filterAdded = filterAdded;
    this.registerDateClicks();
  }

  _createClass(FilterComponent, [{
    key: 'renderFilters',
    value: function renderFilters(searchResult) {
      var filterTemplate = document.getElementById(elementIdOf.mustacheTemplate.forFilter);
      var filterdisplay = document.querySelector(querySelectorFor.filterDisplay);
      if (filterdisplay !== null && filterTemplate) {
        var template = filterTemplate.innerHTML;
        this.fillSearchI18nKeysToFacetsList(searchResult);
        filterdisplay.innerHTML = window.Mustache.render(template, searchResult.facets);
        this.closeMobileAccordions();
        if (filterdisplay.innerHTML.indexOf(elementIdOf.secureAttributes) > -1) {
          var innerspan = document.getElementById(elementIdOf.secureAttributes).querySelector(querySelectorFor.filterInnerSpan) || {};
          var securelock = this.getSecurelock();
          innerspan.insertBefore(securelock, innerspan.lastChild);
        }
        this.displayViewMoreAndLessAndInitializeEvents(searchResult);
        this.addClickListenerToMobileFilter();
        this.registerFacetsEventListener();
      }
    }
  }, {
    key: 'fillSearchI18nKeysToFacetsList',
    value: function fillSearchI18nKeysToFacetsList(searchResult) {
      var searchResultsFilter = document.getElementById(elementIdOf.searchResultsFilter);
      var searchResultsFilterDataset = searchResultsFilter.dataset;
      var searchLabel = searchResultsFilterDataset.searchLabel;
      var searchPlaceHolder = searchResultsFilterDataset.facetSearchPlaceholder;
      if (searchResult.facets && searchResult.facets.facetGroupList && searchResult.facets.facetGroupList.length > 0) {
        searchResult.facets.facetGroupList.forEach(function (groupList) {
          groupList.searchLabel = searchLabel;
          groupList.searchPlaceHolder = searchPlaceHolder;
        });
      }
    }
  }, {
    key: 'addClickListenerToMobileFilter',
    value: function addClickListenerToMobileFilter() {
      var self = this;
      document.getElementById(elementIdOf.mobileFilterButton).onclick = function (event) {
        event.stopPropagation();
        document.body.classList.add(elementClasses.facetsOpen);
        self.closeMobileAccordions();
      };
      document.querySelector(querySelectorFor.mobileFilterCloseIcon).onclick = function (event) {
        event.stopPropagation();
        document.body.classList.remove(elementClasses.facetsOpen);
      };
    }
  }, {
    key: 'closeMobileAccordions',
    value: function closeMobileAccordions() {
      var isMobile = window.innerWidth < window.App.global.constants.GRID.MD ? literals.TRUE : literals.FALSE;
      document.querySelectorAll(querySelectorFor.mobileCollapsable).forEach(function (mobileCollapsable) {
        mobileCollapsable.getAttribute(elementAttributes.ariaExpanded) === isMobile && mobileCollapsable.click();
      });
    }
  }, {
    key: 'displayViewMoreAndLessAndInitializeEvents',
    value: function displayViewMoreAndLessAndInitializeEvents(searchResult) {
      var defaultShow = searchResult.facetsViewMoreOffset;
      var filterGroups = document.querySelectorAll(querySelectorFor.filterGroups);
      // eslint-disable-next-line no-eq-null, eqeqeq

      filterGroups.forEach(function (filterGroup) {
        var filters = filterGroup.querySelectorAll(querySelectorFor.listItem);
        if (filters.length > defaultShow) {
          filterGroup.querySelector(querySelectorFor.filterViewMore).style.display = displayStyles.block;
          filterGroup.querySelector(querySelectorFor.filterViewLess).style.display = displayStyles.none;
          var viewMoreCount = filters.length - defaultShow;
          filterGroup.querySelector(querySelectorFor.filterViewMore + ' ' + htmlTags.bdi).innerHTML = '(' + viewMoreCount + ')';
        } else {
          filterGroup.querySelector(querySelectorFor.filterViewMore).style.display = displayStyles.none;
          filterGroup.querySelector(querySelectorFor.filterViewLess).style.display = displayStyles.none;
        }
        for (var j = 0; j < filters.length; j++) {
          if (filters.length > defaultShow && j >= defaultShow) {
            filters[j].classList.add(elementClasses.hide);
            filters[j].classList.add(elementClasses.more);
          }
        }
      });
      this.attachEventListenersToViewMoreLess();
      this.initializeAutoSuggestionLogic();
    }
  }, {
    key: 'getSecurelock',
    value: function getSecurelock() {
      var seculeLockIcon = document.createElement(htmlTags.icon);
      seculeLockIcon.className = elementClasses.secureIcon;
      return seculeLockIcon;
    }
  }, {
    key: 'attachEventListenersToViewMoreLess',
    value: function attachEventListenersToViewMoreLess() {
      document.querySelectorAll(querySelectorFor.filterViewMore).forEach(function (viewMore) {
        viewMore.onclick = function () {
          var idViewmore = viewMore.parentElement.parentElement.id;
          var viewLess = document.getElementById(idViewmore).querySelector(querySelectorFor.filterViewLess);
          viewLess.classList.remove(elementClasses.hide);
          viewMore.classList.add(elementClasses.hide);
          viewLess.style.display = displayStyles.block;
          document.getElementById(idViewmore).querySelectorAll(querySelectorFor.more).forEach(function (filterValue) {
            filterValue.classList.remove(elementClasses.hide);
            filterValue.style.display = displayStyles.block;
          });
        };
      });

      document.querySelectorAll(querySelectorFor.filterViewLess).forEach(function (viewLess) {
        viewLess.onclick = function () {
          var idViewLess = viewLess.parentElement.parentElement.id;
          var viewMore = document.getElementById(idViewLess).querySelector(querySelectorFor.filterViewMore);
          viewMore.classList.remove(elementClasses.hide);
          viewLess.classList.remove(elementClasses.hide);
          viewLess.style.display = displayStyles.none;
          document.getElementById(idViewLess).querySelectorAll(querySelectorFor.more).forEach(function (filterValue) {
            filterValue.classList.add(elementClasses.hide);
          });
        };
      });
    }
  }, {
    key: 'initializeAutoSuggestionLogic',
    value: function initializeAutoSuggestionLogic() {
      document.body.onclick = function () {
        document.querySelectorAll(querySelectorFor.autoSuggestionItems).forEach(function (autoSuggestion) {
          autoSuggestion.classList.add(elementClasses.hide);
          autoSuggestion.classList.remove(elementClasses.show);
        });
      };
      document.querySelectorAll(querySelectorFor.autoSuggestionInput).forEach(function (input) {
        input.addEventListener(eventListeners.KEY_UP, function () {
          var inputString = input.value.toLowerCase();
          var filterRange = input.dataset.searchboxFor;
          Array.from(document.querySelectorAll('#custom-' + filterRange + ' .li-div')).forEach(function (filter) {
            var filterTitle = filter.dataset.filterTitle.toLowerCase();
            var classList = filter.classList;
            classList.remove(elementClasses.show);
            classList.remove(elementClasses.hide);
            if (filterTitle.indexOf(inputString) !== -1) {
              classList.add(elementClasses.show);
              classList.remove(elementClasses.hide);
            } else {
              classList.remove(elementClasses.show);
              classList.add(elementClasses.hide);
            }
            filter.onclick = function () {
              document.querySelectorAll(querySelectorFor.autoSuggestionItems).forEach(function (item) {
                item.classList.add(elementClasses.hide);
                item.classList.remove(elementClasses.show);
              });
            };
          });
        });
      });
    }
  }, {
    key: 'registerFacetsEventListener',
    value: function registerFacetsEventListener() {
      var self = this;
      document.querySelectorAll(querySelectorFor.facetFilters).forEach(function (filter) {
        filter.onclick = function () {
          if (filter.checked) {
            filter.parentElement.classList.add(elementClasses.checked);
            var filterNameToRemove = '';
            if (filter.type === 'radio') {
              filterNameToRemove = self.filterRemoved(filter, true);
            }
            self.clickHandler.dispatchEvent(customEvents.filterSelected(filter, filterNameToRemove));
            self.filterAdded(filter);
          } else {
            filter.parentElement.classList.remove(elementClasses.checked);
            self.clickHandler.dispatchEvent(customEvents.filterDeselected(filter.value));
            self.filterRemoved(filter, false);
          }
        };
      });
    }
  }, {
    key: 'registerDateClicks',
    value: function registerDateClicks() {
      var self = this;
      var applyDate = document.querySelector(querySelectorFor.applyDate);
      var resetDate = document.querySelector(querySelectorFor.resetDate);
      if (!applyDate || !resetDate) {
        return;
      }
      applyDate.onclick = function () {
        var startDate = self.getStartDate();
        var endDate = self.getEndDate();
        if (startDate === null || startDate === undefined || startDate === '') {
          self.showDateError();
        } else {
          self.hideDateError();
          self.clickHandler.dispatchEvent(customEvents.applyDateClicked(startDate, endDate));
        }
      };

      resetDate.onclick = function () {
        self.clearDateFields();
        document.getElementById(elementIdOf.dateError).classList.add(elementClasses.hide);
        self.hideDateError();
        self.clickHandler.dispatchEvent(customEvents.RESET_DATES_CLICKED);
      };
    }
  }, {
    key: 'getEndDate',
    value: function getEndDate() {
      var endDate = document.querySelector(querySelectorFor.endDate);
      if (!endDate) {
        return '';
      }
      return endDate.value;
    }
  }, {
    key: 'getStartDate',
    value: function getStartDate() {
      var startDate = document.querySelector(querySelectorFor.startDate);
      if (!startDate) {
        return '';
      }
      return startDate.value;
    }
  }, {
    key: 'clearDateFields',
    value: function clearDateFields() {
      document.querySelectorAll(querySelectorFor.dateInput).forEach(function (dateInput) {
        dateInput.value = '';
      });
    }
  }, {
    key: 'hideDateError',
    value: function hideDateError() {
      var dateError = document.getElementById(elementIdOf.dateError);
      if (dateError) {
        dateError.classList.add(elementClasses.hide);
      }
    }
  }, {
    key: 'showDateError',
    value: function showDateError() {
      var dateError = document.getElementById(elementIdOf.dateError);
      if (dateError) {
        dateError.style.display = displayStyles.block;
        dateError.classList.remove(elementClasses.hide);
      }
    }
  }, {
    key: 'hideFilters',
    value: function hideFilters() {
      var facetFilterContainer = document.querySelector(this.getStartDate() === '' ? querySelectorFor.filterContainer : querySelectorFor.filterContainerWithoutDates);
      facetFilterContainer.style.display = displayStyles.none;
    }
  }, {
    key: 'showFilters',
    value: function showFilters() {
      var facetFilterContainer = document.querySelector(querySelectorFor.filterContainer);
      var facetFilterContainerWithoutDates = document.querySelector(querySelectorFor.filterContainerWithoutDates);
      facetFilterContainer.style.display = '';
      facetFilterContainerWithoutDates.style.display = '';
    }
  }]);

  return FilterComponent;
}();

var createFilterComponent = function createFilterComponent(clickHandler, filterRemoved, filterAdded) {
  return new FilterComponent(clickHandler, filterRemoved, filterAdded);
};

if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
  module.exports = { createFilterComponent: createFilterComponent };
}
