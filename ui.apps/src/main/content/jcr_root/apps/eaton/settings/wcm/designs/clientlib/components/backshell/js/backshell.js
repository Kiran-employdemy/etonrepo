/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

//-----------------------------------
// Backshell Component
//-----------------------------------

$(document).ready(function () {
  var backshellContainer = $('.backshell-config');
  $('.backshell-config, #part-number-meta, .bs-tolerance, .part-number-display-banner').addClass('u-hide');
  $('select').niceSelect();

  // Component ID
  var idComponentProduct = '#edit-product';
  var idComponentSeries = '#edit-series';
  var idComponentPartNumber = '#edit-part-number';
  var technicalDrawing = $('.part-image-drawing');

  // Variables to build part number
  var finalProduct = '';
  var finalProductId = '';
  var finalSeries = '';
  var finalPartNumber = '';
  var finalPartNumberId = '';
  var finalTolarence = '';

  // Helper variables
  var finalLeftMetaArray = [];
  var finalPartNumberArray = [];
  var flagNote = false;

  $.ajax({
    type: 'GET',
    url: backshellContainer.attr('data-resource') + '.json',
    success: function success(response) {
      if (response) {
        var searchResult = '';
        if (typeof response === 'string') {
          searchResult = JSON.parse(response);
        } else {
          searchResult = response;
        }
        showFormUI(searchResult);
      }
    },
    error: function error(response) {
      console.log('ERROR', response);
    }
  });

  function showFormUI(response) {
    backshellContainer.removeClass('u-hide');
    $('#default-message').addClass('u-hide');
    var submitButton = $('#souriau-toolkit-backshell-main-form');
    var productsJson = response && response.products ? response.products : [];
    var partNumberComponentResponseJson = [];

    // Populate product list
    setDropdownOptions(idComponentProduct, productsJson, 'code', 'name');

    $('select').on('change', function () {
      onChangeCheckElement(this.id, this.value);
    });

    function onChangeCheckElement(id, value) {

      // Product
      if ('#' + id === idComponentProduct) {
        if (value && value.length && Number(value) !== -1) {
          if (value !== finalProduct) {
            removeSelectOptions(idComponentSeries);
            removeSelectOptions(idComponentPartNumber);
            resetPartNumberComponentSection();
          }
          finalProduct = value;
          var selectedObj = getObjectBy(productsJson, 'code', value);
          finalProductId = selectedObj.id;
          var seriesList = selectedObj.series;
          setDropdownOptions(idComponentSeries, seriesList, 'code', 'name'); // Fill series
        } else {
          removeSelectOptions(idComponentSeries);
          removeSelectOptions(idComponentPartNumber);
          resetPartNumberComponentSection();
        }
      }

      // Series
      if ('#' + id === idComponentSeries) {
        if (value && value.length && Number(value) !== -1) {
          if (value !== finalSeries) {
            removeSelectOptions(idComponentPartNumber);
            resetPartNumberComponentSection();
          }
          finalSeries = value;
          var _seriesList = getObjectBy(productsJson, 'code', finalProduct).series;
          var partNumberList = getObjectBy(_seriesList, 'code', value).basicPartNumbers;
          setDropdownOptions(idComponentPartNumber, partNumberList, 'part_id', 'part_name'); // Fill part number
        } else {
          removeSelectOptions(idComponentPartNumber);
          resetPartNumberComponentSection();
        }
      }

      // Part number
      if ('#' + id === idComponentPartNumber) {
        if (value && value.length && Number(value) !== -1) {
          var option = $('#' + id).find('option:selected');
          var text = option.text(); // to get <option>Text</option> content
          if (value !== finalPartNumber) {
            resetPartNumberComponentSection();
          }
          finalPartNumberId = value;
          finalPartNumber = text;
          var _seriesList2 = getObjectBy(productsJson, 'code', finalProduct).series;
          var _partNumberList = getObjectBy(_seriesList2, 'code', finalSeries).basicPartNumbers;
          var selectedPartNumberObject = getObjectBy(_partNumberList, 'part_id', value);
          finalTolarence = selectedPartNumberObject.useToleranceMessage;
          getSecondJson(finalPartNumberId);
        } else {
          resetPartNumberComponentSection();
        }
      }
    }

    // Helper functions

    function removeSpaceFromString(str) {
      return str ? ('' + str).split(' ').join('') : str;
    }

    function sortByPositionAscendingOrder(comp) {
      return comp.sort(function (a, b) {
        return parseFloat(a.componentPosition) - parseFloat(b.componentPosition);
      });
    }

    function getObjectBy(array, identifier, value) {
      return array.find(function (item) {
        return removeSpaceFromString(item[identifier]) === value;
      });
    }

    function removeSelectOptions(id) {
      $(id + ' option:not(:first)').remove();
      $('' + id).niceSelect('destroy');
      $('' + id).niceSelect();
    }

    function setDropdownOptions(id, array, value, description) {
      $(id + ' option:not(:first)').remove();
      var op = array.map(function (item) {
        return '<option value=' + (item[value] ? removeSpaceFromString(item[value]) : '') + '>' + item[description] + '</option>';
      }).join('\n');
      $(id).append(op);
      $('' + id).niceSelect('update');
    }

    function setDropdownOptionsForPartNumberComponent(id, array) {
      return '<select id=' + id + ' class=\'cc-part-num-comp wide\'>\n        <option value=\'-1\' selected=\'selected\'>- Select -</option>\n        ' + (array ? array.map(function (item) {
        return item.value ? '<option value=' + removeSpaceFromString(item.valueId) + '>' + item.valueDisplay + '</option>' : '';
      }).join('\n') : '') + '\n      </select>';
    }

    function getSelectedValueOfPartNumberComponentJson(fieldId, optionId) {
      var parentObj = partNumberComponentResponseJson.componentDefinitions.find(function (item) {
        return item.componentId === fieldId;
      });
      var optionObj = parentObj ? parentObj.optionItems.find(function (op) {
        return Number(op.valueId) === Number(optionId);
      }) : '';

      // For backshell.partId$179.json - If part ID is present in optionItems, then reset 'SERIES' & 'PART NUMBER'
      if (optionObj.partId && Number(finalProductId) === 5) {
        // "Protective cover"
        var findSeries = productsJson.find(function (el) {
          return el.id === 5;
        }).series;
        var findObjectOfBasicPartNumber = findSeries.find(function (element) {
          return element.basicPartNumbers.find(function (el) {
            return el.part_id === optionObj.partId;
          });
        });

        if (findObjectOfBasicPartNumber) {
          // Update series
          $(idComponentSeries).val(findObjectOfBasicPartNumber.code).trigger('change');
          $(idComponentSeries).niceSelect('update');
          finalSeries = findObjectOfBasicPartNumber.code;

          // Update part number
          $(idComponentPartNumber).val(optionObj.partId).trigger('change');
          $(idComponentPartNumber).niceSelect('update');
          var option = $(idComponentPartNumber).find('option:selected');
          var text = option.text(); // to get <option>Text</option> content
          finalPartNumberId = optionObj.partId;
          finalPartNumber = text;
        }
      }

      // For backshell.partId$122.json  - If part ID is present in optionItems, then reset 'PART NUMBER' dropdown value with the value present in part ID.
      else if (optionObj.partId) {
          $(idComponentPartNumber).val(optionObj.partId);
          $(idComponentPartNumber).niceSelect('update');
          var _option = $(idComponentPartNumber).find('option:selected');
          var _text = _option.text(); // to get <option>Text</option> content
          finalPartNumberId = optionObj.partId;
          finalPartNumber = _text;
        }

      return optionObj ? optionObj.value : '';
    }

    function resetPartNumberComponentSection() {
      partNumberComponentResponseJson = [];
      $('#part-number-components-section').addClass('u-hide');
      resetResultSection();
    }

    function resetResultSection() {
      finalLeftMetaArray = [];
      finalPartNumberArray = [];
      $('#part-number-meta, .part-number-display-banner, .bs-tolerance, #notes-section, #backshell-product-card').addClass('u-hide');
      $('#calculate').addClass('b-button__primary--primary-disabled');
      resetWarningNote();
      resetTechnicalDrawing();
    }

    function resetTechnicalDrawing() {
      technicalDrawing.empty();
    }

    function resetWarningNote() {
      $('.warning-msg')[0].innerHTML = '';
    }

    function showHideErrorBanner(task, data) {
      var errorBanner = $('#error-banner-backshell');
      if (task === 'show') {
        errorBanner[0].innerHTML = data;
        $('.u-error').css({ display: 'flex', opacity: '1' });
      } else {
        errorBanner[0].innerHTML = '';
        $('.u-error').css({ display: 'none', opacity: '0' });
      }
    }

    /**
     *
     * JSON 2
     *
     */

    function getSecondJson(partId) {
      $.ajax({
        type: 'GET',
        url: backshellContainer.attr('data-resource') + '.partId$' + partId + '.json',
        success: function success(response) {
          var searchResult = '';
          if (typeof response === 'string') {
            searchResult = JSON.parse(response);
          } else {
            searchResult = response;
          }
          if (searchResult) {
            checkPartNumberComponentApi(searchResult);
          }
        },
        error: function error(response) {
          console.log('ERROR', response);
        }
      });
    }

    function checkPartNumberComponentApi(response) {
      if (response && response !== {} && !$.isEmptyObject(response)) {
        $('#part-number-components-section').removeClass('u-hide');
        showPartNumberComponentsUi(response);
        partNumberComponentResponseJson = response;
        if (response.componentDefinitions.length === 0) {
          var disabledButtonClass = 'b-button__primary--primary-disabled';
          $('#calculate').removeClass(disabledButtonClass);
        }
      }
    }

    function showPartNumberComponentsUi(response) {
      var fieldPartNumberComponents = iterateJson(response);
      $('#part-number-components-section').html(fieldPartNumberComponents);
      $('select').niceSelect();

      // Based on 'selectedValue', pre-select the value in dropdown on load
      response.componentDefinitions.forEach(function (comp) {
        if (comp.selectedValue) {
          partNumberComponentResponseJson = response;
          var showOnLoad = comp.optionItems.find(function (obj) {
            return obj.value === comp.selectedValue;
          });
          $('#' + comp.componentId).val(showOnLoad.valueId).trigger('change');
          $('#' + comp.componentId).niceSelect('update');
        }
      });
    }

    function iterateJson(components) {
      var addDescription = addDescriptionToJson(components.componentDefinitions);
      var sortedByPostion = sortByPositionAscendingOrder(addDescription);
      var filterShowList = sortedByPostion.filter(function (item) {
        return item.showList !== 0;
      });
      var filterDropdownOptions = filterShowList.filter(function (item) {
        return item.temp_options_first_load = item.relationComponents.length > 0 ? [] : item.optionItems;
      });
      return filterDropdownOptions.map(function (comp) {
        return '<div class=\'form-item form-item__b-margin\'>\n                                                  <label class=\'form-item-label\'>' + comp.componentDisplayName + '</label>\n                                                  ' + setDropdownOptionsForPartNumberComponent(comp.componentId, comp.temp_options_first_load) + '\n                                                  ' + (comp.description ? '<span class="description-note"> ' + comp.description + ' </span>' : '') + '\n                                                  ' + ('<span class=\'error-note error-note-' + comp.componentId + '\'></span>') + '\n                                                </div>';
      }).join('\n');
    }

    function addDescriptionToJson(secondJson) {
      // Add description property
      secondJson.forEach(function (element) {
        return element.description = '';
      });
      // If 'showList' = 0 , append its 'componentDisplayName' as 'description' to the previous object which has 'showList' = 1
      return secondJson.reduce(function (acc, currentObj) {
        if (currentObj.showList === 0) {
          var prevObj = findPrevObjectWithShowListEqualToOne(acc, currentObj.componentId);
          if (prevObj) {
            prevObj.description = prevObj.description + currentObj.componentDisplayName;
            // Find obj and replace
            var targeAcc = acc.find(function (obj) {
              return obj.componentId === prevObj.componentId;
            });
            Object.assign(targeAcc, prevObj);
          }
        } else {
          acc.push(currentObj);
        }
        return acc;
      }, []);
    }

    function findPrevObjectWithShowListEqualToOne(acc, currentId) {
      var _loop = function _loop(i) {
        var findPrevObj = acc.find(function (el) {
          return el.componentId === i && el.showList === 1;
        });
        if (findPrevObj) {
          return {
            v: findPrevObj
          };
        }
      };

      for (var i = currentId; i < 1000; i--) {
        var _ret = _loop(i);

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
      }
      return true;
    }

    // On change of part number component section (2nd JSON Section)
    $('#part-number-components-section').on('change', '.cc-part-num-comp', function (event) {
      if (partNumberComponentResponseJson && partNumberComponentResponseJson.componentDefinitions) {
        var selectedId = Number(this.id);
        var filterByRelationComponents = partNumberComponentResponseJson.componentDefinitions.filter(function (item) {
          return item.relationComponents.includes(Number(selectedId));
        });

        if (this.value && this.value.length && Number(this.value) !== -1) {
          // Check for relational components and populate the dropdown.
          var selectedValue = getSelectedValueOfPartNumberComponentJson(selectedId, this.value);
          populateDropdownBasedOnRelationalComponent(filterByRelationComponents, selectedValue);
          // Check if errorValue is selected
          showErrorValueInTheFieldIfPresentInJson(selectedValue, selectedId);
        } else {
          // relationComponents - Reset the fields that are dependent on the changed field
          filterByRelationComponents.forEach(function (item) {
            return removeSelectOptions('#' + item.componentId);
          });
        }
        resetResultSection();
        // Check if all fields are filled
        checkIfAllInputFieldsAreFilled(event);
      }
    });

    function populateDropdownBasedOnRelationalComponent(filterByRelationComponents, selectedValue) {
      // relationComponents -- It is the 'componentId' based on which the current 'optionItems' has to be filtered with values present in 'optionItems.groupValue'
      filterByRelationComponents.forEach(function (item) {
        var optionsByGroupValue = item.optionItems.filter(function (i) {
          return [].concat.apply([], i.groupValue).includes(selectedValue.toString() || selectedValue.toUpperCase());
        });
        setDropdownOptions('#' + item.componentId, optionsByGroupValue, 'valueId', 'valueDisplay');
      });
    }

    function showErrorValueInTheFieldIfPresentInJson(selectedValue, selectedId) {
      var selectedObject = partNumberComponentResponseJson.componentDefinitions.filter(function (item) {
        return Number(item.componentId) === selectedId;
      });
      var selectorForErrorNoteOnField = $('.error-note-' + selectedId);
      if (selectedObject && selectedObject[0].errorValue && selectedObject[0].errorValue === selectedValue) {
        var errorData = backshellContainer.attr('data-component-error-message');
        selectorForErrorNoteOnField[0].innerHTML = errorData;
        showHideErrorBanner('show', errorData);
      } else {
        selectorForErrorNoteOnField[0].innerHTML = '';
        $('.error-note').text() ? '' : showHideErrorBanner('hide', '');
      }
    }

    function checkIfAllInputFieldsAreFilled(e) {
      var disabledButtonClass = 'b-button__primary--primary-disabled';
      var chosenFlag = false;
      var countEmptyField = $('select').filter(function () {
        return Number($(this).val()) === -1;
      }); // Count empty fields
      chosenFlag = e.target.selectedIndex === 0 ? false : true;

      // Enable submit button
      if (chosenFlag && countEmptyField && countEmptyField.length === 0) {
        $('#calculate').removeClass(disabledButtonClass);
      } else {
        $('#calculate').addClass(disabledButtonClass);
        resetResultSection();
      }
    }

    function populatePartNotes() {
      if (partNumberComponentResponseJson.partNotes && partNumberComponentResponseJson.partNotes.length && partNumberComponentResponseJson.partNotes[0] !== null) {
        $('#notes-section').removeClass('u-hide');
        flagNote = true;
        var liHTML = '';
        partNumberComponentResponseJson.partNotes.forEach(function (x) {
          return liHTML += '<li>' + x.message + '</li>';
        });
        $('#notes').html(liHTML);
      } else {
        flagNote = false;
      }
    }

    // Print
    $('#prints').click(function () {
      var config = {
        printable: 'backshell-config',
        targetStyles: ['*'],
        scanStyles: false,
        type: 'html',
        ignoreElements: ['souriau-toolkit-backshell-main-form', 'prints', 'backshell-contact-btn', 'backshell-product-card', '' + (flagNote ? 'notes-sections' : 'notes-section'), '' + (finalTolarence === 'a' ? 'message-b' : finalTolarence === 'b' ? 'message-a' : '')],
        style: 'body { margin: 0; font-size: 16px; } #print-part-number {font-weight: bold!important; margin-bottom: 50px!important} #part-number-meta{ margin-top: 50px!important} .left-meta-data{float: left!important; width: 50%!important;} .right-meta-data{float: left!important; width: 40%!important;padding-left:5px!important;} .bs-tolerance{margin-top: 40px!important; display: flex!important; width:100%!important} #notes-section{margin-top: 40px!important} .two-indent{padding-left: 14px;} .three-indent{padding-left: 26px;} .warning-msg{margin-bottom: 40px!important}'
      };
      // eslint-disable-next-line no-undef
      printJS(config);
    });

    // Warning message above the technical drawing
    function showWarningMessage(errorCondition) {

      var getValueBasedOnRelationIdOne = errorCondition.relation_id_1 > 0 ? getSelectedValueOfPartNumberComponentJson(errorCondition.relation_id_1, $('#' + errorCondition.relation_id_1).val()) : '';

      var getValueBasedOnRelationIdTwo = errorCondition.relation_id_2 > 0 ? getSelectedValueOfPartNumberComponentJson(errorCondition.relation_id_2, $('#' + errorCondition.relation_id_2).val()) : '';
      getValueBasedOnRelationIdTwo = /[a-z]/i.test(getValueBasedOnRelationIdTwo) ? getValueBasedOnRelationIdTwo : Number(getValueBasedOnRelationIdTwo).toString();

      var getValueBasedOnRelationIdThree = errorCondition.relation_id_3 > 0 ? getSelectedValueOfPartNumberComponentJson(errorCondition.relation_id_3, $('#' + errorCondition.relation_id_3).val()) : '';

      var getValueOfErrorComponent = errorCondition.componentId ? getSelectedValueOfPartNumberComponentJson(errorCondition.componentId, $('#' + errorCondition.componentId).val()) : '';

      var getValueBasedOnConfigComponent = errorCondition.config_component > 0 ? getSelectedValueOfPartNumberComponentJson(errorCondition.config_component, $('#' + errorCondition.config_component).val()) : '';

      var getValueBasedOnLengthComponent = errorCondition.length_component > 0 ? getSelectedValueOfPartNumberComponentJson(errorCondition.length_component, $('#' + errorCondition.length_component).val()) : '';
      getValueBasedOnLengthComponent = getValueBasedOnLengthComponent && getValueBasedOnLengthComponent !== ' ';

      var conditionalResultComponentValue = '';
      // let conditionalResultRelationalValue = '';

      if (errorCondition.relation_id_3 > 0) {
        errorCondition.errorGroupValue.filter(function (el) {
          return el.componentId === errorCondition.componentId && el.relationValue === getValueBasedOnRelationIdThree;
        });
      } else if (errorCondition.relation_id_2 > 0) {
        var errorValue = errorCondition.errorGroupValue.find(function (el) {
          return el.componentId === errorCondition.componentId && el.relationValue === getValueBasedOnRelationIdTwo;
        });
        /* let errorGroup = errorCondition.errorGroup.find(el => {
          return el.componentId === errorCondition.componentId && el.relationValue === getValueBasedOnRelationIdOne;
        });*/
        conditionalResultComponentValue = errorValue ? errorValue.componentValue : '';
        // conditionalResultRelationalValue = errorGroup ? errorGroup.relationValue : '';
      } else if (errorCondition.relation_id_1 > 0) {
        errorCondition.errorGroupValue.filter(function (el) {
          el.componentId === errorCondition.componentId && (el.relationValue === getValueBasedOnRelationIdOne || el.relationValue === getValueBasedOnRelationIdTwo || el.relationValue === getValueBasedOnRelationIdThree);
        });
      }

      // Error compare (getValueOfErrorComponent -- 'operator':error_compare  --  conditionalResultComponentValue) // If TRUE, then its an ERROR CASE
      var errMessage = '';
      if (conditionalResultComponentValue) {
        // Proceed only if conditionalResultComponentValue have any value
        if (errorCondition.error_compare === '>' ? Number(getValueOfErrorComponent) > Number(conditionalResultComponentValue) : errorCondition.error_compare === '<' ? Number(getValueOfErrorComponent) < Number(conditionalResultComponentValue) : Number(getValueOfErrorComponent) === Number(conditionalResultComponentValue)) {

          if (getValueBasedOnConfigComponent === errorCondition.exceptionsConfigS) {
            if (getValueBasedOnLengthComponent < errorCondition.min_length_value) {
              errMessage = backshellContainer.attr('data-component-error-message1');
              errMessage = errMessage.replace('${1}', errorCondition.min_length_value / 2);
              errMessage = errMessage.replace('${2}', errorCondition.min_length_value);
            } else {
              errMessage = backshellContainer.attr('data-component-error-message2');
            }
          } else if (getValueBasedOnConfigComponent === '' && Number(finalPartNumberId) === 2) {
            errMessage = backshellContainer.attr('data-component-error-message3');
          } else if (finalProductId > errorCondition.exceptionsReferenceId) {
            errMessage = backshellContainer.attr('data-component-error-message4');
          } else {
            errMessage = backshellContainer.attr('data-component-error-message5');
          }
        }
        return errMessage;
      }
    }

    /**
     *
     * Submit
     *
     */

    $(submitButton).on('submit', function (e) {
      e.preventDefault();

      if (!$('#calculate').hasClass('b-button__primary--primary-disabled')) {
        $('.message-a, .message-b').addClass('u-hide');
        $('#part-number-meta, .bs-tolerance, .part-number-display-banner').removeClass('u-hide');

        /*
        ** Prepare for final part number
        ** partBuildPosition -- Position of the selected value in the final part number.
        ** useValueForPartNumberBuild -- If true, use the value in the final part number.
        */
        // Loop the 2nd json to create the part number
        finalPartNumberArray = [];
        partNumberComponentResponseJson.componentDefinitions.forEach(function (compObj) {
          if (compObj.partBuildPosition && compObj.useValueForPartNumberBuild) {
            var selectedValue = getSelectedValueOfPartNumberComponentJson(compObj.componentId, $('#' + compObj.componentId).val());
            var specialCharacter = compObj.optionItems.find(function (op) {
              return op.value.toString() === selectedValue.toString() && op.specialPrefix && op.specialPrefix !== 'NULL';
            });
            finalPartNumberArray[compObj.partBuildPosition] = { data: specialCharacter ? specialCharacter.specialPrefix + selectedValue : selectedValue };
          }
        });

        if (Number(finalProductId) === 1 && partNumberComponentResponseJson.componentDefinitions.length === 1) {
          // "Self seating circular" & have only one component
          finalPartNumberArray.splice(0, 1, { data: finalSeries });
          finalPartNumberArray.splice(1, 0, { data: '-' + finalPartNumber });
        } else if (Number(finalProductId) === 2) {
          // "Rectangular Accessories"
          finalPartNumberArray.splice(0, 0, { data: finalPartNumber });
        } else if (Number(finalProductId) === 3) {
          // "Composite Accessories"
          finalPartNumberArray.splice(0, 1);
          finalPartNumberArray.splice(0, 0, { data: finalPartNumber.substring(0, 2) });
          finalPartNumberArray.splice(3, 0, { data: finalPartNumber.slice(2) });
        } else if (Number(finalProductId) === 4) {
          // "AS85049"
          finalPartNumberArray.splice(0, 0, { data: finalPartNumber });
        } else if (Number(finalProductId) === 5) {
          // "Protective cover"
          finalPartNumberArray.splice(0, 0, { data: finalPartNumber });
        } else {
          finalPartNumberArray.splice(0, 1, { data: finalSeries });
          finalPartNumberArray.splice(2, 0, { data: finalPartNumber });
        }
        var newString = '';
        finalPartNumberArray.forEach(function (item) {
          return newString += item.data.toString().toUpperCase();
        });

        $('#calc-result')[0].innerHTML = newString;

        // Show part note
        populatePartNotes();

        // Show tolerance
        if (finalTolarence === 'a') {
          $('.message-a').removeClass('u-hide');
        } else if (finalTolarence === 'b') {
          $('.message-b').removeClass('u-hide');
        } else {
          $('.message-a, .message-b').removeClass('u-hide');
          $('.message-a, .message-b').addClass('u-hide');
        }

        /*
        ** SHOW LEFT META DATA
        ** useForPartDesc - If true, use the object for left meta data
        ** prefixDescription -  Use the 'label' as a heading in left meta data
        ** suffixDescription - Suffix it after the value
        ** useValueAndTextForMetaData - Show 'value , text' as value
        ** useDisplayTextForMetadata - Show selected dropdown option display value as value
        ** displayLevel - number of indentation while displaying the result
        */
        if (partNumberComponentResponseJson && partNumberComponentResponseJson.productLeftHandMetadataDefinitions && partNumberComponentResponseJson.productLeftHandMetadataDefinitions.length) {
          finalLeftMetaArray = [];
          partNumberComponentResponseJson.productLeftHandMetadataDefinitions.forEach(function (item) {

            if (item.useForPartDesc || item.prefixDescription) {
              var compId = $('#' + item.componentId);
              var selectedValue = getSelectedValueOfPartNumberComponentJson(item.componentId, compId.val());
              var selectedText = compId.find('option:selected').text();
              var addDescriptionToJsons = addDescriptionToJson(partNumberComponentResponseJson.componentDefinitions);
              var selectedObjectWithDescription = addDescriptionToJsons.find(function (partObj) {
                return removeSpaceFromString(Number(partObj.componentId) === item.componentId) && partObj.description;
              });
              var calculatedLengthSuffix = '';
              if (selectedObjectWithDescription && selectedValue && selectedValue !== ' ') {
                calculatedLengthSuffix = '(' + Number(selectedText) * 0.5 + ' Inches)';
              }
              var suffix = item.suffixDescription ? item.suffixDescription : '';
              var key = item.label;
              var value = '';

              if (item.prefixDescription) {
                value = item.prefixDescription;
                key = '';
              } else if (item.useValueAndTextForMetaData) {
                value = selectedValue.toString().toUpperCase() + ', ' + selectedText;
              } else if (!item.useValueAndTextForMetaData && !item.useDisplayTextForMetadata) {
                value = selectedValue.toString().toUpperCase() + suffix;
              } else if (item.useDisplayTextForMetadata) {
                value = selectedText + ' ' + (calculatedLengthSuffix || suffix);
                // key = '';
              }

              var displayIndent = '';
              if (Number(item.displayLevel) === 2) {
                displayIndent = 'two-indent';
              } else if (Number(item.displayLevel) === 3) {
                displayIndent = 'three-indent';
              }
              finalLeftMetaArray.push({ name: key, data: value, addClass: displayIndent });
            }
          });

          if (Number(finalProductId) > 3) {
            // Show part number
            finalLeftMetaArray.splice(0, 0, { name: 'Product', data: finalPartNumber.toUpperCase(), addClass: '' });
          } else {
            // Show series
            finalLeftMetaArray.splice(0, 0, { name: 'Product Series', data: finalSeries.toUpperCase(), addClass: '' });
            finalLeftMetaArray.splice(Number(finalProductId) === 2 ? 1 : 2, 0, { name: 'Basic Part Number', data: finalPartNumber, addClass: '' });
          }

          var leftMetaData = finalLeftMetaArray.map(function (item) {
            if (item.name) {
              return '<div class=' + item.addClass + '>' + item.name + ' = ' + item.data + '</div>';
            } else {
              return '<div class=' + item.addClass + '>' + item.data + '</div>';
            }
          });
          $('.left-meta-data').html(leftMetaData);
        }

        // show left meta data if productLeftHandMetadataDefinitions.length === 0

        if (partNumberComponentResponseJson && partNumberComponentResponseJson.productLeftHandMetadataDefinitions && partNumberComponentResponseJson.productLeftHandMetadataDefinitions.length === 0) {
          finalLeftMetaArray = [];

          if (Number(finalProductId) > 3) {
            // Show part number
            finalLeftMetaArray.splice(0, 0, { name: 'Product', data: finalPartNumber.toUpperCase(), addClass: '' });
          } else {
            // Show series
            finalLeftMetaArray.splice(0, 0, { name: 'Product Series', data: finalSeries.toUpperCase(), addClass: '' });
            finalLeftMetaArray.splice(Number(finalProductId) === 2 ? 1 : 2, 0, { name: 'Basic Part Number', data: finalPartNumber, addClass: '' });
          }

          var _leftMetaData = finalLeftMetaArray.map(function (item) {
            if (item.name) {
              return '<div class=' + item.addClass + '>' + item.name + ' = ' + item.data + '</div>';
            } else {
              return '<div class=' + item.addClass + '>' + item.data + '</div>';
            }
          });
          $('.left-meta-data').html(_leftMetaData);
        }

        // Show right meta data
        if (partNumberComponentResponseJson && partNumberComponentResponseJson.productRightHandMetadataDefinitions && partNumberComponentResponseJson.productRightHandMetadataDefinitions.length) {
          var rightMetaData = partNumberComponentResponseJson.productRightHandMetadataDefinitions.map(function (item) {
            var selectedValue = getSelectedValueOfPartNumberComponentJson(item.componentId, $('#' + item.componentId).val());
            // displayLevel - number of indentation while displaying the result
            // isDimension - If false then no value is displayed
            var displayIndent = '';
            if (Number(item.displayLevel) === 2) {
              displayIndent = 'two-indent';
            } else if (Number(item.displayLevel) === 3) {
              displayIndent = 'three-indent';
            }
            if (item.metaDataValues && item.metaDataValues.length && item.metaDataValues[0] !== null) {
              var filterMeta = item.metaDataValues.filter(function (data) {
                return data.dimensionValue === selectedValue;
              });
              var mData = filterMeta && filterMeta.length ? filterMeta[0].value : '';
              return '<div class=' + displayIndent + '>' + item.label + ' = ' + mData + '</div>';
            } else {
              return '<div class=' + displayIndent + '>' + item.label + '</div>';
            }
          });

          rightMetaData.push('<div>ALL DIMENSIONS ARE IN INCHES </div>');
          $('.right-meta-data').html(rightMetaData);
        }

        // show right blank, if right section is blank

        if (partNumberComponentResponseJson && partNumberComponentResponseJson.productRightHandMetadataDefinitions && partNumberComponentResponseJson.productRightHandMetadataDefinitions.length === 0) {
          var _rightMetaData = [];
          _rightMetaData.push('<div> </div>');
          $('.right-meta-data').html(_rightMetaData);
        }

        // Warning message
        if (partNumberComponentResponseJson && partNumberComponentResponseJson.errorConditions && partNumberComponentResponseJson.errorConditions.length && partNumberComponentResponseJson.errorConditions[0] !== null) {
          var errMessage = showWarningMessage(partNumberComponentResponseJson.errorConditions[0]);
          errMessage ? $('.warning-msg')[0].innerHTML = errMessage : '';
        }

        // Show technical drawing
        resetTechnicalDrawing();
        var hasNumber = /\d/;
        var fileName = '';
        if (Number(finalProductId) > 3) {
          fileName = finalPartNumber.replace('/', '_');
        } else {
          fileName = hasNumber.test(finalSeries) ? (finalSeries + finalPartNumber).toLowerCase() : finalPartNumber.toLowerCase();
        }
        technicalDrawing.prepend('<img id=\'tech-img\' src=\'/content/dam/eaton/interactive/tools-and-applications/product-configurators/backshell/technical-drawings/' + fileName + '.gif\' />');

        // Scroll
        $('.scroll-here')[0].scrollIntoView({
          behavior: 'smooth', inline: 'center', block: 'center'
        });
      }

      // TODO: PRODUCT CARD : Revisit and integrate this code once the Souriau PDH migration completes.
      // $('#backshell-product-card').removeClass('u-hide');
    });
  }
});