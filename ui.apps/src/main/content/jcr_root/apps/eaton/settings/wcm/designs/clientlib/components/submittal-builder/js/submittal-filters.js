/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  var BODY_ELEMENT = document.getElementsByTagName('body')[0];
  var HIDDEN_CLASS = 'hidden';
  var HIDDEN_XS_CLASS = 'hidden-xs';
  var FACETS_OPEN_CLASS = 'facets-open';
  var COMPONENT_CLASS = 'submittal-builder';
  var FILTERS_CLASS = COMPONENT_CLASS + '__filters';
  var FILTER_CONTAINER_CLASS = FILTERS_CLASS + '__filter-container';
  var FILTER_CONTAINER_SELECTOR = '.' + FILTER_CONTAINER_CLASS;
  var ACTIVE_FILTERS_CONTAINER_CLASS = COMPONENT_CLASS + '__active-filters__container';
  var GLOBAL_FILTER_SEARCH_CLASS = FILTERS_CLASS + '__global-filter-search';
  var GLOBAL_FILTER_SEARCH_SELECTOR = '.' + GLOBAL_FILTER_SEARCH_CLASS;
  var ACTIVE_FILTERS_CONTAINER_SELECTOR = '.' + ACTIVE_FILTERS_CONTAINER_CLASS;
  var CLOSE_CLASS = FILTERS_CLASS + '__close';
  var CLOSE_SELECTOR = '.' + CLOSE_CLASS;

  var App = window.App || {};
  App.SubmittalFilters = function () {
    _createClass(SubmittalFilters, null, [{
      key: 'markup',
      value: function markup(_ref) {
        var title = _ref.title,
            mobileDialogTitle = _ref.mobileDialogTitle,
            filterList = _ref.filterList,
            filterComponents = _ref.filterComponents,
            activeFilterValues = _ref.activeFilterValues,
            activeFilterList = _ref.activeFilterList,
            closeText = _ref.closeText,
            viewMoreText = _ref.viewMoreText,
            viewLessText = _ref.viewLessText,
            resultsText = _ref.resultsText,
            resultCount = _ref.resultCount,
            ofText = _ref.ofText,
            clearAllFiltersText = _ref.clearAllFiltersText,
            clearFiltersText = _ref.clearFiltersText,
            clearSelectionText = _ref.clearSelectionText,
            facetSearchDisabled = _ref.facetSearchDisabled,
            facetSearchLabel = _ref.facetSearchLabel,
            facetSearchPlaceholder = _ref.facetSearchPlaceholder,
            inText = _ref.inText,
            noSuggestionsText = _ref.noSuggestionsText;

        var activeFilterElement = void 0;
        var filterLists = filterList.map(function (filter) {
          if (typeof activeFilterValues[filter.name] !== 'undefined') {
            filter.values.forEach(function (valueProp) {
              valueProp.active = valueProp.name === activeFilterValues[filter.name].value;
            });
          }
          return '\n          <div class="' + FILTER_CONTAINER_CLASS + '"\n            data-values=\'' + JSON.stringify(filter) + '\'\n            data-clear-selection-text="' + clearSelectionText + '"\n            data-view-more-text="' + viewMoreText + '"\n            data-view-less-text="' + viewLessText + '"></div>';
        });

        activeFilterElement = '<div class="faceted-navigation-filters ' + ACTIVE_FILTERS_CONTAINER_CLASS + ' ' + ACTIVE_FILTERS_CONTAINER_CLASS + '--mobile"\n          data-active-filter-values=\'' + JSON.stringify(activeFilterList) + '\'\n          data-result-count="' + resultCount + '"\n          data-results-text="' + resultsText + '"\n          data-of-text="' + ofText + '"\n          data-clear-all-filters-text="' + clearAllFiltersText + '"\n          data-clear-filters-text="' + clearFiltersText + '"\n          data-clear-selection-text="' + clearSelectionText + '">\n          </div>';

        return '\n        <div class="eaton-form faceted-navigation ' + FILTERS_CLASS + '">\n          <h3 class="faceted-navigation__title ' + FILTERS_CLASS + '__title">' + title + '</h3>\n          <div class="' + GLOBAL_FILTER_SEARCH_CLASS + '\n            data-global-facet-search-disabled="' + facetSearchDisabled + '"\n            data-global-facet-search-label="' + facetSearchLabel + '"\n            data-global-facet-search-placeholder="' + facetSearchPlaceholder + '"\n            data-global-facet-search-in-text="' + inText + '"\n            data-global-facet-search-no-suggestions-text="' + noSuggestionsText + '"\n            data-global-facet-search-filter-components=\'' + JSON.stringify(filterComponents) + '\'>\n          </div>\n          <div class="mobile-header">\n            <span>' + mobileDialogTitle + '</span>\n            <button data-toggle-modal-facet\n              aria-label="' + closeText + '"\n              class="close-facets-mobile button--reset ' + CLOSE_CLASS + '">\n              <span class="sr-only">' + closeText + ' ' + title + '</span>\n              <i class="icon icon-close" aria-hidden="true"></i>\n            </button>\n          </div>\n\n          <hr class="' + COMPONENT_CLASS + '__hr">\n\n          <div class="' + (Object.keys(activeFilterValues).length > 0 ? '' : 'hidden') + '">\n            ' + activeFilterElement + '\n          </div>\n\n          ' + filterLists.join('') + '\n        </div>\n      ';
      }

      /**
       * The filters/facets section of the submittal builder
       * @constructor
       * @param {object} container - A reference to the SubmittalFilters container's DOM element
      */

    }]);

    function SubmittalFilters(container) {
      _classCallCheck(this, SubmittalFilters);

      // The constructor should only contain the boiler plate code for finding or creating the reference.
      if (typeof container.dataset.ref === 'undefined') {
        this.ref = Math.random();
        App.SubmittalFilters.refs[this.ref] = this;
        container.dataset.ref = this.ref;
        this.init(container);
      } else {
        // If this element has already been instantiated, use the existing reference.
        return App.SubmittalFilters.refs[container.dataset.ref];
      }
    }

    /**
     * Initialize the SubmittalFilters class
     * @function init
     * @param {object} container - A reference to the SubmittalFilters container's DOM element so data attributes may be referenced
    */


    _createClass(SubmittalFilters, [{
      key: 'init',
      value: function init(container) {
        this.container = container;
        this.title = this.container.dataset.title;
        this.mobileDialogTitle = this.container.dataset.mobileDialogTitle;
        this.facetSearchDisabled = this.container.dataset.facetSearchDisabled === 'true';
        this.facetSearchLabel = this.container.dataset.facetSearchLabel;
        this.facetSearchPlaceholder = this.container.dataset.facetSearchPlaceholder;
        this.inText = this.container.dataset.inText;
        this.noSuggestionsText = this.container.dataset.noSuggestionsText;
        this.filterListValues = this.container.dataset.filterList;
        this.closeText = this.container.dataset.closeText;
        this.viewMoreText = this.container.dataset.viewMoreText;
        this.viewLessText = this.container.dataset.viewLessText;
        this.resultsPluralText = this.container.dataset.resultsPluralText;
        this.resultsSingularText = this.container.dataset.resultsSingularText;
        this.ofText = this.container.dataset.ofText;
        this.clearAllFiltersText = this.container.dataset.clearAllFiltersText;
        this.clearFiltersText = this.container.dataset.clearFiltersText;
        this.clearSelectionText = this.container.dataset.clearSelectionText;
        this.filterComponents = [];

        this.selectedFilters = {};

        this.render();
      }
    }, {
      key: 'orderFilters',
      value: function orderFilters() {
        var _this = this;

        // IE11 and Edge don't cast true/false to 1/-1, so we need to run a comparison and return an integer
        this.filterList.sort(function (firstFilter, secondFilter) {
          return _this.ordering.indexOf(firstFilter.name) > _this.ordering.indexOf(secondFilter.name) === true ? 1 : -1;
        });
      }

      /**
       * @function get activeFilterValues - Returns the list of active filters as
       * key value pairs, where each key is a filter category and each value is an
       * actual filter value.
      */

    }, {
      key: 'deactiveFilter',
      value: function deactiveFilter(name) {
        delete this.activeFilterValues[name];
        this.container.dispatchEvent(new CustomEvent('filterRemoved'));
      }

      /**
       * @function open - displays SubmittalFilters
      */

    }, {
      key: 'open',
      value: function open() {
        // It begins hidden on XS, but after that it is either hidden or shown at every breakpoint.
        this.container.classList.remove(HIDDEN_XS_CLASS);
        this.container.classList.remove(HIDDEN_CLASS);
        BODY_ELEMENT.classList.add(FACETS_OPEN_CLASS);
      }

      /**
       * @function close - hides SubmittalFilters
      */

    }, {
      key: 'close',
      value: function close() {
        // Do not add the hidden XS class here, we want it hidden at every breakpoint.
        this.container.classList.add(HIDDEN_CLASS);
        BODY_ELEMENT.classList.remove(FACETS_OPEN_CLASS);
      }

      /**
       * @function set resultCount - Updates the SubmittalActiveFilters component
       * with the updated result count.
      */

    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;

        this.container.innerHTML = App.SubmittalFilters.markup(this);
        this.closeButton = this.container.querySelector(CLOSE_SELECTOR);

        /** Initialize filter group if filter component exists on the page  */
        this.filterComponents = [];
        if (this.container.querySelectorAll(FILTER_CONTAINER_SELECTOR).length > 0) {
          [].concat(_toConsumableArray(this.container.querySelectorAll(FILTER_CONTAINER_SELECTOR))).forEach(function (filterContainer) {
            var filterComponent = new App.SubmittalFilter(filterContainer);

            filterComponent.addEventListener('selected', function (_ref2) {
              var _ref2$detail = _ref2.detail,
                  name = _ref2$detail.name,
                  value = _ref2$detail.value,
                  title = _ref2$detail.title,
                  id = _ref2$detail.id;

              _this2.selectedFilters[name] = { value: value, title: title, id: id };
              _this2.container.dispatchEvent(new CustomEvent('filterSelected', { detail: { activeFilters: _this2.activeFilterValues } }));
            });

            _this2.filterComponents.push(filterComponent);
          });
        }

        this.globalFacetSearch = new App.GlobalFacetSearch(this.container.querySelector(GLOBAL_FILTER_SEARCH_SELECTOR));
        this.activeFiltersComponent = new App.SubmittalActiveFilters(this.container.querySelector(ACTIVE_FILTERS_CONTAINER_SELECTOR));

        this.addEventListeners();
      }

      /**
       * @function addEventListeners - Adds event listeners for the internal implementation
       * of this component.
       */

    }, {
      key: 'addEventListeners',
      value: function addEventListeners() {
        var _this3 = this;

        this.closeButton.addEventListener('click', function () {
          return _this3.close();
        });

        this.globalFacetSearch.addEventListener('globalFacetSearchSuggestionSelected', function () {
          console.log('global facet search event fired');
        });

        this.activeFiltersComponent.addEventListener('filterRemoved', function (_ref3) {
          var _ref3$detail = _ref3.detail,
              name = _ref3$detail.name,
              value = _ref3$detail.value;
          return _this3.deactiveFilter(name);
        });

        this.container.querySelector(ACTIVE_FILTERS_CONTAINER_SELECTOR).addEventListener('clearAllFilters', function () {
          _this3.activeFilters = [];
          _this3.container.dispatchEvent(new CustomEvent('clearAllFilters'));
        });
      }

      /**
       * @function addEventListener - A method to allow clients to add event listeners
       *  to this component. Calls the addEventListener method of this components containing element.
       */

    }, {
      key: 'addEventListener',
      value: function addEventListener() {
        return this.container.addEventListener.apply(this.container, arguments);
      }

      /**
       * @function removeEventListener - A method to allow clients to remove event listeners
       *  from this component. Calls the removeEventListener method of this components containing element.
       */

    }, {
      key: 'removeEventListener',
      value: function removeEventListener() {
        return this.container.removeEventListener.apply(this.container, arguments);
      }
    }, {
      key: 'resultsText',
      get: function get() {
        return this.resultCount > 1 ? this.resultsPluralText : this.resultsSingularText;
      }

      /**
       * @function get isOpen - check if SubmittalFilters is open (mobile only) and return
       * @returns {boolean}
      */

    }, {
      key: 'isOpen',
      get: function get() {
        return !this.container.classList.contains(HIDDEN_CLASS) && !this.container.classList.contains(HIDDEN_XS_CLASS);
      }

      /**
       * @function get filterList
       * @returns {array} of filter values or an empty array
      */

    }, {
      key: 'filterList',
      get: function get() {
        return this.filterListValues ? this.filterListValues : [];
      },


      /**
       * @function set filterList
       * @param {array} filterListValues - an array of filter list values
       * Re-renders component after filterListValues has been set
       * Dispatches filterListUpdated event
      */
      set: function set(filterListValues) {
        this.filterListValues = filterListValues;
        this.orderFilters();
        this.container.dispatchEvent(new CustomEvent('filterListUpdated'));

        this.render();
      }
    }, {
      key: 'ordering',
      set: function set(properties) {
        this.orderingList = properties.map(function (prop) {
          return prop.name;
        });
        this.orderFilters();
      },
      get: function get() {
        return this.orderingList ? this.orderingList : [];
      }
    }, {
      key: 'activeFilterValues',
      get: function get() {
        return this.selectedFilters ? this.selectedFilters : {};
      }

      /**
       * @function get activeFilterValues - Returns the list of active filters as
       * an array of objects where each object has a name, value and title, where
       * the name is the filter category, each value is the active value in that
       * category, and the title is the displayable title for the active value.
      */

    }, {
      key: 'activeFilterList',
      get: function get() {
        var _this4 = this;

        var list = [];
        Object.keys(this.activeFilterValues).forEach(function (name) {
          list.push({
            name: name,
            value: _this4.activeFilterValues[name].value,
            title: _this4.activeFilterValues[name].title,
            id: _this4.activeFilterValues[name].id
          });
        });
        return list;
      }
    }, {
      key: 'resultCount',
      set: function set(count) {
        this.resultCountValue = count;
        this.activeFiltersComponent.resultCount = count;
      }

      /**
       * @function get resultCount - Get's the current number of results as an integer.
       */
      ,
      get: function get() {
        return this.resultCountValue;
      }
    }]);

    return SubmittalFilters;
  }();

  App.SubmittalFilters.refs = {};
})();