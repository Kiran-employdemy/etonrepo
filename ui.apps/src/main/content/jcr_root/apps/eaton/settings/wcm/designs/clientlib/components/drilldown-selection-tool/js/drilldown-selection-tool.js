/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable no-undef */
/* eslint-disable no-global-assign */
// noinspection JSConstantReassignment
// -----------------------------------
// Tag Dropdown Tool Component
//-----------------------------------

var requirePresent = function requirePresent() {
  return typeof require !== 'undefined';
};

if (requirePresent()) {
  var globalConstants = require('../../../global/js/etn-new-global-constants');
  var constants = require('./drilldown-selection-tool-constants');
  literals = globalConstants.literals;
  $ = require(literals.JQUERY);
  eventListeners = globalConstants.eventListeners;
  drilldownSelectionToolClasses = constants.drilldownSelectionToolClasses;
  drilldownSelectionToolQuerySelectors = constants.drilldownSelectionToolQuerySelectors;
  drilldownSelectionToolMustacheElements = constants.drilldownSelectionToolMustacheElements;
  drilldownSelectionToolServletSuffix = constants.drilldownSelectionToolServletSuffix;
  drilldownSelectionToolAttributes = constants.drilldownSelectionToolAttributes;
}

var DrilldownSelectionTool = function () {
  function DrilldownSelectionTool() {
    _classCallCheck(this, DrilldownSelectionTool);

    this.component = document.querySelector(drilldownSelectionToolQuerySelectors.component);

    this.dropdownList = this.component.querySelector(drilldownSelectionToolQuerySelectors.dropdownList);
    this.resourcePath = this.dropdownList.getAttribute(drilldownSelectionToolAttributes.resourcePath);

    this.dropdownSelects = this.component.querySelectorAll(drilldownSelectionToolQuerySelectors.dropdownSelects);
    this.dropdownOptionsServletUrl = this.resourcePath + drilldownSelectionToolServletSuffix.dropdown;
    this.resultsServletUrl = this.resourcePath + drilldownSelectionToolServletSuffix.results;

    this.resultsTitle = this.component.querySelector(drilldownSelectionToolQuerySelectors.resultsTitle);
    this.resultsListCount = this.component.querySelector(drilldownSelectionToolQuerySelectors.resultsCount);
    this.resultsList = this.component.querySelector(drilldownSelectionToolQuerySelectors.resultsList);

    this.resultsFooter = this.component.querySelector(drilldownSelectionToolQuerySelectors.resultsFooter);
    this.pageSize = this.resultsFooter.getAttribute(drilldownSelectionToolAttributes.pageSize);

    this.loadMoreWrapperDiv = this.component.querySelector(drilldownSelectionToolQuerySelectors.loadMoreWrapperDiv);
    this.loadMoreButton = this.component.querySelector(drilldownSelectionToolQuerySelectors.loadMoreButton);
    this.loadSpinner = document.querySelector(drilldownSelectionToolQuerySelectors.loadSpinner);

    this.noResultsFoundMsg = this.component.querySelector(drilldownSelectionToolQuerySelectors.noResultsFoundMsg);
    this.errorMsg = this.component.querySelector(drilldownSelectionToolQuerySelectors.errorMsg);

    this.mustacheNextDropdown = document.getElementById(drilldownSelectionToolMustacheElements.mustacheTemplate.nextDropdown);
    this.mustachePageResults = document.getElementById(drilldownSelectionToolMustacheElements.mustacheTemplate.pageResults);

    this.addEventListeners();

    this.loadNextDropdown(0, this.getAllSelectedOptions());
  }

  _createClass(DrilldownSelectionTool, [{
    key: 'addEventListeners',
    value: function addEventListeners() {
      this.attachDropdownChangeListenerToAllDropdownsExceptLast();
      this.attachDropdownChangeListenerToLastDropdown();
      this.loadMore();
    }

    // Mustache

  }, {
    key: 'renderNextDropdown',
    value: function renderNextDropdown(nextDropdownData) {
      return window.Mustache.render(this.mustacheNextDropdown.innerHTML, nextDropdownData);
    }
  }, {
    key: 'renderPageResults',
    value: function renderPageResults(pageResultsData) {
      return window.Mustache.render(this.mustachePageResults.innerHTML, pageResultsData);
    }
  }, {
    key: 'attachDropdownChangeListenerToAllDropdownsExceptLast',
    value: function attachDropdownChangeListenerToAllDropdownsExceptLast() {
      var self = this;

      var dropdowns = Array.from(this.dropdownSelects);
      dropdowns.slice(0, dropdowns.length - 1).forEach(function (dropdown) {
        dropdown.addEventListener('change', function (event) {
          event.preventDefault();
          self.loadMoreWrapperDiv.classList.add(drilldownSelectionToolClasses.hide);
          self.loadSpinner.classList.remove(drilldownSelectionToolClasses.hide);
          self.resultsTitle.classList.add(drilldownSelectionToolClasses.hide);
          self.resultsList.innerHTML = '';
          var nextDropdownIndex = parseInt(event.target.dataset.index) + 1;
          self.resetDropdownsBelowCurrentDropdown(nextDropdownIndex+1);
          var selectedDropdownOptionTags = self.getAllSelectedOptions();
          self.loadNextDropdown(nextDropdownIndex, selectedDropdownOptionTags);
        });
      });
    }
  }, {
    key: 'attachDropdownChangeListenerToLastDropdown',
    value: function attachDropdownChangeListenerToLastDropdown() {
      var _this = this;

      var self = this;
      var lastDropdown = this.dropdownSelects[this.dropdownSelects.length - 1];
      lastDropdown.addEventListener('change', function (event) {
        event.preventDefault();
        var selectedDropdownOptionTags = self.getAllSelectedOptions();
        _this.resultsTitle.classList.add(drilldownSelectionToolClasses.hide);
        _this.resultsList.innerHTML = '';
        self.getPageResults(selectedDropdownOptionTags, 0);
      });
    }
  }, {
    key: 'resetDropdownsBelowCurrentDropdown',
    value: function resetDropdownsBelowCurrentDropdown(nextDropdownIndex) {
      var dropdowns = Array.from(this.dropdownSelects);
      dropdowns.slice(nextDropdownIndex).forEach(function (dropdown) {
        dropdown.hidden = true;
        dropdown.previousElementSibling.hidden = true;
        while (dropdown.options.length > 1) {
          dropdown.remove(dropdown.options.length - 1);
        }
      });
    }
  }, {
    key: 'getAllSelectedOptions',
    value: function getAllSelectedOptions() {
      var selectedDropdownOptionTags = [];

      this.dropdownSelects.forEach(function (dropdown) {
        var selectedOption = dropdown.options[dropdown.selectedIndex];
        if (selectedOption && selectedOption.dataset.tagPath) {
          selectedDropdownOptionTags.push(selectedOption.dataset.tagPath);
        }
      });

      return selectedDropdownOptionTags.join('|');
    }
  }, {
    key: 'loadNextDropdown',
    value: function loadNextDropdown(nextDropdownIndex, selectedDropdownOptionTags) {
      var self = this;

      this.errorMsg.classList.add(drilldownSelectionToolClasses.hide);
      this.resultsTitle.classList.add(drilldownSelectionToolClasses.hide);
      this.resultsList.innerHTML = '';
      this.noResultsFoundMsg.classList.add(drilldownSelectionToolClasses.hide);
      this.loadSpinner.classList.remove(drilldownSelectionToolClasses.hide);

      $.ajax({
        type: 'GET',
        async: true,
        url: self.dropdownOptionsServletUrl,
        data: {
          selectedDropdownOptionTags: selectedDropdownOptionTags,
          nextDropdownIndex: nextDropdownIndex
        },
        success: function success(response) {
          if (response) {
            var alphabetizedResponse = self.alphabetizeDropdownOptions(response);
            var nextDropdownSelect = document.querySelector('[name="dropdown-' + nextDropdownIndex + '"]');
            nextDropdownSelect.innerHTML += self.renderNextDropdown(alphabetizedResponse).replace('\n', '').replace(' ', '');;
            nextDropdownSelect.previousElementSibling.hidden = false;
            nextDropdownSelect.hidden = false;
          } else {
            self.noResultsFoundMsg.classList.remove(drilldownSelectionToolClasses.hide);
          }
          self.loadSpinner.classList.add(drilldownSelectionToolClasses.hide);
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          self.loadSpinner.classList.add(drilldownSelectionToolClasses.hide);
          self.errorMsg.innerHTML = jqXHR.status + ' ' + errorThrown;
          self.errorMsg.classList.remove(drilldownSelectionToolClasses.hide);
        }
      });
    }
  }, {
    key: 'alphabetizeDropdownOptions',
    value: function alphabetizeDropdownOptions(response) {
      return response.sort(function (a, b) {
        if (a.title < b.title) {
          return -1;
        } else if (a.title > b.title) {
          return 1;
        } else {
          return 0;
        }
      });
    }
  }, {
    key: 'loadMore',
    value: function loadMore() {
      var self = this;
      this.loadMoreButton.addEventListener(eventListeners.CLICK, function (event) {
        event.preventDefault();
        var selectedDropdownOptionTags = self.getAllSelectedOptions();
        var currentResultsCnt = self.resultsList.querySelectorAll(drilldownSelectionToolQuerySelectors.resultsItems).length;
        self.getPageResults(selectedDropdownOptionTags, currentResultsCnt);
      });
    }
  }, {
    key: 'getPageResults',
    value: function getPageResults(selectedDropdownOptionTags, startIndex) {
      var self = this;

      this.errorMsg.classList.add(drilldownSelectionToolClasses.hide);
      this.loadSpinner.classList.remove(drilldownSelectionToolClasses.hide);
      this.noResultsFoundMsg.classList.add(drilldownSelectionToolClasses.hide);
      this.loadMoreWrapperDiv.classList.add(drilldownSelectionToolClasses.hide);

      $.ajax({
        type: 'GET',
        async: true,
        url: self.resultsServletUrl,
        data: {
          selectedDropdownOptionTags: selectedDropdownOptionTags,
          startIndex: startIndex,
          pageSize: self.pageSize
        },
        success: function success(response) {
          self.pageResultsSuccess(response);
        },
        error: function error(_error2) {
          self.loadSpinner.classList.add(drilldownSelectionToolClasses.hide);
          self.noResultsFoundMsg.classList.remove(drilldownSelectionToolClasses.hide);
        }
      });
    }
  }, {
    key: 'pageResultsSuccess',
    value: function pageResultsSuccess(response) {
      if (response) {
        this.resultsListCount.innerHTML = response.total;
        this.loadSpinner.classList.add(drilldownSelectionToolClasses.hide);
        this.resultsTitle.classList.remove(drilldownSelectionToolClasses.hide);
        this.resultsList.innerHTML += this.renderPageResults(response);
        this.splitResultsIntoRows();

        var hasMoreResults = this.resultsList.querySelectorAll(drilldownSelectionToolQuerySelectors.resultsItems).length < response.total;
        if (hasMoreResults) {
          this.loadMoreWrapperDiv.classList.remove(drilldownSelectionToolClasses.hide);
        } else {
          this.loadMoreWrapperDiv.classList.add(drilldownSelectionToolClasses.hide);
        }
      } else {
        this.loadSpinner.classList.add(drilldownSelectionToolClasses.hide);
        this.noResultsFoundMsg.classList.remove(drilldownSelectionToolClasses.hide);
      }
    }
  }, {
    key: 'splitResultsIntoRows',
    value: function splitResultsIntoRows() {
      var _this2 = this;

      var resultsItems = Array.from(this.component.querySelectorAll(drilldownSelectionToolQuerySelectors.resultsItems));
      this.resultsList.innerHTML = '';

      var _loop = function _loop(i) {
        var rowDiv = document.createElement('div');
        rowDiv.classList.add('row');

        var itemsInRow = resultsItems.slice(i, i + 4);
        itemsInRow.forEach(function (item) {
          rowDiv.appendChild(item.cloneNode(true));
        });

        _this2.resultsList.appendChild(rowDiv);
      };

      for (var i = 0; i < resultsItems.length; i += 4) {
        _loop(i);
      }
    }
  }]);

  return DrilldownSelectionTool;
}();

document.addEventListener('DOMContentLoaded', function () {
  // eslint-disable-next-line no-unused-vars
  var drilldownSelectionComponent = document.querySelector(drilldownSelectionToolQuerySelectors.component);
  if (drilldownSelectionComponent) {
    new DrilldownSelectionTool();
  }
});

if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
  // eslint-disable-next-line no-global-assign
  $ = require('jquery');
  module.exports = DrilldownSelectionTool;
}