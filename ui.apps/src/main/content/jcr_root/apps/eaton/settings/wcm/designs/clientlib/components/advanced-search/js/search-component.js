/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable no-undef */
// noinspection JSConstantReassignment

if (typeof require !== 'undefined') {
  var globalConstants = require('../../../global/js/etn-new-global-constants');
  keyCodes = globalConstants.keyCodes;
}

var SearchComponent = function () {
  function SearchComponent(clickHandler, searchBoxInput) {
    _classCallCheck(this, SearchComponent);

    this.clickHandler = clickHandler;
    this.searchBoxInput = searchBoxInput;
    this.registerSearchEventListeners();
  }

  _createClass(SearchComponent, [{
    key: 'registerSearchEventListeners',
    value: function registerSearchEventListeners() {
      var self = this;
      this.searchBoxInput.addEventListener(eventListeners.KEY_UP, function (event) {
        if (event.code === keyCodes.enter) {
          event.preventDefault();
          self.clickHandler.dispatchEvent(customEvents.SEARCH_EVENT);
        }
      });

      document.querySelector(querySelectorFor.searchIcon).onclick = function (event) {
        event.preventDefault();
        self.clickHandler.dispatchEvent(customEvents.SEARCH_EVENT);
      };
    }
  }, {
    key: 'getSearchValue',
    value: function getSearchValue() {
      return this.searchBoxInput.value;
    }
  }]);

  return SearchComponent;
}();

var createSearchComponent = function createSearchComponent(clickHandler, searchInboxInput) {
  return new SearchComponent(clickHandler, searchInboxInput);
};

if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
  module.exports = { createSearchComponent: createSearchComponent };
}