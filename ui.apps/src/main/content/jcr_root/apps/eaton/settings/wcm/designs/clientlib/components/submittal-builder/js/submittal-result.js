/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  var RESULTS_CLASS = 'submittal-builder__results';
  var HIDDEN_CLASS = 'hidden';
  var REMOVE_FROM_PACKAGE_BUTTON_CLASS = RESULTS_CLASS + '__remove-from-package-button';
  var REMOVE_FROM_PACKAGE_BUTTON_SELECTOR = '.' + REMOVE_FROM_PACKAGE_BUTTON_CLASS;
  var REORDER_RESULTS_BUTTON_CLASS = RESULTS_CLASS + '__reorder-result-button';
  var REORDER_RESULTS_BUTTON_SELECTOR = '.' + REORDER_RESULTS_BUTTON_CLASS;
  var ADD_TO_PACKAGE_BUTTON_CLASS = RESULTS_CLASS + '__add-to-package-button';
  var ADD_TO_PACKAGE_BUTTON_SELECTOR = '.' + ADD_TO_PACKAGE_BUTTON_CLASS;
  var ANIMATION_DURATION_FAST = 500; // in milliseconds
  var ADDED_TO_PACKAGE_ANIMATION_CLASS = RESULTS_CLASS + '__row--added-to-package';
  var REMOVED_FROM_PACKAGE_ANIMATION_CLASS = RESULTS_CLASS + '__row--removed-from-package';
  var REMOVED_FROM_PACKAGE_ROW_ANIMATION_CLASS = RESULTS_CLASS + '__row--removed-from-package-row-animation';
  var ROW_ACTIONS_CLASS = RESULTS_CLASS + '__row-actions';
  var ROW_ACTIONS_SELECTOR = '.' + ROW_ACTIONS_CLASS;
  var STICKY_CLASS = RESULTS_CLASS + '-cell--sticky';
  var STICKY_SELECTOR = '.' + STICKY_CLASS;
  var UNSTICKY_CLASS = RESULTS_CLASS + '-cell--unsticky';
  var unescapeAttr = window.App.global.utils.unescapeAttr;
  var TYPE = 'Type';
  var MATERIAL = 'Material';
  var SERIES = 'Series';
  var NEMA_LOAD = 'NEMA load';
  var SIDE_RAIL = 'Side-rail height';
  var DESCRIPTION = 'Description';

  var App = window.App || {};
  App.SubmittalResult = function () {
    _createClass(SubmittalResult, [{
      key: 'unstickyCells',
      value: function unstickyCells() {
        // This converts the NodeList to an array.
        return Array.prototype.slice.call(this.container.querySelectorAll('.submittal-builder__results-cell:not(.submittal-builder__results-cell--sticky)'));
      }
    }], [{
      key: 'markup',
      value: function markup(_ref) {
        var result = _ref.result,
            propertyList = _ref.propertyList,
            previewText = _ref.previewText,
            selected = _ref.selected,
            isFileSizeLimitReached = _ref.isFileSizeLimitReached,
            closeText = _ref.closeText,
            cannotAddMoreFilesMessage = _ref.cannotAddMoreFilesMessage,
            showingEditPackageMode = _ref.showingEditPackageMode,
            itemHasBeenRemovedText = _ref.itemHasBeenRemovedText;

        var resultPropertyElements = [];
        var mobilePropertiesList = [];
        var mobileTitle = '';
        var id = 'accordion' + App.global.utils.hashString(result.url);
        var toolTip = '<div class="' + RESULTS_CLASS + '__tooltip">\n          <button class="button--reset ' + RESULTS_CLASS + '__tooltip__close-button">\n            <i class="icon icon-close"></i>\n          </button>\n          <div class="' + RESULTS_CLASS + '__tooltip__message">\n            ' + cannotAddMoreFilesMessage + '\n          </div>\n        </div>';

        var itemRemovedMessage = '<div class="' + RESULTS_CLASS + '__item-removed-message">' + itemHasBeenRemovedText + '</div>';

        var submittalResultFlags = {};
        submittalResultFlags = App.SubmittalResultsFlag;

        propertyList.forEach(function (prop, index) {
          var classToApply = '';

          if (index === 0) {
            classToApply = STICKY_CLASS;
          } else if (index === 1) {
            classToApply = UNSTICKY_CLASS;
          }

          mobileTitle = index === 0 ? result[prop.name] : mobileTitle ? mobileTitle : '-';
          resultPropertyElements.push('\n          <div class="' + RESULTS_CLASS + '-cell ' + classToApply + ' ' + (prop.title === NEMA_LOAD && submittalResultFlags.nemaLoad ? HIDDEN_CLASS : '') + ' ' + (prop.title === SIDE_RAIL && submittalResultFlags.sideRail ? HIDDEN_CLASS : '') + ' ' + (prop.title === TYPE && submittalResultFlags.type ? HIDDEN_CLASS : '') + ' ' + (prop.title === MATERIAL && submittalResultFlags.material ? HIDDEN_CLASS : '') + ' ' + (prop.title === SERIES && submittalResultFlags.series ? HIDDEN_CLASS : '') + ' ' + (prop.title === DESCRIPTION && submittalResultFlags.description ? HIDDEN_CLASS : '') + ' ">\n            <div class="' + RESULTS_CLASS + '-cell--heading">' + prop.title + '</div>\n            <div class="' + RESULTS_CLASS + '-cell--content"><bdi>' + (result[prop.name] ? result[prop.name] : '-') + '</bdi></div>\n          </div>\n        ');

          mobilePropertiesList.push(prop.title);
        });
        /**
         * Add the desktop add/remove buttons manually as the first column in the row
         */
        resultPropertyElements.unshift('\n        <div class="' + ROW_ACTIONS_CLASS + ' hidden-xs">\n          <div class="' + RESULTS_CLASS + '__button-wrapper">\n            <button data-url="' + result.url + '" class="button--reset ' + ADD_TO_PACKAGE_BUTTON_CLASS + ' ' + (selected ? 'hidden' : '') + ' ' + (isFileSizeLimitReached ? ADD_TO_PACKAGE_BUTTON_CLASS + '--disabled' : '') + '"\n              aria-label="Add to package">\n                <i class="icon icon-plus-with-circle" aria-hidden="' + selected + '"></i>\n            </button>\n\n            ' + toolTip + '\n\n            <button data-url="' + result.url + '"\n              class="button--reset ' + REMOVE_FROM_PACKAGE_BUTTON_CLASS + ' ' + (selected ? '' : 'hidden') + '"\n              aria-label="Remove from package">\n                <i class="icon icon-x-with-circle" aria-hidden="' + selected + '"></i>\n            </button>\n          </div>\n        </div>\n      ');

        return '\n      <div class="' + RESULTS_CLASS + '__accordion-container panel ' + RESULTS_CLASS + '__panel"\n           data-url="' + result.url + '">\n\n        ' + itemRemovedMessage + '\n\n        <div class="' + ROW_ACTIONS_CLASS + ' panel-heading ' + RESULTS_CLASS + '__panel-heading" role="tab">\n          <div class="' + RESULTS_CLASS + '__button-wrapper">\n            <button data-url="' + result.url + '"\n              class="button--reset ' + ADD_TO_PACKAGE_BUTTON_CLASS + ' ' + (selected ? 'hidden' : '') + ' ' + (isFileSizeLimitReached ? ADD_TO_PACKAGE_BUTTON_CLASS + '--disabled' : '') + '"\n              aria-label="Add to package">\n                <i class="icon icon-plus-with-circle" aria-hidden="' + selected + '"></i>\n            </button>\n\n            ' + toolTip + '\n\n            <button data-url="' + result.url + '"\n              class="button--reset ' + REMOVE_FROM_PACKAGE_BUTTON_CLASS + ' ' + (selected ? '' : 'hidden') + '"\n              aria-label="Remove from package">\n                <i class="icon icon-x-with-circle" aria-hidden="' + selected + '"></i>\n            </button>\n          </div>\n          <div class="' + RESULTS_CLASS + '__mobile-title">\n            ' + mobileTitle + '\n          </div>\n          <div class="' + RESULTS_CLASS + '__mobile-properties">\n            ' + mobilePropertiesList.join(', ') + '\n          </div>\n          <div class="' + RESULTS_CLASS + '__accordion-control">\n            <a href="#" role="button" class="button--reset ' + REORDER_RESULTS_BUTTON_CLASS + ' sortable-handle ' + (showingEditPackageMode ? '' : 'hidden') + '">\n              <span class="icon icon-sortable-arrows"></span>\n            </a>\n            <a class="' + (window.matchMedia(App.global.constants.MEDIA_QUERIES.MOBILE).matches ? 'collapsed' : '') + ' ' + (showingEditPackageMode ? 'hidden' : '') + '"\n               data-toggle="collapse"\n               data-parent="#accordion_div"\n               href="#' + id + '">\n              <i class="icon icon-sign-minus ' + RESULTS_CLASS + '__icon-sign-minus" aria-hidden="true"></i>\n              <i class="icon icon-sign-plus ' + RESULTS_CLASS + '__icon-sign-plus" aria-hidden="true"></i>\n            </a>\n          </div>\n        </div>\n        <div id="' + id + '" class="' + (window.matchMedia(App.global.constants.MEDIA_QUERIES.MOBILE).matches ? 'collapse' : '') + '">\n          <div data-url="' + result.url + '" class="' + RESULTS_CLASS + '__row">\n            <div class="' + RESULTS_CLASS + '-cell ' + RESULTS_CLASS + '-cell--narrow ' + STICKY_CLASS + ' ' + (showingEditPackageMode ? '' : 'hidden') + '">\n              <a href="#" role="button" class="button--reset ' + REORDER_RESULTS_BUTTON_CLASS + ' sortable-handle">\n                <span class="icon icon-sortable-arrows"></span>\n              </a>\n            </div>\n            ' + resultPropertyElements.join('') + '\n            <div class="' + RESULTS_CLASS + '-cell ' + RESULTS_CLASS + '-cell__preview">\n              <div class="' + RESULTS_CLASS + '-cell--heading">' + previewText + '</div>\n              <div class="' + RESULTS_CLASS + '-cell--content">\n                <a href="' + result.url + '" target="_blank">\n                  <span class="' + RESULTS_CLASS + '-cell__preview__title">' + previewText + '</span>\n                  <span class="' + RESULTS_CLASS + '-cell__preview__file-size">(' + App.SubmittalResult.bytesToSize(result.size) + ')</span>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      ';
      }
    }]);

    function SubmittalResult(container) {
      _classCallCheck(this, SubmittalResult);

      // The constructor should only contain the boiler plate code for finding or creating the reference.
      if (typeof container.dataset.ref === 'undefined') {
        this.ref = Math.random();
        App.SubmittalResult.refs[this.ref] = this;
        container.dataset.ref = this.ref;
        this.init(container);
      } else {
        // If this element has already been instantiated, use the existing reference.
        return App.SubmittalResult.refs[container.dataset.ref];
      }
    }

    _createClass(SubmittalResult, [{
      key: 'init',
      value: function init(container) {
        this.container = container;
        this.result = unescapeAttr(container.dataset.result);
        this.propertyList = unescapeAttr(container.dataset.propertyList);
        this.previewText = container.dataset.previewText;
        this.packageSizeValue = parseInt(container.dataset.packageSize);
        this.sizeLimit = parseInt(container.dataset.sizeLimit);
        this.closeText = container.dataset.closeText;
        this.cannotAddMoreFilesMessage = container.dataset.cannotAddMoreFilesMessage;
        this.itemHasBeenRemovedText = this.container.dataset.itemHasBeenRemovedText;
        this.selected = container.dataset.selected === 'true';
        this.showingEditPackageMode = container.dataset.showingEditPackageMode === 'true';

        this.render();
      }
    }, {
      key: 'updateFixedColumnHeight',


      /**
       * Set the height of the sticky column contents to match its siblings in the row
       * Heights must be manually set on absolutely positioned items in order for the background color heights to match up
       * @function updateFixedColumnHeight
      */
      value: function updateFixedColumnHeight() {
        var _this = this;

        this.fixedColumns.forEach(function (fixedColumn) {
          return fixedColumn.style.height = _this.rowHeight;
        });
        this.desktopRowActions.style.height = this.rowHeight;
      }
    }, {
      key: 'select',
      value: function select() {
        var _this2 = this;

        this.addButtons.forEach(function (addButton) {
          return addButton.disabled = true;
        });
        // Update this.container's classes to apply the proper CSS animations
        this.container.classList.remove(REMOVED_FROM_PACKAGE_ANIMATION_CLASS);
        this.container.classList.add(ADDED_TO_PACKAGE_ANIMATION_CLASS);
        this.addButtons.forEach(function (addButton) {
          return addButton.classList.add(HIDDEN_CLASS);
        });
        this.removeButtons.forEach(function (removeButton) {
          return removeButton.classList.remove(HIDDEN_CLASS);
        });

        // create promise to delay the render until after the CSS animation is complete
        return new Promise(function (resolve) {
          return setTimeout(function () {
            _this2.addButtons.forEach(function (addButton) {
              return addButton.disabled = false;
            });
            resolve();
          }, ANIMATION_DURATION_FAST);
        }).then(function () {
          _this2.selected = true;
          _this2.render();
        });
      }
    }, {
      key: 'deselect',
      value: function deselect() {
        var _this3 = this;

        var tasks = [];
        // create promise to update this.container's classes to apply the proper CSS animations
        var addCssAnimationClasses = function addCssAnimationClasses() {
          return new Promise(function (resolve) {
            _this3.removeButtons.forEach(function (removeButton) {
              return removeButton.disabled = true;
            });
            _this3.container.classList.remove(ADDED_TO_PACKAGE_ANIMATION_CLASS);
            _this3.container.classList.add(REMOVED_FROM_PACKAGE_ANIMATION_CLASS);
            if (!_this3.showingEditPackageMode) {
              _this3.addButtons.forEach(function (addButton) {
                return addButton.classList.remove(HIDDEN_CLASS);
              });
              _this3.removeButtons.forEach(function (removeButton) {
                return removeButton.classList.add(HIDDEN_CLASS);
              });
            }

            setTimeout(function () {
              _this3.removeButtons.forEach(function (removeButton) {
                return removeButton.setAttribute.disabled = false;
              });
              resolve();
            }, ANIMATION_DURATION_FAST);
          });
        };

        // animate row height to zero
        var animateRowHeight = function animateRowHeight() {
          return new Promise(function (resolve) {
            // get current row height
            var row = _this3.container;
            var initialRowHeight = _this3.rowHeight;

            _this3.container.classList.add(REMOVED_FROM_PACKAGE_ROW_ANIMATION_CLASS);
            // temporarily disable all css transitions
            var elementTransition = row.style.transition;
            row.style.transition = '';
            requestAnimationFrame(function () {
              row.style.height = initialRowHeight + 'px';
              row.style.transition = elementTransition;
              // on the next frame (as soon as the previous style change has taken effect),
              // have the element transition to height: 0
              requestAnimationFrame(function () {
                row.style.height = 0 + 'px';
              });
            });

            setTimeout(function () {
              resolve();
            }, ANIMATION_DURATION_FAST);
          });
        };

        // if currently in edit package mode, item rows should collapse when removed from package
        if (this.showingEditPackageMode) {
          tasks = [addCssAnimationClasses, animateRowHeight];
        } else {
          tasks = [addCssAnimationClasses];
        }

        return tasks.reduce(function (promiseChain, currentTask) {
          return promiseChain.then(function (chainResults) {
            return currentTask().then(function (currentResult) {
              return [].concat(_toConsumableArray(chainResults), [currentResult]);
            });
          });
        }, Promise.resolve([])).then(function (arrayOfResults) {
          _this3.selected = false;
          _this3.render();
        });
      }
    }, {
      key: 'render',
      value: function render() {
        this.container.innerHTML = App.SubmittalResult.markup(this);

        this.addButtons = this.container.querySelectorAll(ADD_TO_PACKAGE_BUTTON_SELECTOR);
        this.removeButtons = this.container.querySelectorAll(REMOVE_FROM_PACKAGE_BUTTON_SELECTOR);
        this.fixedColumns = this.container.querySelectorAll(STICKY_SELECTOR);
        this.desktopRowActions = this.container.querySelector(ROW_ACTIONS_SELECTOR + '.hidden-xs');

        this.updateFixedColumnHeight();

        this.addEventListeners();
      }
    }, {
      key: 'addEventListeners',
      value: function addEventListeners() {
        var _this4 = this;

        this.addButtons.forEach(function (addButton) {
          return addButton.addEventListener('click', function () {
            if (!_this4.isFileSizeLimitReached && !addButton.disabled) {
              addButton.disabled = true;
              _this4.container.dispatchEvent(new CustomEvent('added', { detail: { resultComponent: _this4 } }));
              setTimeout(function () {
                return addButton.disabled = false;
              }, ANIMATION_DURATION_FAST);
            }
          });
        });

        this.removeButtons.forEach(function (removeButton) {
          return removeButton.addEventListener('click', function () {
            if (!removeButton.disabled) {
              removeButton.disabled = true;
              _this4.container.dispatchEvent(new CustomEvent('removed', { detail: { resultComponent: _this4 } }));
              setTimeout(function () {
                return removeButton.disabled = false;
              }, ANIMATION_DURATION_FAST);
            }
          });
        });

        this.container.querySelectorAll(REORDER_RESULTS_BUTTON_SELECTOR).forEach(function (reorderButton) {
          return reorderButton.addEventListener('click', function (e) {
            return e.preventDefault();
          });
        });
      }

      /**
       * @function addEventListener - A method to allow clients to add event listeners
       *  to this component. Calls the addEventListener method of this components containing element.
       */

    }, {
      key: 'addEventListener',
      value: function addEventListener() {
        return this.container.addEventListener.apply(this.container, arguments);
      }

      /**
       * @function removeEventListener - A method to allow clients to remove event listeners
       *  from this component. Calls the removeEventListener method of this components containing element.
       */

    }, {
      key: 'removeEventListener',
      value: function removeEventListener() {
        return this.container.removeEventListener.apply(this.container, arguments);
      }
    }, {
      key: 'isFileSizeLimitReached',
      get: function get() {
        return this.packageSize + parseInt(this.result.size) >= this.sizeLimit;
      }
    }, {
      key: 'packageSize',
      set: function set(size) {
        this.packageSizeValue = size;
      },
      get: function get() {
        return this.packageSizeValue;
      }
    }, {
      key: 'propertyValues',
      get: function get() {
        return this.result;
      }

      /**
       * Get the height of the container
       * @function rowHeight
       * @returns {string} container's scrollHeight in pixels
      */

    }, {
      key: 'rowHeight',
      get: function get() {
        return this.container.scrollHeight + 'px';
      }
    }], [{
      key: 'bytesToSize',
      value: function bytesToSize(bytes) {
        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        if (bytes === 0) {
          return '0 Byte';
        }
        var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
        return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
      }
    }]);

    return SubmittalResult;
  }();

  App.SubmittalResult.refs = {};
})();