/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  var unescapeAttr = window.App.global.utils.unescapeAttr;

  var App = window.App || {};
  App.Filter = function () {
    _createClass(Filter, [{
      key: 'init',

      /**
       * Initialize the Filter class
       * @function init
       * @param {object} container - A reference to the Filter container's DOM element so data attributes may be referenced
      */
      value: function init(container) {
        this.container = container;
        this.filterValues = unescapeAttr(this.container.dataset.values);
        this.title = this.container.dataset.title;
        this.name = this.container.dataset.name;
        this.defaultVisibleFacets = this.showAsGrid && window.matchMedia && window.matchMedia(App.global.constants.MEDIA_QUERIES.DESKTOP).matches ? 21 : 7;
        this.viewMoreText = this.container.dataset.viewMoreText;
        this.viewLessText = this.container.dataset.viewLessText;
        this.clearSelectionText = this.container.dataset.clearSelectionText;
        this.facetGroupSearchLabel = this.container.dataset.facetGroupSearchLabel;
        this.facetGroupSearchPlaceholder = this.container.dataset.facetGroupSearchPlaceholder;
        this.facetGroupSearchNoSuggestionsText = this.container.dataset.facetGroupSearchNoSuggestionsText;

        this.render();
      }

      /**
       * @function markup
       * The current html representation of the component based upon the current properties.
       */

    }, {
      key: 'markup',
      value: function markup() {
        var _this = this;

        return '\n        <div class="faceted-navigation__facet-group ' + (this.showAsGrid ? 'faceted-navigation__facet-group--grid' : '') + ' ' + (this.filterValues.values.length > 0 ? '' : 'hidden') + '">\n          <button class="faceted-navigation__header button--reset"\n            data-toggle="collapse"\n            data-target="#' + this.filterValues.name + '"\n            aria-expanded="true"\n            aria-controls="' + this.filterValues.name + '">\n              ' + this.filterValues.title + '\n              <i class="icon icon-sign-minus" aria-hidden="true"></i>\n              <i class="icon icon-sign-plus faceted-navigation__icon-sign-plus" aria-hidden="true"></i>\n          </button>\n          <div id="' + this.filterValues.name + '" class="collapse in">\n\n            <div class="faceted-navigation__list__search__container ' + (this.facetSearchEnabled && !this.showAsGrid ? '' : 'hidden') + '">\n              <label class="faceted-navigation__list__search__label">' + this.facetGroupSearchLabel + '</label>\n              <input type="text" class="faceted-navigation__list__search__input" placeholder="' + this.facetGroupSearchPlaceholder + '">\n              <div class="faceted-navigation__list__search__suggestions faceted-navigation__list__search__no-suggestions__container hidden">\n                <div class="faceted-navigation__list__search__suggestion faceted-navigation__list__search__suggestion__no-suggestions__message">\n                  ' + this.facetGroupSearchNoSuggestionsText + '\n                  <span class="faceted-navigation__list__search__suggestion__suggested-term">\n                    ' + this.facetGroupSearchTerm + '\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <a href="#"\n              rel="nofollow"\n              role="button"\n              class="faceted-navigation-header__action-link faceted-navigation-header__action-link--clear-filters faceted-navigation-header__action-link--clear-filters--sidebar ' + (this.activeFilterValues.length > 0 && !this.filterValues.hideClearLink ? '' : 'hidden') + '">\n              ' + this.clearSelectionText + '\n            </a>\n\n            <fieldset>\n              <ul class="faceted-navigation__list faceted-navigation__list--unfiltered ' + (this.showAsGrid && this.filterValues.values.find(function (filterValue) {
          return filterValue.active === true;
        }) !== undefined ? 'faceted-navigation__facet-group--grid__has-checked-facet' : '') + '">\n                ' + this.filterValues.values.map(function (filterValue) {
          return '\n                  <li class="faceted-navigation__list-item ' + (filterValue.isHidden ? 'hidden' : '') + ' ' + (_this.showAsGrid && filterValue.active ? 'faceted-navigation__facet-group--grid__facet--checked' : '') + '">\n                    <div class="faceted-navigation__facet-value">\n                      <label class="faceted-navigation__facet-value-label">\n                        <a href="' + (filterValue.url ? filterValue.url : '#') + '"\n                           rel="nofollow"\n                           role="' + (filterValue.url ? 'link' : 'button') + '"\n                           class="' + (filterValue.url ? 'has-url' : '') + '">\n                          <input\n                            data-analytics-event="submittal-builder-facet"\n                            data-analytics-name="checkbox : ' + filterValue.name + '"\n                            data-analytics-state="' + (filterValue.active ? 'on' : 'off') + '"\n                            data-single-facet-enabled="' + _this.filterValues.singleFacetEnabled + '"\n                            type="' + (_this.filterValues.singleFacetEnabled ? 'radio' : 'checkbox') + '"\n                            class="input input--small"\n                            value="' + filterValue.name + '"\n                            name="' + _this.filterValues.name + '"\n                            data-title="' + filterValue.title + '"\n                            data-id="' + filterValue.id + '"\n                            ' + (filterValue.active ? 'checked' : '') + '>\n                          <span class="inner"><bdi>' + filterValue.title + '</bdi></span>\n                        </a>\n                      </label>\n                    </div>\n                  </li>\n                ';
        }).join('') + '\n                <li class="faceted-navigation__view-more-less-container ' + (this.filterValues.values.length > this.defaultVisibleFacets ? 'show' : 'hidden') + '">\n                  <button class="button--reset faceted-navigation__view-more-values">' + this.viewMoreText + ' <span class="faceted-navigation__view-more-values__count"><bdi>(' + this.filterValues.values.length + ')</bdi></span></button>\n                  <button class="button--reset faceted-navigation__view-less-values">' + this.viewLessText + '</button>\n                </li>\n              </ul>\n            </fieldset>\n          </div>\n        </div>\n      ';
      }

      /**
       * @function
       * Renders the component based upon the current properties.
       */

    }, {
      key: 'render',
      value: function render() {
        this.container.innerHTML = this.markup();

        this.viewMoreLessValuesContainer = this.container.querySelector('.faceted-navigation__view-more-less-container');
        this.viewMoreValuesButton = this.container.querySelector('.faceted-navigation__view-more-values');
        this.viewLessValuesButton = this.container.querySelector('.faceted-navigation__view-less-values');
        this.viewMoreValuesCount = this.container.querySelector('.faceted-navigation__view-more-values__count');
        this.noSuggestionsMessageContainer = this.container.querySelector('.faceted-navigation__list__search__no-suggestions__container');
        this.noSuggestionsMessage = this.container.querySelector('.faceted-navigation__list__search__suggestion__no-suggestions__message');
        this.clearSelectionButton = this.container.querySelector('.faceted-navigation-header__action-link--clear-filters');
        this.facetList = this.container.querySelector('.faceted-navigation__list');
        this.facetListItems = this.container.querySelectorAll('.faceted-navigation__list-item');

        this.input = this.container.querySelector('.faceted-navigation__list__search__input');
        this.noSuggestions = this.container.querySelector('.faceted-navigation__list__search__no-suggestions__container');
        this.noSuggestionsTerm = this.container.querySelector('.faceted-navigation__list__search__suggested-term');

        this.addEventListeners();
      }

      /**
       * @function addEventListeners - Adds event listeners for the internal implementation
       * of this component.
       */

    }, {
      key: 'addEventListeners',
      value: function addEventListeners() {
        var _this2 = this;

        this.viewMoreValuesButton.addEventListener('click', function () {
          return _this2.showMoreValues();
        });
        this.viewLessValuesButton.addEventListener('click', function () {
          return _this2.showLessValues();
        });

        // If a filter value is selected pass its dataset into each registered callback.
        this.container.querySelectorAll('.faceted-navigation__facet-value-label a').forEach(function (filterLink) {
          filterLink.addEventListener('click', function (e) {
            if (filterLink.getAttribute('href') === '#') {
              e.preventDefault();
              _this2.applyFilterValue(filterLink.querySelector('input'));
            }
          });
        });

        this.clearSelectionButton.addEventListener('click', function (e) {
          e.preventDefault();
          _this2.clearSelection();
        });

        this.input.addEventListener('input', function () {
          return _this2.filterFacets();
        });
      }
    }, {
      key: 'suggestedSearchTerms',


      /**
       * @function suggestedSearchTerms
       * @param searchTerm The search term to use as a basis.
       * @returns The filter titles that match this provided search term.
       */
      value: function suggestedSearchTerms(searchTerm) {
        var _this3 = this;

        return this.filterValues.values.map(function (filterValue) {
          return { value: filterValue.title, category: _this3.filterValues.title };
        });
      }

      /**
       * @function applyFilterValueByTitle
       * Provided a filter value title this will find the dom element filter with that title and apply it.
       */

    }, {
      key: 'applyFilterValueByTitle',
      value: function applyFilterValueByTitle(filterTitle) {
        var matchingFilters = this.filterValues.values.filter(function (filterValue) {
          return filterValue.title === filterTitle;
        });

        if (matchingFilters.length > 0) {
          var filterName = matchingFilters[0].name;
          var filterElement = this.container.querySelector('input[value="' + filterName + '"]');
          if (filterElement !== null) {
            filterElement.checked = true;
            if (filterElement.parentElement.classList.contains('has-url')) {
              filterElement.parentElement.click();
            }
            this.applyFilterValue(filterElement);
          }
        }
      }

      /**
       * @function get facetGroupSearchTerm
       * @returns {string} the value in the input field
       */

    }, {
      key: 'showMoreValues',


      /**
       * @function showMoreValues - 5 filters are displayed initially.
       * If there are 6 or more filters available in the group, the rest are shown when this method is called
      */
      value: function showMoreValues() {
        this.container.classList.add('faceted-navigation--show-all-values');
      }

      /**
       * @function showLessValues - Hide all but the first 5 filters
      */

    }, {
      key: 'showLessValues',
      value: function showLessValues() {
        this.container.classList.remove('faceted-navigation--show-all-values');
      }

      /**
       * @function activeFilterValues
       * The list of active filters.
       */

    }, {
      key: 'clearSelection',


      /**
       * @function clearSelection
       * Clears the filter selection from this filter group.
       */
      value: function clearSelection() {
        this.container.dispatchEvent(new CustomEvent('clearSelection', { detail: { component: this } }));
      }

      /**
       * @function applyFilterValue
       * Applies the given filer value. This should be the dom element filter value
       */

    }, {
      key: 'applyFilterValue',
      value: function applyFilterValue(filterValue) {
        var matchingValues = this.filterValues.values.filter(function (value) {
          return value.id === filterValue.dataset.id;
        });
        var wasNotActive = matchingValues.filter(function (value) {
          return value.active;
        }).length === 0;
        if (wasNotActive && matchingValues.length > 0) {
          var matchingValue = matchingValues[0];
          var removeFilterIds = this.filterValues.singleFacetEnabled ? this.activeFilterValues.map(function (filterValue) {
            return filterValue.id;
          }) : [];

          this.container.dispatchEvent(new CustomEvent('selected', { detail: {
              name: matchingValue.name,
              value: matchingValue.value,
              title: matchingValue.title,
              id: matchingValue.id,
              removeFilterIds: removeFilterIds,
              component: this } }));
        } else if (!wasNotActive && matchingValues.length > 0) {
          this.container.dispatchEvent(new CustomEvent('filterRemoved', { detail: {
              name: matchingValues[0].name,
              value: matchingValues[0].value,
              component: this } }));
        }
      }

      /**
       * @function setViewMoreButtonVisibility
       * If there are more matching filtered facets than the default amount of visible facets, the view more button should be visible
       */

    }, {
      key: 'setViewMoreButtonVisibility',
      value: function setViewMoreButtonVisibility() {
        if (this.matchingFilteredFacets > this.defaultVisibleFacets) {
          this.viewMoreLessValuesContainer.classList.remove('hidden');
        } else {
          this.viewMoreLessValuesContainer.classList.add('hidden');
        }

        this.viewMoreValuesCount.innerHTML = '(' + this.matchingFilteredFacets + ')';
      }
      /**
       * @function setNoSuggestionsVisibility
       * Display a message if there are no matching filtered facets
       */

    }, {
      key: 'setNoSuggestionsVisibility',
      value: function setNoSuggestionsVisibility() {
        if (this.matchingFilteredFacets === 0) {
          this.noSuggestionsMessage.innerHTML = this.facetGroupSearchNoSuggestionsText + '\n          <span class="faceted-navigation__list__search__suggestion__suggested-term">\n            ' + this.facetGroupSearchTerm + '\n          </span>';
          this.noSuggestionsMessageContainer.classList.remove('hidden');
        } else {
          this.noSuggestionsMessageContainer.classList.add('hidden');
        }
      }

      /**
       * @function setFacetListFilteredState
       * Checks if there are no matchingFilteredFacets or if all facets match
       * (using startsWith() with an empty string returns a match, meaning all facets match)
      */

    }, {
      key: 'setFacetListFilteredState',
      value: function setFacetListFilteredState() {
        if (this.matchingFilteredFacets === 0 || this.matchingFilteredFacets === this.filterValues.values.length) {
          this.facetList.classList.remove('faceted-navigation__list--filtered');
          this.facetList.classList.add('faceted-navigation__list--unfiltered');
        } else {
          this.facetList.classList.remove('faceted-navigation__list--unfiltered');
          this.facetList.classList.add('faceted-navigation__list--filtered');
        }
      }

      /**
       * @function filterFacets
       * Compares the facetGroupSearchTerm with the facet titles
       * Hides facets that do not contain the facetGroupSearchTerm
       * Sets matchingFilteredFacets to keep track of how many facets contain the facetGroupSearchTerm
       * Calls setFacetListFilteredState, setViewMoreButtonVisibility, and setNoSuggestionsVisibility after comparison is complete
       */

    }, {
      key: 'filterFacets',
      value: function filterFacets() {
        var _this4 = this;

        this.matchingFilteredFacets = 0;

        // there may be a cleaner way to do this
        this.filterValues.values = this.filterValues.values.map(function (filter, index) {
          if (filter.title.toLowerCase().startsWith(_this4.facetGroupSearchTerm.toLowerCase()) === false) {
            _this4.facetListItems[index].classList.add('hidden');
            _this4.facetListItems[index].classList.remove('faceted-navigation__list-item__filtered-match');
          } else {
            _this4.facetListItems[index].classList.remove('hidden');
            _this4.facetListItems[index].classList.add('faceted-navigation__list-item__filtered-match');
            _this4.matchingFilteredFacets++;
          }

          return filter;
        });

        this.setFacetListFilteredState();
        this.setViewMoreButtonVisibility();
        this.setNoSuggestionsVisibility();
      }

      /**
       * @function addEventListener - A method to allow clients to add event listeners
       *  to this component. Calls the addEventListener method of this components containing element.
       */

    }, {
      key: 'addEventListener',
      value: function addEventListener() {
        return this.container.addEventListener.apply(this.container, arguments);
      }

      /**
       * @function removeEventListener - A method to allow clients to remove event listeners
       *  from this component. Calls the removeEventListener method of this components containing element.
       */

    }, {
      key: 'removeEventListener',
      value: function removeEventListener() {
        return this.container.removeEventListener.apply(this.container, arguments);
      }

      /**
       * The filter/facet group
       * @constructor
       * @param {object} container - A reference to the Filter container's DOM element
      */

    }, {
      key: 'showAsGrid',
      get: function get() {
        return this.filterValues.showAsGrid;
      }
    }, {
      key: 'facetSearchEnabled',
      get: function get() {
        return this.filterValues.facetSearchEnabled;
      }
    }, {
      key: 'facetGroupSearchTerm',
      get: function get() {
        return this.input ? this.input.value : '';
      }
    }, {
      key: 'activeFilterValues',
      get: function get() {
        return this.filterValues.values.filter(function (value) {
          return value.active;
        });
      }
    }]);

    function Filter(container) {
      _classCallCheck(this, Filter);

      // The constructor should only contain the boiler plate code for finding or creating the reference.
      if (typeof container.dataset.ref === 'undefined') {
        this.ref = Math.random();
        App.Filter.refs[this.ref] = this;
        container.dataset.ref = this.ref;
        this.init(container);
      } else {
        // If this element has already been instantiated, use the existing reference.
        return App.Filter.refs[container.dataset.ref];
      }
    }

    return Filter;
  }();

  App.Filter.refs = {};
})();